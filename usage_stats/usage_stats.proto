// Copyright 2010-2014, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto2";

package mozc.usage_stats;

message Stats {
  required string name = 1;
  enum Type {
    COUNT = 0;
    TIMING = 1;
    INTEGER = 2;
    BOOLEAN = 3;
    VIRTUAL_KEYBOARD = 4;
  };
  required Type type = 2;

  // count
  optional uint32 count = 3;

  // timing
  optional uint64 total_time = 10;
  optional uint32 num_timings = 4;
  optional uint32 avg_time = 5;
  optional uint32 min_time = 6;
  optional uint32 max_time = 7;

  // integer
  optional int32 int_value = 8;

  // boolean
  optional bool boolean_value = 9;

  message DoubleValueStats {
    optional uint32 num = 1;
    optional double total = 2;
    optional double square_total = 3;
  }
  // virtual keyboard stats
  message TouchEventStats {
    optional uint32 source_id = 1;
    // Start position x,y of a touch event.
    // x, y: keyboard left-top is (0, 0), right-bottom is (1, 1).
    // These values can be negative or greater than one,
    // if a user's touching point is outside of the keyboard.
    optional DoubleValueStats start_x_stats = 2;
    optional DoubleValueStats start_y_stats = 3;
    // Direction of touch event.
    optional DoubleValueStats direction_x_stats = 4;
    optional DoubleValueStats direction_y_stats = 5;
    // Time length of touch event (in seconds).
    optional DoubleValueStats time_length_stats = 6;
  }
  message VirtualKeyboardStats {
    optional string keyboard_name = 1;
    repeated TouchEventStats touch_event_stats = 2;
  }
  repeated VirtualKeyboardStats virtual_keyboard_stats = 11;
};
