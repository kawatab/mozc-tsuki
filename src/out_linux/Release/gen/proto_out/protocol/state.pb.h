// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/state.proto

#ifndef PROTOBUF_INCLUDED_protocol_2fstate_2eproto
#define PROTOBUF_INCLUDED_protocol_2fstate_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protocol/candidates.pb.h"
#include "protocol/commands.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fstate_2eproto 

namespace protobuf_protocol_2fstate_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protocol_2fstate_2eproto
namespace mozc {
namespace protocol {
class SessionState;
class SessionStateDefaultTypeInternal;
extern SessionStateDefaultTypeInternal _SessionState_default_instance_;
}  // namespace protocol
}  // namespace mozc
namespace google {
namespace protobuf {
template<> ::mozc::protocol::SessionState* Arena::CreateMaybeMessage<::mozc::protocol::SessionState>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mozc {
namespace protocol {

// ===================================================================

class SessionState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mozc.protocol.SessionState) */ {
 public:
  SessionState();
  virtual ~SessionState();

  SessionState(const SessionState& from);

  inline SessionState& operator=(const SessionState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionState(SessionState&& from) noexcept
    : SessionState() {
    *this = ::std::move(from);
  }

  inline SessionState& operator=(SessionState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionState* internal_default_instance() {
    return reinterpret_cast<const SessionState*>(
               &_SessionState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SessionState* other);
  friend void swap(SessionState& a, SessionState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionState* New() const final {
    return CreateMaybeMessage<SessionState>(NULL);
  }

  SessionState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SessionState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SessionState& from);
  void MergeFrom(const SessionState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mozc.commands.Preedit preedit = 20;
  bool has_preedit() const;
  void clear_preedit();
  static const int kPreeditFieldNumber = 20;
  private:
  const ::mozc::commands::Preedit& _internal_preedit() const;
  public:
  const ::mozc::commands::Preedit& preedit() const;
  ::mozc::commands::Preedit* release_preedit();
  ::mozc::commands::Preedit* mutable_preedit();
  void set_allocated_preedit(::mozc::commands::Preedit* preedit);

  // optional .mozc.commands.Candidates candidates = 21;
  bool has_candidates() const;
  void clear_candidates();
  static const int kCandidatesFieldNumber = 21;
  private:
  const ::mozc::commands::Candidates& _internal_candidates() const;
  public:
  const ::mozc::commands::Candidates& candidates() const;
  ::mozc::commands::Candidates* release_candidates();
  ::mozc::commands::Candidates* mutable_candidates();
  void set_allocated_candidates(::mozc::commands::Candidates* candidates);

  // optional .mozc.commands.Result result = 23;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 23;
  private:
  const ::mozc::commands::Result& _internal_result() const;
  public:
  const ::mozc::commands::Result& result() const;
  ::mozc::commands::Result* release_result();
  ::mozc::commands::Result* mutable_result();
  void set_allocated_result(::mozc::commands::Result* result);

  // optional .mozc.commands.Request request = 24;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 24;
  private:
  const ::mozc::commands::Request& _internal_request() const;
  public:
  const ::mozc::commands::Request& request() const;
  ::mozc::commands::Request* release_request();
  ::mozc::commands::Request* mutable_request();
  void set_allocated_request(::mozc::commands::Request* request);

  // required uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint64 created_time = 2;
  bool has_created_time() const;
  void clear_created_time();
  static const int kCreatedTimeFieldNumber = 2;
  ::google::protobuf::uint64 created_time() const;
  void set_created_time(::google::protobuf::uint64 value);

  // optional uint64 start_preedit_time = 10;
  bool has_start_preedit_time() const;
  void clear_start_preedit_time();
  static const int kStartPreeditTimeFieldNumber = 10;
  ::google::protobuf::uint64 start_preedit_time() const;
  void set_start_preedit_time(::google::protobuf::uint64 value);

  // optional uint64 start_conversion_window_time = 11;
  bool has_start_conversion_window_time() const;
  void clear_start_conversion_window_time();
  static const int kStartConversionWindowTimeFieldNumber = 11;
  ::google::protobuf::uint64 start_conversion_window_time() const;
  void set_start_conversion_window_time(::google::protobuf::uint64 value);

  // optional uint64 start_prediction_window_time = 12;
  bool has_start_prediction_window_time() const;
  void clear_start_prediction_window_time();
  static const int kStartPredictionWindowTimeFieldNumber = 12;
  ::google::protobuf::uint64 start_prediction_window_time() const;
  void set_start_prediction_window_time(::google::protobuf::uint64 value);

  // optional uint64 start_suggestion_window_time = 13;
  bool has_start_suggestion_window_time() const;
  void clear_start_suggestion_window_time();
  static const int kStartSuggestionWindowTimeFieldNumber = 13;
  ::google::protobuf::uint64 start_suggestion_window_time() const;
  void set_start_suggestion_window_time(::google::protobuf::uint64 value);

  // optional uint64 start_infolist_window_time = 14;
  bool has_start_infolist_window_time() const;
  void clear_start_infolist_window_time();
  static const int kStartInfolistWindowTimeFieldNumber = 14;
  ::google::protobuf::uint64 start_infolist_window_time() const;
  void set_start_infolist_window_time(::google::protobuf::uint64 value);

  // optional bool committed = 3 [default = false];
  bool has_committed() const;
  void clear_committed();
  static const int kCommittedFieldNumber = 3;
  bool committed() const;
  void set_committed(bool value);

  // optional .mozc.commands.Context.InputFieldType input_field_type = 25;
  bool has_input_field_type() const;
  void clear_input_field_type();
  static const int kInputFieldTypeFieldNumber = 25;
  ::mozc::commands::Context_InputFieldType input_field_type() const;
  void set_input_field_type(::mozc::commands::Context_InputFieldType value);

  // @@protoc_insertion_point(class_scope:mozc.protocol.SessionState)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_created_time();
  void clear_has_created_time();
  void set_has_committed();
  void clear_has_committed();
  void set_has_start_preedit_time();
  void clear_has_start_preedit_time();
  void set_has_start_conversion_window_time();
  void clear_has_start_conversion_window_time();
  void set_has_start_prediction_window_time();
  void clear_has_start_prediction_window_time();
  void set_has_start_suggestion_window_time();
  void clear_has_start_suggestion_window_time();
  void set_has_start_infolist_window_time();
  void clear_has_start_infolist_window_time();
  void set_has_preedit();
  void clear_has_preedit();
  void set_has_candidates();
  void clear_has_candidates();
  void set_has_result();
  void clear_has_result();
  void set_has_request();
  void clear_has_request();
  void set_has_input_field_type();
  void clear_has_input_field_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::mozc::commands::Preedit* preedit_;
  ::mozc::commands::Candidates* candidates_;
  ::mozc::commands::Result* result_;
  ::mozc::commands::Request* request_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 created_time_;
  ::google::protobuf::uint64 start_preedit_time_;
  ::google::protobuf::uint64 start_conversion_window_time_;
  ::google::protobuf::uint64 start_prediction_window_time_;
  ::google::protobuf::uint64 start_suggestion_window_time_;
  ::google::protobuf::uint64 start_infolist_window_time_;
  bool committed_;
  int input_field_type_;
  friend struct ::protobuf_protocol_2fstate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionState

// required uint64 id = 1;
inline bool SessionState::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SessionState::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SessionState::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SessionState::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 SessionState::id() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.id)
  return id_;
}
inline void SessionState::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.id)
}

// optional uint64 created_time = 2;
inline bool SessionState::has_created_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SessionState::set_has_created_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SessionState::clear_has_created_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SessionState::clear_created_time() {
  created_time_ = GOOGLE_ULONGLONG(0);
  clear_has_created_time();
}
inline ::google::protobuf::uint64 SessionState::created_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.created_time)
  return created_time_;
}
inline void SessionState::set_created_time(::google::protobuf::uint64 value) {
  set_has_created_time();
  created_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.created_time)
}

// optional bool committed = 3 [default = false];
inline bool SessionState::has_committed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SessionState::set_has_committed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SessionState::clear_has_committed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SessionState::clear_committed() {
  committed_ = false;
  clear_has_committed();
}
inline bool SessionState::committed() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.committed)
  return committed_;
}
inline void SessionState::set_committed(bool value) {
  set_has_committed();
  committed_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.committed)
}

// optional uint64 start_preedit_time = 10;
inline bool SessionState::has_start_preedit_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SessionState::set_has_start_preedit_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SessionState::clear_has_start_preedit_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SessionState::clear_start_preedit_time() {
  start_preedit_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_preedit_time();
}
inline ::google::protobuf::uint64 SessionState::start_preedit_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.start_preedit_time)
  return start_preedit_time_;
}
inline void SessionState::set_start_preedit_time(::google::protobuf::uint64 value) {
  set_has_start_preedit_time();
  start_preedit_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.start_preedit_time)
}

// optional uint64 start_conversion_window_time = 11;
inline bool SessionState::has_start_conversion_window_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SessionState::set_has_start_conversion_window_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SessionState::clear_has_start_conversion_window_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SessionState::clear_start_conversion_window_time() {
  start_conversion_window_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_conversion_window_time();
}
inline ::google::protobuf::uint64 SessionState::start_conversion_window_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.start_conversion_window_time)
  return start_conversion_window_time_;
}
inline void SessionState::set_start_conversion_window_time(::google::protobuf::uint64 value) {
  set_has_start_conversion_window_time();
  start_conversion_window_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.start_conversion_window_time)
}

// optional uint64 start_prediction_window_time = 12;
inline bool SessionState::has_start_prediction_window_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SessionState::set_has_start_prediction_window_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SessionState::clear_has_start_prediction_window_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SessionState::clear_start_prediction_window_time() {
  start_prediction_window_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_prediction_window_time();
}
inline ::google::protobuf::uint64 SessionState::start_prediction_window_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.start_prediction_window_time)
  return start_prediction_window_time_;
}
inline void SessionState::set_start_prediction_window_time(::google::protobuf::uint64 value) {
  set_has_start_prediction_window_time();
  start_prediction_window_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.start_prediction_window_time)
}

// optional uint64 start_suggestion_window_time = 13;
inline bool SessionState::has_start_suggestion_window_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SessionState::set_has_start_suggestion_window_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SessionState::clear_has_start_suggestion_window_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SessionState::clear_start_suggestion_window_time() {
  start_suggestion_window_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_suggestion_window_time();
}
inline ::google::protobuf::uint64 SessionState::start_suggestion_window_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.start_suggestion_window_time)
  return start_suggestion_window_time_;
}
inline void SessionState::set_start_suggestion_window_time(::google::protobuf::uint64 value) {
  set_has_start_suggestion_window_time();
  start_suggestion_window_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.start_suggestion_window_time)
}

// optional uint64 start_infolist_window_time = 14;
inline bool SessionState::has_start_infolist_window_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SessionState::set_has_start_infolist_window_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SessionState::clear_has_start_infolist_window_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SessionState::clear_start_infolist_window_time() {
  start_infolist_window_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_infolist_window_time();
}
inline ::google::protobuf::uint64 SessionState::start_infolist_window_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.start_infolist_window_time)
  return start_infolist_window_time_;
}
inline void SessionState::set_start_infolist_window_time(::google::protobuf::uint64 value) {
  set_has_start_infolist_window_time();
  start_infolist_window_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.start_infolist_window_time)
}

// optional .mozc.commands.Preedit preedit = 20;
inline bool SessionState::has_preedit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionState::set_has_preedit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionState::clear_has_preedit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mozc::commands::Preedit& SessionState::_internal_preedit() const {
  return *preedit_;
}
inline const ::mozc::commands::Preedit& SessionState::preedit() const {
  const ::mozc::commands::Preedit* p = preedit_;
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.preedit)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::commands::Preedit*>(
      &::mozc::commands::_Preedit_default_instance_);
}
inline ::mozc::commands::Preedit* SessionState::release_preedit() {
  // @@protoc_insertion_point(field_release:mozc.protocol.SessionState.preedit)
  clear_has_preedit();
  ::mozc::commands::Preedit* temp = preedit_;
  preedit_ = NULL;
  return temp;
}
inline ::mozc::commands::Preedit* SessionState::mutable_preedit() {
  set_has_preedit();
  if (preedit_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::commands::Preedit>(GetArenaNoVirtual());
    preedit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.protocol.SessionState.preedit)
  return preedit_;
}
inline void SessionState::set_allocated_preedit(::mozc::commands::Preedit* preedit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(preedit_);
  }
  if (preedit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      preedit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, preedit, submessage_arena);
    }
    set_has_preedit();
  } else {
    clear_has_preedit();
  }
  preedit_ = preedit;
  // @@protoc_insertion_point(field_set_allocated:mozc.protocol.SessionState.preedit)
}

// optional .mozc.commands.Candidates candidates = 21;
inline bool SessionState::has_candidates() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionState::set_has_candidates() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionState::clear_has_candidates() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mozc::commands::Candidates& SessionState::_internal_candidates() const {
  return *candidates_;
}
inline const ::mozc::commands::Candidates& SessionState::candidates() const {
  const ::mozc::commands::Candidates* p = candidates_;
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.candidates)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::commands::Candidates*>(
      &::mozc::commands::_Candidates_default_instance_);
}
inline ::mozc::commands::Candidates* SessionState::release_candidates() {
  // @@protoc_insertion_point(field_release:mozc.protocol.SessionState.candidates)
  clear_has_candidates();
  ::mozc::commands::Candidates* temp = candidates_;
  candidates_ = NULL;
  return temp;
}
inline ::mozc::commands::Candidates* SessionState::mutable_candidates() {
  set_has_candidates();
  if (candidates_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::commands::Candidates>(GetArenaNoVirtual());
    candidates_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.protocol.SessionState.candidates)
  return candidates_;
}
inline void SessionState::set_allocated_candidates(::mozc::commands::Candidates* candidates) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(candidates_);
  }
  if (candidates) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      candidates = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, candidates, submessage_arena);
    }
    set_has_candidates();
  } else {
    clear_has_candidates();
  }
  candidates_ = candidates;
  // @@protoc_insertion_point(field_set_allocated:mozc.protocol.SessionState.candidates)
}

// optional .mozc.commands.Result result = 23;
inline bool SessionState::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionState::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionState::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mozc::commands::Result& SessionState::_internal_result() const {
  return *result_;
}
inline const ::mozc::commands::Result& SessionState::result() const {
  const ::mozc::commands::Result* p = result_;
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.result)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::commands::Result*>(
      &::mozc::commands::_Result_default_instance_);
}
inline ::mozc::commands::Result* SessionState::release_result() {
  // @@protoc_insertion_point(field_release:mozc.protocol.SessionState.result)
  clear_has_result();
  ::mozc::commands::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline ::mozc::commands::Result* SessionState::mutable_result() {
  set_has_result();
  if (result_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::commands::Result>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.protocol.SessionState.result)
  return result_;
}
inline void SessionState::set_allocated_result(::mozc::commands::Result* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(result_);
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    set_has_result();
  } else {
    clear_has_result();
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:mozc.protocol.SessionState.result)
}

// optional .mozc.commands.Request request = 24;
inline bool SessionState::has_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionState::set_has_request() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SessionState::clear_has_request() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mozc::commands::Request& SessionState::_internal_request() const {
  return *request_;
}
inline const ::mozc::commands::Request& SessionState::request() const {
  const ::mozc::commands::Request* p = request_;
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.request)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::commands::Request*>(
      &::mozc::commands::_Request_default_instance_);
}
inline ::mozc::commands::Request* SessionState::release_request() {
  // @@protoc_insertion_point(field_release:mozc.protocol.SessionState.request)
  clear_has_request();
  ::mozc::commands::Request* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::mozc::commands::Request* SessionState::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::commands::Request>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.protocol.SessionState.request)
  return request_;
}
inline void SessionState::set_allocated_request(::mozc::commands::Request* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(request_);
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    set_has_request();
  } else {
    clear_has_request();
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:mozc.protocol.SessionState.request)
}

// optional .mozc.commands.Context.InputFieldType input_field_type = 25;
inline bool SessionState::has_input_field_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SessionState::set_has_input_field_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SessionState::clear_has_input_field_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SessionState::clear_input_field_type() {
  input_field_type_ = 1;
  clear_has_input_field_type();
}
inline ::mozc::commands::Context_InputFieldType SessionState::input_field_type() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.input_field_type)
  return static_cast< ::mozc::commands::Context_InputFieldType >(input_field_type_);
}
inline void SessionState::set_input_field_type(::mozc::commands::Context_InputFieldType value) {
  assert(::mozc::commands::Context_InputFieldType_IsValid(value));
  set_has_input_field_type();
  input_field_type_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.input_field_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace mozc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protocol_2fstate_2eproto
