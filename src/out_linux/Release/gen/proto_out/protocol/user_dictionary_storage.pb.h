// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/user_dictionary_storage.proto

#ifndef PROTOBUF_INCLUDED_protocol_2fuser_5fdictionary_5fstorage_2eproto
#define PROTOBUF_INCLUDED_protocol_2fuser_5fdictionary_5fstorage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto 

namespace protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto
namespace mozc {
namespace user_dictionary {
class UserDictionary;
class UserDictionaryDefaultTypeInternal;
extern UserDictionaryDefaultTypeInternal _UserDictionary_default_instance_;
class UserDictionaryCommand;
class UserDictionaryCommandDefaultTypeInternal;
extern UserDictionaryCommandDefaultTypeInternal _UserDictionaryCommand_default_instance_;
class UserDictionaryCommandStatus;
class UserDictionaryCommandStatusDefaultTypeInternal;
extern UserDictionaryCommandStatusDefaultTypeInternal _UserDictionaryCommandStatus_default_instance_;
class UserDictionaryStorage;
class UserDictionaryStorageDefaultTypeInternal;
extern UserDictionaryStorageDefaultTypeInternal _UserDictionaryStorage_default_instance_;
class UserDictionary_Entry;
class UserDictionary_EntryDefaultTypeInternal;
extern UserDictionary_EntryDefaultTypeInternal _UserDictionary_Entry_default_instance_;
}  // namespace user_dictionary
}  // namespace mozc
namespace google {
namespace protobuf {
template<> ::mozc::user_dictionary::UserDictionary* Arena::CreateMaybeMessage<::mozc::user_dictionary::UserDictionary>(Arena*);
template<> ::mozc::user_dictionary::UserDictionaryCommand* Arena::CreateMaybeMessage<::mozc::user_dictionary::UserDictionaryCommand>(Arena*);
template<> ::mozc::user_dictionary::UserDictionaryCommandStatus* Arena::CreateMaybeMessage<::mozc::user_dictionary::UserDictionaryCommandStatus>(Arena*);
template<> ::mozc::user_dictionary::UserDictionaryStorage* Arena::CreateMaybeMessage<::mozc::user_dictionary::UserDictionaryStorage>(Arena*);
template<> ::mozc::user_dictionary::UserDictionary_Entry* Arena::CreateMaybeMessage<::mozc::user_dictionary::UserDictionary_Entry>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mozc {
namespace user_dictionary {

enum UserDictionary_PosType {
  UserDictionary_PosType_NOUN = 1,
  UserDictionary_PosType_ABBREVIATION = 2,
  UserDictionary_PosType_SUGGESTION_ONLY = 3,
  UserDictionary_PosType_PROPER_NOUN = 4,
  UserDictionary_PosType_PERSONAL_NAME = 5,
  UserDictionary_PosType_FAMILY_NAME = 6,
  UserDictionary_PosType_FIRST_NAME = 7,
  UserDictionary_PosType_ORGANIZATION_NAME = 8,
  UserDictionary_PosType_PLACE_NAME = 9,
  UserDictionary_PosType_SA_IRREGULAR_CONJUGATION_NOUN = 10,
  UserDictionary_PosType_ADJECTIVE_VERBAL_NOUN = 11,
  UserDictionary_PosType_NUMBER = 12,
  UserDictionary_PosType_ALPHABET = 13,
  UserDictionary_PosType_SYMBOL = 14,
  UserDictionary_PosType_EMOTICON = 15,
  UserDictionary_PosType_ADVERB = 16,
  UserDictionary_PosType_PRENOUN_ADJECTIVAL = 17,
  UserDictionary_PosType_CONJUNCTION = 18,
  UserDictionary_PosType_INTERJECTION = 19,
  UserDictionary_PosType_PREFIX = 20,
  UserDictionary_PosType_COUNTER_SUFFIX = 21,
  UserDictionary_PosType_GENERIC_SUFFIX = 22,
  UserDictionary_PosType_PERSON_NAME_SUFFIX = 23,
  UserDictionary_PosType_PLACE_NAME_SUFFIX = 24,
  UserDictionary_PosType_WA_GROUP1_VERB = 25,
  UserDictionary_PosType_KA_GROUP1_VERB = 26,
  UserDictionary_PosType_SA_GROUP1_VERB = 27,
  UserDictionary_PosType_TA_GROUP1_VERB = 28,
  UserDictionary_PosType_NA_GROUP1_VERB = 29,
  UserDictionary_PosType_MA_GROUP1_VERB = 30,
  UserDictionary_PosType_RA_GROUP1_VERB = 31,
  UserDictionary_PosType_GA_GROUP1_VERB = 32,
  UserDictionary_PosType_BA_GROUP1_VERB = 33,
  UserDictionary_PosType_HA_GROUP1_VERB = 34,
  UserDictionary_PosType_GROUP2_VERB = 35,
  UserDictionary_PosType_KURU_GROUP3_VERB = 36,
  UserDictionary_PosType_SURU_GROUP3_VERB = 37,
  UserDictionary_PosType_ZURU_GROUP3_VERB = 38,
  UserDictionary_PosType_RU_GROUP3_VERB = 39,
  UserDictionary_PosType_ADJECTIVE = 40,
  UserDictionary_PosType_SENTENCE_ENDING_PARTICLE = 41,
  UserDictionary_PosType_PUNCTUATION = 42,
  UserDictionary_PosType_FREE_STANDING_WORD = 43,
  UserDictionary_PosType_SUPPRESSION_WORD = 44
};
bool UserDictionary_PosType_IsValid(int value);
const UserDictionary_PosType UserDictionary_PosType_PosType_MIN = UserDictionary_PosType_NOUN;
const UserDictionary_PosType UserDictionary_PosType_PosType_MAX = UserDictionary_PosType_SUPPRESSION_WORD;
const int UserDictionary_PosType_PosType_ARRAYSIZE = UserDictionary_PosType_PosType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserDictionary_PosType_descriptor();
inline const ::std::string& UserDictionary_PosType_Name(UserDictionary_PosType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserDictionary_PosType_descriptor(), value);
}
inline bool UserDictionary_PosType_Parse(
    const ::std::string& name, UserDictionary_PosType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserDictionary_PosType>(
    UserDictionary_PosType_descriptor(), name, value);
}
enum UserDictionaryStorage_StorageType {
  UserDictionaryStorage_StorageType_SNAPSHOT = 1,
  UserDictionaryStorage_StorageType_UPDATE = 2
};
bool UserDictionaryStorage_StorageType_IsValid(int value);
const UserDictionaryStorage_StorageType UserDictionaryStorage_StorageType_StorageType_MIN = UserDictionaryStorage_StorageType_SNAPSHOT;
const UserDictionaryStorage_StorageType UserDictionaryStorage_StorageType_StorageType_MAX = UserDictionaryStorage_StorageType_UPDATE;
const int UserDictionaryStorage_StorageType_StorageType_ARRAYSIZE = UserDictionaryStorage_StorageType_StorageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserDictionaryStorage_StorageType_descriptor();
inline const ::std::string& UserDictionaryStorage_StorageType_Name(UserDictionaryStorage_StorageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserDictionaryStorage_StorageType_descriptor(), value);
}
inline bool UserDictionaryStorage_StorageType_Parse(
    const ::std::string& name, UserDictionaryStorage_StorageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserDictionaryStorage_StorageType>(
    UserDictionaryStorage_StorageType_descriptor(), name, value);
}
enum UserDictionaryCommand_CommandType {
  UserDictionaryCommand_CommandType_NO_OPERATION = 0,
  UserDictionaryCommand_CommandType_CLEAR_STORAGE = 1,
  UserDictionaryCommand_CommandType_CREATE_SESSION = 2,
  UserDictionaryCommand_CommandType_DELETE_SESSION = 3,
  UserDictionaryCommand_CommandType_SET_DEFAULT_DICTIONARY_NAME = 4,
  UserDictionaryCommand_CommandType_CHECK_UNDOABILITY = 5,
  UserDictionaryCommand_CommandType_UNDO = 6,
  UserDictionaryCommand_CommandType_LOAD = 7,
  UserDictionaryCommand_CommandType_SAVE = 8,
  UserDictionaryCommand_CommandType_GET_USER_DICTIONARY_NAME_LIST = 9,
  UserDictionaryCommand_CommandType_GET_ENTRY_SIZE = 10,
  UserDictionaryCommand_CommandType_OBSOLETE_GET_ENTRY = 11,
  UserDictionaryCommand_CommandType_CHECK_NEW_DICTIONARY_AVAILABILITY = 12,
  UserDictionaryCommand_CommandType_CREATE_DICTIONARY = 13,
  UserDictionaryCommand_CommandType_DELETE_DICTIONARY = 14,
  UserDictionaryCommand_CommandType_RENAME_DICTIONARY = 15,
  UserDictionaryCommand_CommandType_CHECK_NEW_ENTRY_AVAILABILITY = 16,
  UserDictionaryCommand_CommandType_ADD_ENTRY = 17,
  UserDictionaryCommand_CommandType_EDIT_ENTRY = 18,
  UserDictionaryCommand_CommandType_DELETE_ENTRY = 19,
  UserDictionaryCommand_CommandType_IMPORT_DATA = 20,
  UserDictionaryCommand_CommandType_GET_STORAGE = 21,
  UserDictionaryCommand_CommandType_GET_ENTRIES = 22
};
bool UserDictionaryCommand_CommandType_IsValid(int value);
const UserDictionaryCommand_CommandType UserDictionaryCommand_CommandType_CommandType_MIN = UserDictionaryCommand_CommandType_NO_OPERATION;
const UserDictionaryCommand_CommandType UserDictionaryCommand_CommandType_CommandType_MAX = UserDictionaryCommand_CommandType_GET_ENTRIES;
const int UserDictionaryCommand_CommandType_CommandType_ARRAYSIZE = UserDictionaryCommand_CommandType_CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserDictionaryCommand_CommandType_descriptor();
inline const ::std::string& UserDictionaryCommand_CommandType_Name(UserDictionaryCommand_CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserDictionaryCommand_CommandType_descriptor(), value);
}
inline bool UserDictionaryCommand_CommandType_Parse(
    const ::std::string& name, UserDictionaryCommand_CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserDictionaryCommand_CommandType>(
    UserDictionaryCommand_CommandType_descriptor(), name, value);
}
enum UserDictionaryCommandStatus_Status {
  UserDictionaryCommandStatus_Status_USER_DICTIONARY_COMMAND_SUCCESS = 1,
  UserDictionaryCommandStatus_Status_UNKNOWN_ERROR = 2,
  UserDictionaryCommandStatus_Status_UNKNOWN_COMMAND = 3,
  UserDictionaryCommandStatus_Status_INVALID_ARGUMENT = 4,
  UserDictionaryCommandStatus_Status_UNKNOWN_SESSION_ID = 5,
  UserDictionaryCommandStatus_Status_FILE_NOT_FOUND = 6,
  UserDictionaryCommandStatus_Status_INVALID_FILE_FORMAT = 7,
  UserDictionaryCommandStatus_Status_FILE_SIZE_LIMIT_EXCEEDED = 8,
  UserDictionaryCommandStatus_Status_DICTIONARY_SIZE_LIMIT_EXCEEDED = 9,
  UserDictionaryCommandStatus_Status_ENTRY_SIZE_LIMIT_EXCEEDED = 10,
  UserDictionaryCommandStatus_Status_UNKNOWN_DICTIONARY_ID = 11,
  UserDictionaryCommandStatus_Status_ENTRY_INDEX_OUT_OF_RANGE = 12,
  UserDictionaryCommandStatus_Status_DICTIONARY_NAME_EMPTY = 13,
  UserDictionaryCommandStatus_Status_DICTIONARY_NAME_TOO_LONG = 14,
  UserDictionaryCommandStatus_Status_DICTIONARY_NAME_CONTAINS_INVALID_CHARACTER = 15,
  UserDictionaryCommandStatus_Status_DICTIONARY_NAME_DUPLICATED = 16,
  UserDictionaryCommandStatus_Status_READING_EMPTY = 17,
  UserDictionaryCommandStatus_Status_READING_TOO_LONG = 18,
  UserDictionaryCommandStatus_Status_READING_CONTAINS_INVALID_CHARACTER = 19,
  UserDictionaryCommandStatus_Status_WORD_EMPTY = 20,
  UserDictionaryCommandStatus_Status_WORD_TOO_LONG = 21,
  UserDictionaryCommandStatus_Status_WORD_CONTAINS_INVALID_CHARACTER = 22,
  UserDictionaryCommandStatus_Status_INVALID_POS_TYPE = 23,
  UserDictionaryCommandStatus_Status_COMMENT_TOO_LONG = 24,
  UserDictionaryCommandStatus_Status_COMMENT_CONTAINS_INVALID_CHARACTER = 25,
  UserDictionaryCommandStatus_Status_IMPORT_TOO_MANY_WORDS = 26,
  UserDictionaryCommandStatus_Status_IMPORT_INVALID_ENTRIES = 27,
  UserDictionaryCommandStatus_Status_NO_UNDO_HISTORY = 28
};
bool UserDictionaryCommandStatus_Status_IsValid(int value);
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus_Status_Status_MIN = UserDictionaryCommandStatus_Status_USER_DICTIONARY_COMMAND_SUCCESS;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus_Status_Status_MAX = UserDictionaryCommandStatus_Status_NO_UNDO_HISTORY;
const int UserDictionaryCommandStatus_Status_Status_ARRAYSIZE = UserDictionaryCommandStatus_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserDictionaryCommandStatus_Status_descriptor();
inline const ::std::string& UserDictionaryCommandStatus_Status_Name(UserDictionaryCommandStatus_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserDictionaryCommandStatus_Status_descriptor(), value);
}
inline bool UserDictionaryCommandStatus_Status_Parse(
    const ::std::string& name, UserDictionaryCommandStatus_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserDictionaryCommandStatus_Status>(
    UserDictionaryCommandStatus_Status_descriptor(), name, value);
}
// ===================================================================

class UserDictionary_Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mozc.user_dictionary.UserDictionary.Entry) */ {
 public:
  UserDictionary_Entry();
  virtual ~UserDictionary_Entry();

  UserDictionary_Entry(const UserDictionary_Entry& from);

  inline UserDictionary_Entry& operator=(const UserDictionary_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserDictionary_Entry(UserDictionary_Entry&& from) noexcept
    : UserDictionary_Entry() {
    *this = ::std::move(from);
  }

  inline UserDictionary_Entry& operator=(UserDictionary_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDictionary_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDictionary_Entry* internal_default_instance() {
    return reinterpret_cast<const UserDictionary_Entry*>(
               &_UserDictionary_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserDictionary_Entry* other);
  friend void swap(UserDictionary_Entry& a, UserDictionary_Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserDictionary_Entry* New() const final {
    return CreateMaybeMessage<UserDictionary_Entry>(NULL);
  }

  UserDictionary_Entry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserDictionary_Entry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserDictionary_Entry& from);
  void MergeFrom(const UserDictionary_Entry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDictionary_Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1 [default = ""];
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string value = 2 [default = ""];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string comment = 4 [default = ""];
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 4;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // optional bool removed = 10 [default = false];
  bool has_removed() const;
  void clear_removed();
  static const int kRemovedFieldNumber = 10;
  bool removed() const;
  void set_removed(bool value);

  // optional bool auto_registered = 11 [default = false];
  bool has_auto_registered() const;
  void clear_auto_registered();
  static const int kAutoRegisteredFieldNumber = 11;
  bool auto_registered() const;
  void set_auto_registered(bool value);

  // optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 5;
  ::mozc::user_dictionary::UserDictionary_PosType pos() const;
  void set_pos(::mozc::user_dictionary::UserDictionary_PosType value);

  // @@protoc_insertion_point(class_scope:mozc.user_dictionary.UserDictionary.Entry)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();
  void set_has_comment();
  void clear_has_comment();
  void set_has_pos();
  void clear_has_pos();
  void set_has_removed();
  void clear_has_removed();
  void set_has_auto_registered();
  void clear_has_auto_registered();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  bool removed_;
  bool auto_registered_;
  int pos_;
  friend struct ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserDictionary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mozc.user_dictionary.UserDictionary) */ {
 public:
  UserDictionary();
  virtual ~UserDictionary();

  UserDictionary(const UserDictionary& from);

  inline UserDictionary& operator=(const UserDictionary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserDictionary(UserDictionary&& from) noexcept
    : UserDictionary() {
    *this = ::std::move(from);
  }

  inline UserDictionary& operator=(UserDictionary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDictionary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDictionary* internal_default_instance() {
    return reinterpret_cast<const UserDictionary*>(
               &_UserDictionary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(UserDictionary* other);
  friend void swap(UserDictionary& a, UserDictionary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserDictionary* New() const final {
    return CreateMaybeMessage<UserDictionary>(NULL);
  }

  UserDictionary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserDictionary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserDictionary& from);
  void MergeFrom(const UserDictionary& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDictionary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserDictionary_Entry Entry;

  typedef UserDictionary_PosType PosType;
  static const PosType NOUN =
    UserDictionary_PosType_NOUN;
  static const PosType ABBREVIATION =
    UserDictionary_PosType_ABBREVIATION;
  static const PosType SUGGESTION_ONLY =
    UserDictionary_PosType_SUGGESTION_ONLY;
  static const PosType PROPER_NOUN =
    UserDictionary_PosType_PROPER_NOUN;
  static const PosType PERSONAL_NAME =
    UserDictionary_PosType_PERSONAL_NAME;
  static const PosType FAMILY_NAME =
    UserDictionary_PosType_FAMILY_NAME;
  static const PosType FIRST_NAME =
    UserDictionary_PosType_FIRST_NAME;
  static const PosType ORGANIZATION_NAME =
    UserDictionary_PosType_ORGANIZATION_NAME;
  static const PosType PLACE_NAME =
    UserDictionary_PosType_PLACE_NAME;
  static const PosType SA_IRREGULAR_CONJUGATION_NOUN =
    UserDictionary_PosType_SA_IRREGULAR_CONJUGATION_NOUN;
  static const PosType ADJECTIVE_VERBAL_NOUN =
    UserDictionary_PosType_ADJECTIVE_VERBAL_NOUN;
  static const PosType NUMBER =
    UserDictionary_PosType_NUMBER;
  static const PosType ALPHABET =
    UserDictionary_PosType_ALPHABET;
  static const PosType SYMBOL =
    UserDictionary_PosType_SYMBOL;
  static const PosType EMOTICON =
    UserDictionary_PosType_EMOTICON;
  static const PosType ADVERB =
    UserDictionary_PosType_ADVERB;
  static const PosType PRENOUN_ADJECTIVAL =
    UserDictionary_PosType_PRENOUN_ADJECTIVAL;
  static const PosType CONJUNCTION =
    UserDictionary_PosType_CONJUNCTION;
  static const PosType INTERJECTION =
    UserDictionary_PosType_INTERJECTION;
  static const PosType PREFIX =
    UserDictionary_PosType_PREFIX;
  static const PosType COUNTER_SUFFIX =
    UserDictionary_PosType_COUNTER_SUFFIX;
  static const PosType GENERIC_SUFFIX =
    UserDictionary_PosType_GENERIC_SUFFIX;
  static const PosType PERSON_NAME_SUFFIX =
    UserDictionary_PosType_PERSON_NAME_SUFFIX;
  static const PosType PLACE_NAME_SUFFIX =
    UserDictionary_PosType_PLACE_NAME_SUFFIX;
  static const PosType WA_GROUP1_VERB =
    UserDictionary_PosType_WA_GROUP1_VERB;
  static const PosType KA_GROUP1_VERB =
    UserDictionary_PosType_KA_GROUP1_VERB;
  static const PosType SA_GROUP1_VERB =
    UserDictionary_PosType_SA_GROUP1_VERB;
  static const PosType TA_GROUP1_VERB =
    UserDictionary_PosType_TA_GROUP1_VERB;
  static const PosType NA_GROUP1_VERB =
    UserDictionary_PosType_NA_GROUP1_VERB;
  static const PosType MA_GROUP1_VERB =
    UserDictionary_PosType_MA_GROUP1_VERB;
  static const PosType RA_GROUP1_VERB =
    UserDictionary_PosType_RA_GROUP1_VERB;
  static const PosType GA_GROUP1_VERB =
    UserDictionary_PosType_GA_GROUP1_VERB;
  static const PosType BA_GROUP1_VERB =
    UserDictionary_PosType_BA_GROUP1_VERB;
  static const PosType HA_GROUP1_VERB =
    UserDictionary_PosType_HA_GROUP1_VERB;
  static const PosType GROUP2_VERB =
    UserDictionary_PosType_GROUP2_VERB;
  static const PosType KURU_GROUP3_VERB =
    UserDictionary_PosType_KURU_GROUP3_VERB;
  static const PosType SURU_GROUP3_VERB =
    UserDictionary_PosType_SURU_GROUP3_VERB;
  static const PosType ZURU_GROUP3_VERB =
    UserDictionary_PosType_ZURU_GROUP3_VERB;
  static const PosType RU_GROUP3_VERB =
    UserDictionary_PosType_RU_GROUP3_VERB;
  static const PosType ADJECTIVE =
    UserDictionary_PosType_ADJECTIVE;
  static const PosType SENTENCE_ENDING_PARTICLE =
    UserDictionary_PosType_SENTENCE_ENDING_PARTICLE;
  static const PosType PUNCTUATION =
    UserDictionary_PosType_PUNCTUATION;
  static const PosType FREE_STANDING_WORD =
    UserDictionary_PosType_FREE_STANDING_WORD;
  static const PosType SUPPRESSION_WORD =
    UserDictionary_PosType_SUPPRESSION_WORD;
  static inline bool PosType_IsValid(int value) {
    return UserDictionary_PosType_IsValid(value);
  }
  static const PosType PosType_MIN =
    UserDictionary_PosType_PosType_MIN;
  static const PosType PosType_MAX =
    UserDictionary_PosType_PosType_MAX;
  static const int PosType_ARRAYSIZE =
    UserDictionary_PosType_PosType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PosType_descriptor() {
    return UserDictionary_PosType_descriptor();
  }
  static inline const ::std::string& PosType_Name(PosType value) {
    return UserDictionary_PosType_Name(value);
  }
  static inline bool PosType_Parse(const ::std::string& name,
      PosType* value) {
    return UserDictionary_PosType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  ::mozc::user_dictionary::UserDictionary_Entry* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >*
      mutable_entries();
  const ::mozc::user_dictionary::UserDictionary_Entry& entries(int index) const;
  ::mozc::user_dictionary::UserDictionary_Entry* add_entries();
  const ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >&
      entries() const;

  // optional string name = 3 [default = ""];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint64 id = 1 [default = 0];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional bool removed = 5 [default = false];
  bool has_removed() const;
  void clear_removed();
  static const int kRemovedFieldNumber = 5;
  bool removed() const;
  void set_removed(bool value);

  // optional bool syncable = 6 [default = false];
  bool has_syncable() const;
  void clear_syncable();
  static const int kSyncableFieldNumber = 6;
  bool syncable() const;
  void set_syncable(bool value);

  // optional bool enabled = 2 [default = true];
  bool has_enabled() const;
  void clear_enabled();
  static const int kEnabledFieldNumber = 2;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:mozc.user_dictionary.UserDictionary)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_enabled();
  void clear_has_enabled();
  void set_has_name();
  void clear_has_name();
  void set_has_removed();
  void clear_has_removed();
  void set_has_syncable();
  void clear_has_syncable();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry > entries_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 id_;
  bool removed_;
  bool syncable_;
  bool enabled_;
  friend struct ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserDictionaryStorage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mozc.user_dictionary.UserDictionaryStorage) */ {
 public:
  UserDictionaryStorage();
  virtual ~UserDictionaryStorage();

  UserDictionaryStorage(const UserDictionaryStorage& from);

  inline UserDictionaryStorage& operator=(const UserDictionaryStorage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserDictionaryStorage(UserDictionaryStorage&& from) noexcept
    : UserDictionaryStorage() {
    *this = ::std::move(from);
  }

  inline UserDictionaryStorage& operator=(UserDictionaryStorage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDictionaryStorage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDictionaryStorage* internal_default_instance() {
    return reinterpret_cast<const UserDictionaryStorage*>(
               &_UserDictionaryStorage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UserDictionaryStorage* other);
  friend void swap(UserDictionaryStorage& a, UserDictionaryStorage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserDictionaryStorage* New() const final {
    return CreateMaybeMessage<UserDictionaryStorage>(NULL);
  }

  UserDictionaryStorage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserDictionaryStorage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserDictionaryStorage& from);
  void MergeFrom(const UserDictionaryStorage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDictionaryStorage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserDictionaryStorage_StorageType StorageType;
  static const StorageType SNAPSHOT =
    UserDictionaryStorage_StorageType_SNAPSHOT;
  static const StorageType UPDATE =
    UserDictionaryStorage_StorageType_UPDATE;
  static inline bool StorageType_IsValid(int value) {
    return UserDictionaryStorage_StorageType_IsValid(value);
  }
  static const StorageType StorageType_MIN =
    UserDictionaryStorage_StorageType_StorageType_MIN;
  static const StorageType StorageType_MAX =
    UserDictionaryStorage_StorageType_StorageType_MAX;
  static const int StorageType_ARRAYSIZE =
    UserDictionaryStorage_StorageType_StorageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StorageType_descriptor() {
    return UserDictionaryStorage_StorageType_descriptor();
  }
  static inline const ::std::string& StorageType_Name(StorageType value) {
    return UserDictionaryStorage_StorageType_Name(value);
  }
  static inline bool StorageType_Parse(const ::std::string& name,
      StorageType* value) {
    return UserDictionaryStorage_StorageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
  int dictionaries_size() const;
  void clear_dictionaries();
  static const int kDictionariesFieldNumber = 2;
  ::mozc::user_dictionary::UserDictionary* mutable_dictionaries(int index);
  ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary >*
      mutable_dictionaries();
  const ::mozc::user_dictionary::UserDictionary& dictionaries(int index) const;
  ::mozc::user_dictionary::UserDictionary* add_dictionaries();
  const ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary >&
      dictionaries() const;

  // optional int32 version = 1 [default = 0];
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
  bool has_storage_type() const;
  void clear_storage_type();
  static const int kStorageTypeFieldNumber = 10;
  ::mozc::user_dictionary::UserDictionaryStorage_StorageType storage_type() const;
  void set_storage_type(::mozc::user_dictionary::UserDictionaryStorage_StorageType value);

  // @@protoc_insertion_point(class_scope:mozc.user_dictionary.UserDictionaryStorage)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_storage_type();
  void clear_has_storage_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary > dictionaries_;
  ::google::protobuf::int32 version_;
  int storage_type_;
  friend struct ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserDictionaryCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mozc.user_dictionary.UserDictionaryCommand) */ {
 public:
  UserDictionaryCommand();
  virtual ~UserDictionaryCommand();

  UserDictionaryCommand(const UserDictionaryCommand& from);

  inline UserDictionaryCommand& operator=(const UserDictionaryCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserDictionaryCommand(UserDictionaryCommand&& from) noexcept
    : UserDictionaryCommand() {
    *this = ::std::move(from);
  }

  inline UserDictionaryCommand& operator=(UserDictionaryCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDictionaryCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDictionaryCommand* internal_default_instance() {
    return reinterpret_cast<const UserDictionaryCommand*>(
               &_UserDictionaryCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UserDictionaryCommand* other);
  friend void swap(UserDictionaryCommand& a, UserDictionaryCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserDictionaryCommand* New() const final {
    return CreateMaybeMessage<UserDictionaryCommand>(NULL);
  }

  UserDictionaryCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserDictionaryCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserDictionaryCommand& from);
  void MergeFrom(const UserDictionaryCommand& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDictionaryCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserDictionaryCommand_CommandType CommandType;
  static const CommandType NO_OPERATION =
    UserDictionaryCommand_CommandType_NO_OPERATION;
  static const CommandType CLEAR_STORAGE =
    UserDictionaryCommand_CommandType_CLEAR_STORAGE;
  static const CommandType CREATE_SESSION =
    UserDictionaryCommand_CommandType_CREATE_SESSION;
  static const CommandType DELETE_SESSION =
    UserDictionaryCommand_CommandType_DELETE_SESSION;
  static const CommandType SET_DEFAULT_DICTIONARY_NAME =
    UserDictionaryCommand_CommandType_SET_DEFAULT_DICTIONARY_NAME;
  static const CommandType CHECK_UNDOABILITY =
    UserDictionaryCommand_CommandType_CHECK_UNDOABILITY;
  static const CommandType UNDO =
    UserDictionaryCommand_CommandType_UNDO;
  static const CommandType LOAD =
    UserDictionaryCommand_CommandType_LOAD;
  static const CommandType SAVE =
    UserDictionaryCommand_CommandType_SAVE;
  static const CommandType GET_USER_DICTIONARY_NAME_LIST =
    UserDictionaryCommand_CommandType_GET_USER_DICTIONARY_NAME_LIST;
  static const CommandType GET_ENTRY_SIZE =
    UserDictionaryCommand_CommandType_GET_ENTRY_SIZE;
  static const CommandType OBSOLETE_GET_ENTRY =
    UserDictionaryCommand_CommandType_OBSOLETE_GET_ENTRY;
  static const CommandType CHECK_NEW_DICTIONARY_AVAILABILITY =
    UserDictionaryCommand_CommandType_CHECK_NEW_DICTIONARY_AVAILABILITY;
  static const CommandType CREATE_DICTIONARY =
    UserDictionaryCommand_CommandType_CREATE_DICTIONARY;
  static const CommandType DELETE_DICTIONARY =
    UserDictionaryCommand_CommandType_DELETE_DICTIONARY;
  static const CommandType RENAME_DICTIONARY =
    UserDictionaryCommand_CommandType_RENAME_DICTIONARY;
  static const CommandType CHECK_NEW_ENTRY_AVAILABILITY =
    UserDictionaryCommand_CommandType_CHECK_NEW_ENTRY_AVAILABILITY;
  static const CommandType ADD_ENTRY =
    UserDictionaryCommand_CommandType_ADD_ENTRY;
  static const CommandType EDIT_ENTRY =
    UserDictionaryCommand_CommandType_EDIT_ENTRY;
  static const CommandType DELETE_ENTRY =
    UserDictionaryCommand_CommandType_DELETE_ENTRY;
  static const CommandType IMPORT_DATA =
    UserDictionaryCommand_CommandType_IMPORT_DATA;
  static const CommandType GET_STORAGE =
    UserDictionaryCommand_CommandType_GET_STORAGE;
  static const CommandType GET_ENTRIES =
    UserDictionaryCommand_CommandType_GET_ENTRIES;
  static inline bool CommandType_IsValid(int value) {
    return UserDictionaryCommand_CommandType_IsValid(value);
  }
  static const CommandType CommandType_MIN =
    UserDictionaryCommand_CommandType_CommandType_MIN;
  static const CommandType CommandType_MAX =
    UserDictionaryCommand_CommandType_CommandType_MAX;
  static const int CommandType_ARRAYSIZE =
    UserDictionaryCommand_CommandType_CommandType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CommandType_descriptor() {
    return UserDictionaryCommand_CommandType_descriptor();
  }
  static inline const ::std::string& CommandType_Name(CommandType value) {
    return UserDictionaryCommand_CommandType_Name(value);
  }
  static inline bool CommandType_Parse(const ::std::string& name,
      CommandType* value) {
    return UserDictionaryCommand_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 entry_index = 5;
  int entry_index_size() const;
  void clear_entry_index();
  static const int kEntryIndexFieldNumber = 5;
  ::google::protobuf::int32 entry_index(int index) const;
  void set_entry_index(int index, ::google::protobuf::int32 value);
  void add_entry_index(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      entry_index() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_entry_index();

  // optional string dictionary_name = 4;
  bool has_dictionary_name() const;
  void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 4;
  const ::std::string& dictionary_name() const;
  void set_dictionary_name(const ::std::string& value);
  #if LANG_CXX11
  void set_dictionary_name(::std::string&& value);
  #endif
  void set_dictionary_name(const char* value);
  void set_dictionary_name(const char* value, size_t size);
  ::std::string* mutable_dictionary_name();
  ::std::string* release_dictionary_name();
  void set_allocated_dictionary_name(::std::string* dictionary_name);

  // optional string data = 7;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 7;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
  bool has_entry() const;
  void clear_entry();
  static const int kEntryFieldNumber = 6;
  private:
  const ::mozc::user_dictionary::UserDictionary_Entry& _internal_entry() const;
  public:
  const ::mozc::user_dictionary::UserDictionary_Entry& entry() const;
  ::mozc::user_dictionary::UserDictionary_Entry* release_entry();
  ::mozc::user_dictionary::UserDictionary_Entry* mutable_entry();
  void set_allocated_entry(::mozc::user_dictionary::UserDictionary_Entry* entry);

  // optional uint64 session_id = 2;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::google::protobuf::uint64 session_id() const;
  void set_session_id(::google::protobuf::uint64 value);

  // optional uint64 dictionary_id = 3;
  bool has_dictionary_id() const;
  void clear_dictionary_id();
  static const int kDictionaryIdFieldNumber = 3;
  ::google::protobuf::uint64 dictionary_id() const;
  void set_dictionary_id(::google::protobuf::uint64 value);

  // required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::mozc::user_dictionary::UserDictionaryCommand_CommandType type() const;
  void set_type(::mozc::user_dictionary::UserDictionaryCommand_CommandType value);

  // optional bool ensure_non_empty_storage = 8;
  bool has_ensure_non_empty_storage() const;
  void clear_ensure_non_empty_storage();
  static const int kEnsureNonEmptyStorageFieldNumber = 8;
  bool ensure_non_empty_storage() const;
  void set_ensure_non_empty_storage(bool value);

  // optional bool ignore_invalid_entries = 9;
  bool has_ignore_invalid_entries() const;
  void clear_ignore_invalid_entries();
  static const int kIgnoreInvalidEntriesFieldNumber = 9;
  bool ignore_invalid_entries() const;
  void set_ignore_invalid_entries(bool value);

  // @@protoc_insertion_point(class_scope:mozc.user_dictionary.UserDictionaryCommand)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_dictionary_id();
  void clear_has_dictionary_id();
  void set_has_dictionary_name();
  void clear_has_dictionary_name();
  void set_has_entry();
  void clear_has_entry();
  void set_has_data();
  void clear_has_data();
  void set_has_ensure_non_empty_storage();
  void clear_has_ensure_non_empty_storage();
  void set_has_ignore_invalid_entries();
  void clear_has_ignore_invalid_entries();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > entry_index_;
  ::google::protobuf::internal::ArenaStringPtr dictionary_name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::mozc::user_dictionary::UserDictionary_Entry* entry_;
  ::google::protobuf::uint64 session_id_;
  ::google::protobuf::uint64 dictionary_id_;
  int type_;
  bool ensure_non_empty_storage_;
  bool ignore_invalid_entries_;
  friend struct ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserDictionaryCommandStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mozc.user_dictionary.UserDictionaryCommandStatus) */ {
 public:
  UserDictionaryCommandStatus();
  virtual ~UserDictionaryCommandStatus();

  UserDictionaryCommandStatus(const UserDictionaryCommandStatus& from);

  inline UserDictionaryCommandStatus& operator=(const UserDictionaryCommandStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserDictionaryCommandStatus(UserDictionaryCommandStatus&& from) noexcept
    : UserDictionaryCommandStatus() {
    *this = ::std::move(from);
  }

  inline UserDictionaryCommandStatus& operator=(UserDictionaryCommandStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDictionaryCommandStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDictionaryCommandStatus* internal_default_instance() {
    return reinterpret_cast<const UserDictionaryCommandStatus*>(
               &_UserDictionaryCommandStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UserDictionaryCommandStatus* other);
  friend void swap(UserDictionaryCommandStatus& a, UserDictionaryCommandStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserDictionaryCommandStatus* New() const final {
    return CreateMaybeMessage<UserDictionaryCommandStatus>(NULL);
  }

  UserDictionaryCommandStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserDictionaryCommandStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserDictionaryCommandStatus& from);
  void MergeFrom(const UserDictionaryCommandStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDictionaryCommandStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserDictionaryCommandStatus_Status Status;
  static const Status USER_DICTIONARY_COMMAND_SUCCESS =
    UserDictionaryCommandStatus_Status_USER_DICTIONARY_COMMAND_SUCCESS;
  static const Status UNKNOWN_ERROR =
    UserDictionaryCommandStatus_Status_UNKNOWN_ERROR;
  static const Status UNKNOWN_COMMAND =
    UserDictionaryCommandStatus_Status_UNKNOWN_COMMAND;
  static const Status INVALID_ARGUMENT =
    UserDictionaryCommandStatus_Status_INVALID_ARGUMENT;
  static const Status UNKNOWN_SESSION_ID =
    UserDictionaryCommandStatus_Status_UNKNOWN_SESSION_ID;
  static const Status FILE_NOT_FOUND =
    UserDictionaryCommandStatus_Status_FILE_NOT_FOUND;
  static const Status INVALID_FILE_FORMAT =
    UserDictionaryCommandStatus_Status_INVALID_FILE_FORMAT;
  static const Status FILE_SIZE_LIMIT_EXCEEDED =
    UserDictionaryCommandStatus_Status_FILE_SIZE_LIMIT_EXCEEDED;
  static const Status DICTIONARY_SIZE_LIMIT_EXCEEDED =
    UserDictionaryCommandStatus_Status_DICTIONARY_SIZE_LIMIT_EXCEEDED;
  static const Status ENTRY_SIZE_LIMIT_EXCEEDED =
    UserDictionaryCommandStatus_Status_ENTRY_SIZE_LIMIT_EXCEEDED;
  static const Status UNKNOWN_DICTIONARY_ID =
    UserDictionaryCommandStatus_Status_UNKNOWN_DICTIONARY_ID;
  static const Status ENTRY_INDEX_OUT_OF_RANGE =
    UserDictionaryCommandStatus_Status_ENTRY_INDEX_OUT_OF_RANGE;
  static const Status DICTIONARY_NAME_EMPTY =
    UserDictionaryCommandStatus_Status_DICTIONARY_NAME_EMPTY;
  static const Status DICTIONARY_NAME_TOO_LONG =
    UserDictionaryCommandStatus_Status_DICTIONARY_NAME_TOO_LONG;
  static const Status DICTIONARY_NAME_CONTAINS_INVALID_CHARACTER =
    UserDictionaryCommandStatus_Status_DICTIONARY_NAME_CONTAINS_INVALID_CHARACTER;
  static const Status DICTIONARY_NAME_DUPLICATED =
    UserDictionaryCommandStatus_Status_DICTIONARY_NAME_DUPLICATED;
  static const Status READING_EMPTY =
    UserDictionaryCommandStatus_Status_READING_EMPTY;
  static const Status READING_TOO_LONG =
    UserDictionaryCommandStatus_Status_READING_TOO_LONG;
  static const Status READING_CONTAINS_INVALID_CHARACTER =
    UserDictionaryCommandStatus_Status_READING_CONTAINS_INVALID_CHARACTER;
  static const Status WORD_EMPTY =
    UserDictionaryCommandStatus_Status_WORD_EMPTY;
  static const Status WORD_TOO_LONG =
    UserDictionaryCommandStatus_Status_WORD_TOO_LONG;
  static const Status WORD_CONTAINS_INVALID_CHARACTER =
    UserDictionaryCommandStatus_Status_WORD_CONTAINS_INVALID_CHARACTER;
  static const Status INVALID_POS_TYPE =
    UserDictionaryCommandStatus_Status_INVALID_POS_TYPE;
  static const Status COMMENT_TOO_LONG =
    UserDictionaryCommandStatus_Status_COMMENT_TOO_LONG;
  static const Status COMMENT_CONTAINS_INVALID_CHARACTER =
    UserDictionaryCommandStatus_Status_COMMENT_CONTAINS_INVALID_CHARACTER;
  static const Status IMPORT_TOO_MANY_WORDS =
    UserDictionaryCommandStatus_Status_IMPORT_TOO_MANY_WORDS;
  static const Status IMPORT_INVALID_ENTRIES =
    UserDictionaryCommandStatus_Status_IMPORT_INVALID_ENTRIES;
  static const Status NO_UNDO_HISTORY =
    UserDictionaryCommandStatus_Status_NO_UNDO_HISTORY;
  static inline bool Status_IsValid(int value) {
    return UserDictionaryCommandStatus_Status_IsValid(value);
  }
  static const Status Status_MIN =
    UserDictionaryCommandStatus_Status_Status_MIN;
  static const Status Status_MAX =
    UserDictionaryCommandStatus_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    UserDictionaryCommandStatus_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return UserDictionaryCommandStatus_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return UserDictionaryCommandStatus_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return UserDictionaryCommandStatus_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 7;
  ::mozc::user_dictionary::UserDictionary_Entry* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >*
      mutable_entries();
  const ::mozc::user_dictionary::UserDictionary_Entry& entries(int index) const;
  ::mozc::user_dictionary::UserDictionary_Entry* add_entries();
  const ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >&
      entries() const;

  // optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
  bool has_storage() const;
  void clear_storage();
  static const int kStorageFieldNumber = 3;
  private:
  const ::mozc::user_dictionary::UserDictionaryStorage& _internal_storage() const;
  public:
  const ::mozc::user_dictionary::UserDictionaryStorage& storage() const;
  ::mozc::user_dictionary::UserDictionaryStorage* release_storage();
  ::mozc::user_dictionary::UserDictionaryStorage* mutable_storage();
  void set_allocated_storage(::mozc::user_dictionary::UserDictionaryStorage* storage);

  // optional uint64 session_id = 2;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::google::protobuf::uint64 session_id() const;
  void set_session_id(::google::protobuf::uint64 value);

  // optional uint64 dictionary_id = 5;
  bool has_dictionary_id() const;
  void clear_dictionary_id();
  static const int kDictionaryIdFieldNumber = 5;
  ::google::protobuf::uint64 dictionary_id() const;
  void set_dictionary_id(::google::protobuf::uint64 value);

  // optional uint32 entry_size = 6;
  bool has_entry_size() const;
  void clear_entry_size();
  static const int kEntrySizeFieldNumber = 6;
  ::google::protobuf::uint32 entry_size() const;
  void set_entry_size(::google::protobuf::uint32 value);

  // required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::mozc::user_dictionary::UserDictionaryCommandStatus_Status status() const;
  void set_status(::mozc::user_dictionary::UserDictionaryCommandStatus_Status value);

  // @@protoc_insertion_point(class_scope:mozc.user_dictionary.UserDictionaryCommandStatus)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_storage();
  void clear_has_storage();
  void set_has_dictionary_id();
  void clear_has_dictionary_id();
  void set_has_entry_size();
  void clear_has_entry_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry > entries_;
  ::mozc::user_dictionary::UserDictionaryStorage* storage_;
  ::google::protobuf::uint64 session_id_;
  ::google::protobuf::uint64 dictionary_id_;
  ::google::protobuf::uint32 entry_size_;
  int status_;
  friend struct ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserDictionary_Entry

// optional string key = 1 [default = ""];
inline bool UserDictionary_Entry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserDictionary_Entry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserDictionary_Entry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserDictionary_Entry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& UserDictionary_Entry::key() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.key)
  return key_.GetNoArena();
}
inline void UserDictionary_Entry::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.key)
}
#if LANG_CXX11
inline void UserDictionary_Entry::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mozc.user_dictionary.UserDictionary.Entry.key)
}
#endif
inline void UserDictionary_Entry::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionary.Entry.key)
}
inline void UserDictionary_Entry::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionary.Entry.key)
}
inline ::std::string* UserDictionary_Entry::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionary.Entry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserDictionary_Entry::release_key() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionary.Entry.key)
  if (!has_key()) {
    return NULL;
  }
  clear_has_key();
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDictionary_Entry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionary.Entry.key)
}

// optional string value = 2 [default = ""];
inline bool UserDictionary_Entry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserDictionary_Entry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserDictionary_Entry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserDictionary_Entry::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& UserDictionary_Entry::value() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.value)
  return value_.GetNoArena();
}
inline void UserDictionary_Entry::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.value)
}
#if LANG_CXX11
inline void UserDictionary_Entry::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mozc.user_dictionary.UserDictionary.Entry.value)
}
#endif
inline void UserDictionary_Entry::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionary.Entry.value)
}
inline void UserDictionary_Entry::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionary.Entry.value)
}
inline ::std::string* UserDictionary_Entry::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionary.Entry.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserDictionary_Entry::release_value() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionary.Entry.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDictionary_Entry::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionary.Entry.value)
}

// optional string comment = 4 [default = ""];
inline bool UserDictionary_Entry::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserDictionary_Entry::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserDictionary_Entry::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserDictionary_Entry::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
inline const ::std::string& UserDictionary_Entry::comment() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.comment)
  return comment_.GetNoArena();
}
inline void UserDictionary_Entry::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.comment)
}
#if LANG_CXX11
inline void UserDictionary_Entry::set_comment(::std::string&& value) {
  set_has_comment();
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mozc.user_dictionary.UserDictionary.Entry.comment)
}
#endif
inline void UserDictionary_Entry::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionary.Entry.comment)
}
inline void UserDictionary_Entry::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionary.Entry.comment)
}
inline ::std::string* UserDictionary_Entry::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionary.Entry.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserDictionary_Entry::release_comment() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionary.Entry.comment)
  if (!has_comment()) {
    return NULL;
  }
  clear_has_comment();
  return comment_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDictionary_Entry::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionary.Entry.comment)
}

// optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
inline bool UserDictionary_Entry::has_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserDictionary_Entry::set_has_pos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserDictionary_Entry::clear_has_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserDictionary_Entry::clear_pos() {
  pos_ = 1;
  clear_has_pos();
}
inline ::mozc::user_dictionary::UserDictionary_PosType UserDictionary_Entry::pos() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.pos)
  return static_cast< ::mozc::user_dictionary::UserDictionary_PosType >(pos_);
}
inline void UserDictionary_Entry::set_pos(::mozc::user_dictionary::UserDictionary_PosType value) {
  assert(::mozc::user_dictionary::UserDictionary_PosType_IsValid(value));
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.pos)
}

// optional bool removed = 10 [default = false];
inline bool UserDictionary_Entry::has_removed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserDictionary_Entry::set_has_removed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserDictionary_Entry::clear_has_removed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserDictionary_Entry::clear_removed() {
  removed_ = false;
  clear_has_removed();
}
inline bool UserDictionary_Entry::removed() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.removed)
  return removed_;
}
inline void UserDictionary_Entry::set_removed(bool value) {
  set_has_removed();
  removed_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.removed)
}

// optional bool auto_registered = 11 [default = false];
inline bool UserDictionary_Entry::has_auto_registered() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserDictionary_Entry::set_has_auto_registered() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserDictionary_Entry::clear_has_auto_registered() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserDictionary_Entry::clear_auto_registered() {
  auto_registered_ = false;
  clear_has_auto_registered();
}
inline bool UserDictionary_Entry::auto_registered() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.auto_registered)
  return auto_registered_;
}
inline void UserDictionary_Entry::set_auto_registered(bool value) {
  set_has_auto_registered();
  auto_registered_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.auto_registered)
}

// -------------------------------------------------------------------

// UserDictionary

// optional uint64 id = 1 [default = 0];
inline bool UserDictionary::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserDictionary::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserDictionary::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserDictionary::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 UserDictionary::id() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.id)
  return id_;
}
inline void UserDictionary::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.id)
}

// optional bool enabled = 2 [default = true];
inline bool UserDictionary::has_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserDictionary::set_has_enabled() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserDictionary::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserDictionary::clear_enabled() {
  enabled_ = true;
  clear_has_enabled();
}
inline bool UserDictionary::enabled() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.enabled)
  return enabled_;
}
inline void UserDictionary::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.enabled)
}

// optional string name = 3 [default = ""];
inline bool UserDictionary::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserDictionary::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserDictionary::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserDictionary::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& UserDictionary::name() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.name)
  return name_.GetNoArena();
}
inline void UserDictionary::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.name)
}
#if LANG_CXX11
inline void UserDictionary::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mozc.user_dictionary.UserDictionary.name)
}
#endif
inline void UserDictionary::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionary.name)
}
inline void UserDictionary::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionary.name)
}
inline ::std::string* UserDictionary::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionary.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserDictionary::release_name() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionary.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDictionary::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionary.name)
}

// repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
inline int UserDictionary::entries_size() const {
  return entries_.size();
}
inline void UserDictionary::clear_entries() {
  entries_.Clear();
}
inline ::mozc::user_dictionary::UserDictionary_Entry* UserDictionary::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionary.entries)
  return entries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >*
UserDictionary::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:mozc.user_dictionary.UserDictionary.entries)
  return &entries_;
}
inline const ::mozc::user_dictionary::UserDictionary_Entry& UserDictionary::entries(int index) const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.entries)
  return entries_.Get(index);
}
inline ::mozc::user_dictionary::UserDictionary_Entry* UserDictionary::add_entries() {
  // @@protoc_insertion_point(field_add:mozc.user_dictionary.UserDictionary.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >&
UserDictionary::entries() const {
  // @@protoc_insertion_point(field_list:mozc.user_dictionary.UserDictionary.entries)
  return entries_;
}

// optional bool removed = 5 [default = false];
inline bool UserDictionary::has_removed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserDictionary::set_has_removed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserDictionary::clear_has_removed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserDictionary::clear_removed() {
  removed_ = false;
  clear_has_removed();
}
inline bool UserDictionary::removed() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.removed)
  return removed_;
}
inline void UserDictionary::set_removed(bool value) {
  set_has_removed();
  removed_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.removed)
}

// optional bool syncable = 6 [default = false];
inline bool UserDictionary::has_syncable() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserDictionary::set_has_syncable() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserDictionary::clear_has_syncable() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserDictionary::clear_syncable() {
  syncable_ = false;
  clear_has_syncable();
}
inline bool UserDictionary::syncable() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.syncable)
  return syncable_;
}
inline void UserDictionary::set_syncable(bool value) {
  set_has_syncable();
  syncable_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.syncable)
}

// -------------------------------------------------------------------

// UserDictionaryStorage

// optional int32 version = 1 [default = 0];
inline bool UserDictionaryStorage::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserDictionaryStorage::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserDictionaryStorage::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserDictionaryStorage::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 UserDictionaryStorage::version() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryStorage.version)
  return version_;
}
inline void UserDictionaryStorage::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryStorage.version)
}

// repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
inline int UserDictionaryStorage::dictionaries_size() const {
  return dictionaries_.size();
}
inline void UserDictionaryStorage::clear_dictionaries() {
  dictionaries_.Clear();
}
inline ::mozc::user_dictionary::UserDictionary* UserDictionaryStorage::mutable_dictionaries(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryStorage.dictionaries)
  return dictionaries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary >*
UserDictionaryStorage::mutable_dictionaries() {
  // @@protoc_insertion_point(field_mutable_list:mozc.user_dictionary.UserDictionaryStorage.dictionaries)
  return &dictionaries_;
}
inline const ::mozc::user_dictionary::UserDictionary& UserDictionaryStorage::dictionaries(int index) const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryStorage.dictionaries)
  return dictionaries_.Get(index);
}
inline ::mozc::user_dictionary::UserDictionary* UserDictionaryStorage::add_dictionaries() {
  // @@protoc_insertion_point(field_add:mozc.user_dictionary.UserDictionaryStorage.dictionaries)
  return dictionaries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary >&
UserDictionaryStorage::dictionaries() const {
  // @@protoc_insertion_point(field_list:mozc.user_dictionary.UserDictionaryStorage.dictionaries)
  return dictionaries_;
}

// optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
inline bool UserDictionaryStorage::has_storage_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserDictionaryStorage::set_has_storage_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserDictionaryStorage::clear_has_storage_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserDictionaryStorage::clear_storage_type() {
  storage_type_ = 1;
  clear_has_storage_type();
}
inline ::mozc::user_dictionary::UserDictionaryStorage_StorageType UserDictionaryStorage::storage_type() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryStorage.storage_type)
  return static_cast< ::mozc::user_dictionary::UserDictionaryStorage_StorageType >(storage_type_);
}
inline void UserDictionaryStorage::set_storage_type(::mozc::user_dictionary::UserDictionaryStorage_StorageType value) {
  assert(::mozc::user_dictionary::UserDictionaryStorage_StorageType_IsValid(value));
  set_has_storage_type();
  storage_type_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryStorage.storage_type)
}

// -------------------------------------------------------------------

// UserDictionaryCommand

// required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
inline bool UserDictionaryCommand::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserDictionaryCommand::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserDictionaryCommand::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserDictionaryCommand::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::mozc::user_dictionary::UserDictionaryCommand_CommandType UserDictionaryCommand::type() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.type)
  return static_cast< ::mozc::user_dictionary::UserDictionaryCommand_CommandType >(type_);
}
inline void UserDictionaryCommand::set_type(::mozc::user_dictionary::UserDictionaryCommand_CommandType value) {
  assert(::mozc::user_dictionary::UserDictionaryCommand_CommandType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.type)
}

// optional uint64 session_id = 2;
inline bool UserDictionaryCommand::has_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserDictionaryCommand::set_has_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserDictionaryCommand::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserDictionaryCommand::clear_session_id() {
  session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_session_id();
}
inline ::google::protobuf::uint64 UserDictionaryCommand::session_id() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.session_id)
  return session_id_;
}
inline void UserDictionaryCommand::set_session_id(::google::protobuf::uint64 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.session_id)
}

// optional uint64 dictionary_id = 3;
inline bool UserDictionaryCommand::has_dictionary_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserDictionaryCommand::set_has_dictionary_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserDictionaryCommand::clear_has_dictionary_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserDictionaryCommand::clear_dictionary_id() {
  dictionary_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dictionary_id();
}
inline ::google::protobuf::uint64 UserDictionaryCommand::dictionary_id() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.dictionary_id)
  return dictionary_id_;
}
inline void UserDictionaryCommand::set_dictionary_id(::google::protobuf::uint64 value) {
  set_has_dictionary_id();
  dictionary_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.dictionary_id)
}

// optional string dictionary_name = 4;
inline bool UserDictionaryCommand::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserDictionaryCommand::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserDictionaryCommand::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserDictionaryCommand::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
inline const ::std::string& UserDictionaryCommand::dictionary_name() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
  return dictionary_name_.GetNoArena();
}
inline void UserDictionaryCommand::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
}
#if LANG_CXX11
inline void UserDictionaryCommand::set_dictionary_name(::std::string&& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
}
#endif
inline void UserDictionaryCommand::set_dictionary_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
}
inline void UserDictionaryCommand::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
}
inline ::std::string* UserDictionaryCommand::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserDictionaryCommand::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
  if (!has_dictionary_name()) {
    return NULL;
  }
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDictionaryCommand::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
}

// repeated int32 entry_index = 5;
inline int UserDictionaryCommand::entry_index_size() const {
  return entry_index_.size();
}
inline void UserDictionaryCommand::clear_entry_index() {
  entry_index_.Clear();
}
inline ::google::protobuf::int32 UserDictionaryCommand::entry_index(int index) const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.entry_index)
  return entry_index_.Get(index);
}
inline void UserDictionaryCommand::set_entry_index(int index, ::google::protobuf::int32 value) {
  entry_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.entry_index)
}
inline void UserDictionaryCommand::add_entry_index(::google::protobuf::int32 value) {
  entry_index_.Add(value);
  // @@protoc_insertion_point(field_add:mozc.user_dictionary.UserDictionaryCommand.entry_index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserDictionaryCommand::entry_index() const {
  // @@protoc_insertion_point(field_list:mozc.user_dictionary.UserDictionaryCommand.entry_index)
  return entry_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserDictionaryCommand::mutable_entry_index() {
  // @@protoc_insertion_point(field_mutable_list:mozc.user_dictionary.UserDictionaryCommand.entry_index)
  return &entry_index_;
}

// optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
inline bool UserDictionaryCommand::has_entry() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserDictionaryCommand::set_has_entry() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserDictionaryCommand::clear_has_entry() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserDictionaryCommand::clear_entry() {
  if (entry_ != NULL) entry_->Clear();
  clear_has_entry();
}
inline const ::mozc::user_dictionary::UserDictionary_Entry& UserDictionaryCommand::_internal_entry() const {
  return *entry_;
}
inline const ::mozc::user_dictionary::UserDictionary_Entry& UserDictionaryCommand::entry() const {
  const ::mozc::user_dictionary::UserDictionary_Entry* p = entry_;
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.entry)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::user_dictionary::UserDictionary_Entry*>(
      &::mozc::user_dictionary::_UserDictionary_Entry_default_instance_);
}
inline ::mozc::user_dictionary::UserDictionary_Entry* UserDictionaryCommand::release_entry() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionaryCommand.entry)
  clear_has_entry();
  ::mozc::user_dictionary::UserDictionary_Entry* temp = entry_;
  entry_ = NULL;
  return temp;
}
inline ::mozc::user_dictionary::UserDictionary_Entry* UserDictionaryCommand::mutable_entry() {
  set_has_entry();
  if (entry_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::user_dictionary::UserDictionary_Entry>(GetArenaNoVirtual());
    entry_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryCommand.entry)
  return entry_;
}
inline void UserDictionaryCommand::set_allocated_entry(::mozc::user_dictionary::UserDictionary_Entry* entry) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete entry_;
  }
  if (entry) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entry = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entry, submessage_arena);
    }
    set_has_entry();
  } else {
    clear_has_entry();
  }
  entry_ = entry;
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionaryCommand.entry)
}

// optional string data = 7;
inline bool UserDictionaryCommand::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserDictionaryCommand::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserDictionaryCommand::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserDictionaryCommand::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& UserDictionaryCommand::data() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.data)
  return data_.GetNoArena();
}
inline void UserDictionaryCommand::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.data)
}
#if LANG_CXX11
inline void UserDictionaryCommand::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mozc.user_dictionary.UserDictionaryCommand.data)
}
#endif
inline void UserDictionaryCommand::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionaryCommand.data)
}
inline void UserDictionaryCommand::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionaryCommand.data)
}
inline ::std::string* UserDictionaryCommand::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryCommand.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserDictionaryCommand::release_data() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionaryCommand.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDictionaryCommand::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionaryCommand.data)
}

// optional bool ensure_non_empty_storage = 8;
inline bool UserDictionaryCommand::has_ensure_non_empty_storage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserDictionaryCommand::set_has_ensure_non_empty_storage() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserDictionaryCommand::clear_has_ensure_non_empty_storage() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserDictionaryCommand::clear_ensure_non_empty_storage() {
  ensure_non_empty_storage_ = false;
  clear_has_ensure_non_empty_storage();
}
inline bool UserDictionaryCommand::ensure_non_empty_storage() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.ensure_non_empty_storage)
  return ensure_non_empty_storage_;
}
inline void UserDictionaryCommand::set_ensure_non_empty_storage(bool value) {
  set_has_ensure_non_empty_storage();
  ensure_non_empty_storage_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.ensure_non_empty_storage)
}

// optional bool ignore_invalid_entries = 9;
inline bool UserDictionaryCommand::has_ignore_invalid_entries() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserDictionaryCommand::set_has_ignore_invalid_entries() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserDictionaryCommand::clear_has_ignore_invalid_entries() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserDictionaryCommand::clear_ignore_invalid_entries() {
  ignore_invalid_entries_ = false;
  clear_has_ignore_invalid_entries();
}
inline bool UserDictionaryCommand::ignore_invalid_entries() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.ignore_invalid_entries)
  return ignore_invalid_entries_;
}
inline void UserDictionaryCommand::set_ignore_invalid_entries(bool value) {
  set_has_ignore_invalid_entries();
  ignore_invalid_entries_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.ignore_invalid_entries)
}

// -------------------------------------------------------------------

// UserDictionaryCommandStatus

// required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
inline bool UserDictionaryCommandStatus::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserDictionaryCommandStatus::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserDictionaryCommandStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserDictionaryCommandStatus::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::mozc::user_dictionary::UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::status() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.status)
  return static_cast< ::mozc::user_dictionary::UserDictionaryCommandStatus_Status >(status_);
}
inline void UserDictionaryCommandStatus::set_status(::mozc::user_dictionary::UserDictionaryCommandStatus_Status value) {
  assert(::mozc::user_dictionary::UserDictionaryCommandStatus_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommandStatus.status)
}

// optional uint64 session_id = 2;
inline bool UserDictionaryCommandStatus::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserDictionaryCommandStatus::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserDictionaryCommandStatus::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserDictionaryCommandStatus::clear_session_id() {
  session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_session_id();
}
inline ::google::protobuf::uint64 UserDictionaryCommandStatus::session_id() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.session_id)
  return session_id_;
}
inline void UserDictionaryCommandStatus::set_session_id(::google::protobuf::uint64 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommandStatus.session_id)
}

// optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
inline bool UserDictionaryCommandStatus::has_storage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserDictionaryCommandStatus::set_has_storage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserDictionaryCommandStatus::clear_has_storage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserDictionaryCommandStatus::clear_storage() {
  if (storage_ != NULL) storage_->Clear();
  clear_has_storage();
}
inline const ::mozc::user_dictionary::UserDictionaryStorage& UserDictionaryCommandStatus::_internal_storage() const {
  return *storage_;
}
inline const ::mozc::user_dictionary::UserDictionaryStorage& UserDictionaryCommandStatus::storage() const {
  const ::mozc::user_dictionary::UserDictionaryStorage* p = storage_;
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.storage)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::user_dictionary::UserDictionaryStorage*>(
      &::mozc::user_dictionary::_UserDictionaryStorage_default_instance_);
}
inline ::mozc::user_dictionary::UserDictionaryStorage* UserDictionaryCommandStatus::release_storage() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionaryCommandStatus.storage)
  clear_has_storage();
  ::mozc::user_dictionary::UserDictionaryStorage* temp = storage_;
  storage_ = NULL;
  return temp;
}
inline ::mozc::user_dictionary::UserDictionaryStorage* UserDictionaryCommandStatus::mutable_storage() {
  set_has_storage();
  if (storage_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::user_dictionary::UserDictionaryStorage>(GetArenaNoVirtual());
    storage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryCommandStatus.storage)
  return storage_;
}
inline void UserDictionaryCommandStatus::set_allocated_storage(::mozc::user_dictionary::UserDictionaryStorage* storage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete storage_;
  }
  if (storage) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      storage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    set_has_storage();
  } else {
    clear_has_storage();
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionaryCommandStatus.storage)
}

// optional uint64 dictionary_id = 5;
inline bool UserDictionaryCommandStatus::has_dictionary_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserDictionaryCommandStatus::set_has_dictionary_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserDictionaryCommandStatus::clear_has_dictionary_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserDictionaryCommandStatus::clear_dictionary_id() {
  dictionary_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dictionary_id();
}
inline ::google::protobuf::uint64 UserDictionaryCommandStatus::dictionary_id() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.dictionary_id)
  return dictionary_id_;
}
inline void UserDictionaryCommandStatus::set_dictionary_id(::google::protobuf::uint64 value) {
  set_has_dictionary_id();
  dictionary_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommandStatus.dictionary_id)
}

// optional uint32 entry_size = 6;
inline bool UserDictionaryCommandStatus::has_entry_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserDictionaryCommandStatus::set_has_entry_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserDictionaryCommandStatus::clear_has_entry_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserDictionaryCommandStatus::clear_entry_size() {
  entry_size_ = 0u;
  clear_has_entry_size();
}
inline ::google::protobuf::uint32 UserDictionaryCommandStatus::entry_size() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.entry_size)
  return entry_size_;
}
inline void UserDictionaryCommandStatus::set_entry_size(::google::protobuf::uint32 value) {
  set_has_entry_size();
  entry_size_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommandStatus.entry_size)
}

// repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
inline int UserDictionaryCommandStatus::entries_size() const {
  return entries_.size();
}
inline void UserDictionaryCommandStatus::clear_entries() {
  entries_.Clear();
}
inline ::mozc::user_dictionary::UserDictionary_Entry* UserDictionaryCommandStatus::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryCommandStatus.entries)
  return entries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >*
UserDictionaryCommandStatus::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:mozc.user_dictionary.UserDictionaryCommandStatus.entries)
  return &entries_;
}
inline const ::mozc::user_dictionary::UserDictionary_Entry& UserDictionaryCommandStatus::entries(int index) const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.entries)
  return entries_.Get(index);
}
inline ::mozc::user_dictionary::UserDictionary_Entry* UserDictionaryCommandStatus::add_entries() {
  // @@protoc_insertion_point(field_add:mozc.user_dictionary.UserDictionaryCommandStatus.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >&
UserDictionaryCommandStatus::entries() const {
  // @@protoc_insertion_point(field_list:mozc.user_dictionary.UserDictionaryCommandStatus.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace user_dictionary
}  // namespace mozc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mozc::user_dictionary::UserDictionary_PosType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::user_dictionary::UserDictionary_PosType>() {
  return ::mozc::user_dictionary::UserDictionary_PosType_descriptor();
}
template <> struct is_proto_enum< ::mozc::user_dictionary::UserDictionaryStorage_StorageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::user_dictionary::UserDictionaryStorage_StorageType>() {
  return ::mozc::user_dictionary::UserDictionaryStorage_StorageType_descriptor();
}
template <> struct is_proto_enum< ::mozc::user_dictionary::UserDictionaryCommand_CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::user_dictionary::UserDictionaryCommand_CommandType>() {
  return ::mozc::user_dictionary::UserDictionaryCommand_CommandType_descriptor();
}
template <> struct is_proto_enum< ::mozc::user_dictionary::UserDictionaryCommandStatus_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::user_dictionary::UserDictionaryCommandStatus_Status>() {
  return ::mozc::user_dictionary::UserDictionaryCommandStatus_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protocol_2fuser_5fdictionary_5fstorage_2eproto
