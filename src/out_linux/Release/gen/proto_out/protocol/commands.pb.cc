// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/commands.proto

#include "protocol/commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protocol_2fcandidates_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcandidates_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CandidateList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcandidates_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Candidates;
}  // namespace protobuf_protocol_2fcandidates_2eproto
namespace protobuf_protocol_2fcommands_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ApplicationInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Capability;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Context;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeletionRange;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GenericStorageEntry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Input_TouchPosition;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KeyEvent_ProbableKeyEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Preedit_Segment;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SessionCommand;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Status;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<11> scc_info_Input;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<12> scc_info_Output;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Input_TouchEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_KeyEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Output_Callback;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Preedit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Command;
}  // namespace protobuf_protocol_2fcommands_2eproto
namespace protobuf_protocol_2fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fconfig_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Config;
}  // namespace protobuf_protocol_2fconfig_2eproto
namespace protobuf_protocol_2fengine_5fbuilder_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fengine_5fbuilder_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EngineReloadRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fengine_5fbuilder_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EngineReloadResponse;
}  // namespace protobuf_protocol_2fengine_5fbuilder_2eproto
namespace protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UserDictionaryCommand;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_UserDictionaryCommandStatus;
}  // namespace protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto
namespace mozc {
namespace commands {
class KeyEvent_ProbableKeyEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyEvent_ProbableKeyEvent>
      _instance;
} _KeyEvent_ProbableKeyEvent_default_instance_;
class KeyEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyEvent>
      _instance;
} _KeyEvent_default_instance_;
class GenericStorageEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GenericStorageEntry>
      _instance;
} _GenericStorageEntry_default_instance_;
class SessionCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SessionCommand>
      _instance;
} _SessionCommand_default_instance_;
class ContextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Context>
      _instance;
} _Context_default_instance_;
class CapabilityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Capability>
      _instance;
} _Capability_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request>
      _instance;
} _Request_default_instance_;
class ApplicationInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplicationInfo>
      _instance;
} _ApplicationInfo_default_instance_;
class Input_TouchPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Input_TouchPosition>
      _instance;
} _Input_TouchPosition_default_instance_;
class Input_TouchEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Input_TouchEvent>
      _instance;
} _Input_TouchEvent_default_instance_;
class InputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Input>
      _instance;
} _Input_default_instance_;
class ResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Result>
      _instance;
} _Result_default_instance_;
class Preedit_SegmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Preedit_Segment>
      _instance;
} _Preedit_Segment_default_instance_;
class PreeditDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Preedit>
      _instance;
} _Preedit_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Status>
      _instance;
} _Status_default_instance_;
class DeletionRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeletionRange>
      _instance;
} _DeletionRange_default_instance_;
class Output_CallbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Output_Callback>
      _instance;
} _Output_Callback_default_instance_;
class OutputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Output>
      _instance;
} _Output_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Command>
      _instance;
} _Command_default_instance_;
class CommandListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommandList>
      _instance;
} _CommandList_default_instance_;
}  // namespace commands
}  // namespace mozc
namespace protobuf_protocol_2fcommands_2eproto {
static void InitDefaultsKeyEvent_ProbableKeyEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_KeyEvent_ProbableKeyEvent_default_instance_;
    new (ptr) ::mozc::commands::KeyEvent_ProbableKeyEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::KeyEvent_ProbableKeyEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KeyEvent_ProbableKeyEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKeyEvent_ProbableKeyEvent}, {}};

static void InitDefaultsKeyEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_KeyEvent_default_instance_;
    new (ptr) ::mozc::commands::KeyEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::KeyEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_KeyEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsKeyEvent}, {
      &protobuf_protocol_2fcommands_2eproto::scc_info_KeyEvent_ProbableKeyEvent.base,}};

static void InitDefaultsGenericStorageEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_GenericStorageEntry_default_instance_;
    new (ptr) ::mozc::commands::GenericStorageEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::GenericStorageEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GenericStorageEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGenericStorageEntry}, {}};

static void InitDefaultsSessionCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_SessionCommand_default_instance_;
    new (ptr) ::mozc::commands::SessionCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::SessionCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SessionCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSessionCommand}, {}};

static void InitDefaultsContext() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Context_default_instance_;
    new (ptr) ::mozc::commands::Context();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Context::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Context =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContext}, {}};

static void InitDefaultsCapability() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Capability_default_instance_;
    new (ptr) ::mozc::commands::Capability();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Capability::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Capability =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCapability}, {}};

static void InitDefaultsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Request_default_instance_;
    new (ptr) ::mozc::commands::Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest}, {}};

static void InitDefaultsApplicationInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_ApplicationInfo_default_instance_;
    new (ptr) ::mozc::commands::ApplicationInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::ApplicationInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApplicationInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApplicationInfo}, {}};

static void InitDefaultsInput_TouchPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Input_TouchPosition_default_instance_;
    new (ptr) ::mozc::commands::Input_TouchPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Input_TouchPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Input_TouchPosition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInput_TouchPosition}, {}};

static void InitDefaultsInput_TouchEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Input_TouchEvent_default_instance_;
    new (ptr) ::mozc::commands::Input_TouchEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Input_TouchEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Input_TouchEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInput_TouchEvent}, {
      &protobuf_protocol_2fcommands_2eproto::scc_info_Input_TouchPosition.base,}};

static void InitDefaultsInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Input_default_instance_;
    new (ptr) ::mozc::commands::Input();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Input::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<11> scc_info_Input =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsInput}, {
      &protobuf_protocol_2fcommands_2eproto::scc_info_KeyEvent.base,
      &protobuf_protocol_2fcommands_2eproto::scc_info_SessionCommand.base,
      &protobuf_protocol_2fconfig_2eproto::scc_info_Config.base,
      &protobuf_protocol_2fcommands_2eproto::scc_info_Context.base,
      &protobuf_protocol_2fcommands_2eproto::scc_info_Capability.base,
      &protobuf_protocol_2fcommands_2eproto::scc_info_ApplicationInfo.base,
      &protobuf_protocol_2fcommands_2eproto::scc_info_Request.base,
      &protobuf_protocol_2fcommands_2eproto::scc_info_GenericStorageEntry.base,
      &protobuf_protocol_2fcommands_2eproto::scc_info_Input_TouchEvent.base,
      &protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::scc_info_UserDictionaryCommand.base,
      &protobuf_protocol_2fengine_5fbuilder_2eproto::scc_info_EngineReloadRequest.base,}};

static void InitDefaultsResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Result_default_instance_;
    new (ptr) ::mozc::commands::Result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResult}, {}};

static void InitDefaultsPreedit_Segment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Preedit_Segment_default_instance_;
    new (ptr) ::mozc::commands::Preedit_Segment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Preedit_Segment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Preedit_Segment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPreedit_Segment}, {}};

static void InitDefaultsPreedit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Preedit_default_instance_;
    new (ptr) ::mozc::commands::Preedit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Preedit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Preedit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPreedit}, {
      &protobuf_protocol_2fcommands_2eproto::scc_info_Preedit_Segment.base,}};

static void InitDefaultsStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Status_default_instance_;
    new (ptr) ::mozc::commands::Status();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Status::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Status =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStatus}, {}};

static void InitDefaultsDeletionRange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_DeletionRange_default_instance_;
    new (ptr) ::mozc::commands::DeletionRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::DeletionRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeletionRange =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeletionRange}, {}};

static void InitDefaultsOutput_Callback() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Output_Callback_default_instance_;
    new (ptr) ::mozc::commands::Output_Callback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Output_Callback::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Output_Callback =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOutput_Callback}, {
      &protobuf_protocol_2fcommands_2eproto::scc_info_SessionCommand.base,}};

static void InitDefaultsOutput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Output_default_instance_;
    new (ptr) ::mozc::commands::Output();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Output::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<12> scc_info_Output =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsOutput}, {
      &protobuf_protocol_2fcommands_2eproto::scc_info_Result.base,
      &protobuf_protocol_2fcommands_2eproto::scc_info_Preedit.base,
      &protobuf_protocol_2fcandidates_2eproto::scc_info_Candidates.base,
      &protobuf_protocol_2fcommands_2eproto::scc_info_KeyEvent.base,
      &protobuf_protocol_2fconfig_2eproto::scc_info_Config.base,
      &protobuf_protocol_2fcommands_2eproto::scc_info_Status.base,
      &protobuf_protocol_2fcandidates_2eproto::scc_info_CandidateList.base,
      &protobuf_protocol_2fcommands_2eproto::scc_info_DeletionRange.base,
      &protobuf_protocol_2fcommands_2eproto::scc_info_Output_Callback.base,
      &protobuf_protocol_2fcommands_2eproto::scc_info_GenericStorageEntry.base,
      &protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::scc_info_UserDictionaryCommandStatus.base,
      &protobuf_protocol_2fengine_5fbuilder_2eproto::scc_info_EngineReloadResponse.base,}};

static void InitDefaultsCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Command_default_instance_;
    new (ptr) ::mozc::commands::Command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Command::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Command =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCommand}, {
      &protobuf_protocol_2fcommands_2eproto::scc_info_Input.base,
      &protobuf_protocol_2fcommands_2eproto::scc_info_Output.base,}};

static void InitDefaultsCommandList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_CommandList_default_instance_;
    new (ptr) ::mozc::commands::CommandList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::CommandList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CommandList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCommandList}, {
      &protobuf_protocol_2fcommands_2eproto::scc_info_Command.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_KeyEvent_ProbableKeyEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KeyEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GenericStorageEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SessionCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Context.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Capability.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplicationInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Input_TouchPosition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Input_TouchEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Input.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Preedit_Segment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Preedit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Status.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeletionRange.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Output_Callback.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Output.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Command.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommandList.base);
}

::google::protobuf::Metadata file_level_metadata[20];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[22];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::KeyEvent_ProbableKeyEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::KeyEvent_ProbableKeyEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::KeyEvent_ProbableKeyEvent, key_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::KeyEvent_ProbableKeyEvent, special_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::KeyEvent_ProbableKeyEvent, modifier_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::KeyEvent_ProbableKeyEvent, probability_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::KeyEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::KeyEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::KeyEvent, key_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::KeyEvent, modifiers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::KeyEvent, special_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::KeyEvent, modifier_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::KeyEvent, key_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::KeyEvent, input_style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::KeyEvent, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::KeyEvent, probable_key_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::KeyEvent, activated_),
  1,
  2,
  3,
  ~0u,
  0,
  4,
  5,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::GenericStorageEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::GenericStorageEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::GenericStorageEntry, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::GenericStorageEntry, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::GenericStorageEntry, value_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::SessionCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::SessionCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::SessionCommand, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::SessionCommand, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::SessionCommand, composition_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::SessionCommand, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::SessionCommand, cursor_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::SessionCommand, usage_stats_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::SessionCommand, usage_stats_event_int_value_),
  5,
  1,
  2,
  0,
  3,
  6,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Context, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Context, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Context, preceding_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Context, following_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Context, suppress_suggestion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Context, input_field_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Context, revision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Context, experimental_features_),
  0,
  1,
  2,
  4,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Capability, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Capability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Capability, text_deletion_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Request, zero_query_suggestion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Request, mixed_conversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Request, special_romanji_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Request, space_on_alphanumeric_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Request, keyboard_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Request, update_input_mode_from_surrounding_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Request, kana_modifier_insensitive_conversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Request, auto_partial_suggestion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Request, available_emoji_carrier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Request, emoji_rewriter_capability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Request, crossing_edge_behavior_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Request, language_aware_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Request, candidate_page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Request, candidates_size_limit_),
  2,
  3,
  1,
  6,
  0,
  10,
  4,
  5,
  11,
  12,
  7,
  8,
  13,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::ApplicationInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::ApplicationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::ApplicationInfo, process_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::ApplicationInfo, thread_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::ApplicationInfo, timezone_offset_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input_TouchPosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input_TouchPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input_TouchPosition, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input_TouchPosition, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input_TouchPosition, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input_TouchPosition, timestamp_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input_TouchEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input_TouchEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input_TouchEvent, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input_TouchEvent, stroke_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input, context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input, capability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input, application_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input, request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input, storage_entry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input, touch_events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input, user_dictionary_command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input, request_suggestion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Input, engine_reload_request_),
  11,
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  8,
  12,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Result, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Result, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Result, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Result, cursor_offset_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Preedit_Segment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Preedit_Segment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Preedit_Segment, annotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Preedit_Segment, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Preedit_Segment, value_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Preedit_Segment, key_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Preedit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Preedit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Preedit, cursor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Preedit, segment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Preedit, highlighted_position_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Status, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Status, activated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Status, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Status, comeback_mode_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::DeletionRange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::DeletionRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::DeletionRange, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::DeletionRange, length_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output_Callback, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output_Callback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output_Callback, session_command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output_Callback, delay_millisec_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, consumed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, preedit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, candidates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, preedit_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, all_candidate_words_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, deletion_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, launch_tool_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, callback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, storage_entry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, user_dictionary_command_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Output, engine_reload_response_),
  13,
  14,
  15,
  1,
  2,
  3,
  4,
  0,
  5,
  16,
  17,
  6,
  7,
  8,
  18,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Command, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Command, input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Command, output_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::CommandList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::CommandList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::CommandList, commands_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::mozc::commands::KeyEvent_ProbableKeyEvent)},
  { 13, 27, sizeof(::mozc::commands::KeyEvent)},
  { 36, 44, sizeof(::mozc::commands::GenericStorageEntry)},
  { 47, 59, sizeof(::mozc::commands::SessionCommand)},
  { 66, 77, sizeof(::mozc::commands::Context)},
  { 83, 89, sizeof(::mozc::commands::Capability)},
  { 90, 109, sizeof(::mozc::commands::Request)},
  { 123, 131, sizeof(::mozc::commands::ApplicationInfo)},
  { 134, 143, sizeof(::mozc::commands::Input_TouchPosition)},
  { 147, 154, sizeof(::mozc::commands::Input_TouchEvent)},
  { 156, 175, sizeof(::mozc::commands::Input)},
  { 189, 198, sizeof(::mozc::commands::Result)},
  { 202, 211, sizeof(::mozc::commands::Preedit_Segment)},
  { 215, 223, sizeof(::mozc::commands::Preedit)},
  { 226, 234, sizeof(::mozc::commands::Status)},
  { 237, 244, sizeof(::mozc::commands::DeletionRange)},
  { 246, 253, sizeof(::mozc::commands::Output_Callback)},
  { 255, 279, sizeof(::mozc::commands::Output)},
  { 298, 305, sizeof(::mozc::commands::Command)},
  { 307, 313, sizeof(::mozc::commands::CommandList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_KeyEvent_ProbableKeyEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_KeyEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_GenericStorageEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_SessionCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Context_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Capability_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_ApplicationInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Input_TouchPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Input_TouchEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Input_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Preedit_Segment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Preedit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Status_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_DeletionRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Output_Callback_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Output_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_CommandList_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protocol/commands.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 20);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027protocol/commands.proto\022\rmozc.commands"
      "\032\031protocol/candidates.proto\032\025protocol/co"
      "nfig.proto\032\035protocol/engine_builder.prot"
      "o\032&protocol/user_dictionary_storage.prot"
      "o\"\276\r\n\010KeyEvent\022\020\n\010key_code\030\001 \001(\r\022\021\n\tmodi"
      "fiers\030\002 \001(\r\0227\n\013special_key\030\003 \001(\0162\".mozc."
      "commands.KeyEvent.SpecialKey\022:\n\rmodifier"
      "_keys\030\004 \003(\0162#.mozc.commands.KeyEvent.Mod"
      "ifierKey\022\022\n\nkey_string\030\005 \001(\t\022D\n\013input_st"
      "yle\030\006 \001(\0162\".mozc.commands.KeyEvent.Input"
      "Style:\013FOLLOW_MODE\022,\n\004mode\030\007 \001(\0162\036.mozc."
      "commands.CompositionMode\022D\n\022probable_key"
      "_event\030\010 \003(\0132(.mozc.commands.KeyEvent.Pr"
      "obableKeyEvent\022\021\n\tactivated\030\t \001(\010\032\256\001\n\020Pr"
      "obableKeyEvent\022\020\n\010key_code\030\001 \001(\r\0227\n\013spec"
      "ial_key\030\003 \001(\0162\".mozc.commands.KeyEvent.S"
      "pecialKey\022:\n\rmodifier_keys\030\004 \003(\0162#.mozc."
      "commands.KeyEvent.ModifierKey\022\023\n\013probabi"
      "lity\030\n \001(\001\"\225\007\n\nSpecialKey\022\021\n\rNO_SPECIALK"
      "EY\020\000\022\t\n\005DIGIT\020\001\022\006\n\002ON\020\002\022\007\n\003OFF\020\003\022\t\n\005SPAC"
      "E\020\004\022\t\n\005ENTER\020\005\022\010\n\004LEFT\020\006\022\t\n\005RIGHT\020\007\022\006\n\002U"
      "P\020\010\022\010\n\004DOWN\020\t\022\n\n\006ESCAPE\020\n\022\007\n\003DEL\020\013\022\r\n\tBA"
      "CKSPACE\020\014\022\n\n\006HENKAN\020\r\022\014\n\010MUHENKAN\020\016\022\010\n\004K"
      "ANA\020\017\022\010\n\004HOME\020\020\022\007\n\003END\020\021\022\007\n\003TAB\020\022\022\006\n\002F1\020"
      "\023\022\006\n\002F2\020\024\022\006\n\002F3\020\025\022\006\n\002F4\020\026\022\006\n\002F5\020\027\022\006\n\002F6\020"
      "\030\022\006\n\002F7\020\031\022\006\n\002F8\020\032\022\006\n\002F9\020\033\022\007\n\003F10\020\034\022\007\n\003F1"
      "1\020\035\022\007\n\003F12\020\036\022\013\n\007PAGE_UP\020\037\022\r\n\tPAGE_DOWN\020 "
      "\022\n\n\006INSERT\020!\022\007\n\003F13\020\"\022\007\n\003F14\020#\022\007\n\003F15\020$\022"
      "\007\n\003F16\020%\022\007\n\003F17\020&\022\007\n\003F18\020\'\022\007\n\003F19\020(\022\007\n\003F"
      "20\020)\022\007\n\003F21\020*\022\007\n\003F22\020+\022\007\n\003F23\020,\022\007\n\003F24\020-"
      "\022\010\n\004EISU\020.\022\013\n\007NUMPAD0\020/\022\013\n\007NUMPAD1\0200\022\013\n\007"
      "NUMPAD2\0201\022\013\n\007NUMPAD3\0202\022\013\n\007NUMPAD4\0203\022\013\n\007N"
      "UMPAD5\0204\022\013\n\007NUMPAD6\0205\022\013\n\007NUMPAD7\0206\022\013\n\007NU"
      "MPAD8\0207\022\013\n\007NUMPAD9\0208\022\014\n\010MULTIPLY\0209\022\007\n\003AD"
      "D\020:\022\r\n\tSEPARATOR\020;\022\014\n\010SUBTRACT\020<\022\013\n\007DECI"
      "MAL\020=\022\n\n\006DIVIDE\020>\022\n\n\006EQUALS\020\?\022\016\n\nTEXT_IN"
      "PUT\020@\022\013\n\007HANKAKU\020A\022\t\n\005KANJI\020B\022\014\n\010KATAKAN"
      "A\020C\022\r\n\tCAPS_LOCK\020D\022\021\n\rUNDEFINED_KEY\020E\022\t\n"
      "\005COMMA\020F\022\t\n\005CLEAR\020G\022\020\n\014VIRTUAL_LEFT\020H\022\021\n"
      "\rVIRTUAL_RIGHT\020I\022\021\n\rVIRTUAL_ENTER\020J\022\016\n\nV"
      "IRTUAL_UP\020K\022\020\n\014VIRTUAL_DOWN\020L\022\023\n\017NUM_SPE"
      "CIALKEYS\020M\"\261\001\n\013ModifierKey\022\010\n\004CTRL\020\001\022\007\n\003"
      "ALT\020\002\022\t\n\005SHIFT\020\004\022\014\n\010KEY_DOWN\020\010\022\n\n\006KEY_UP"
      "\020\020\022\r\n\tLEFT_CTRL\020 \022\014\n\010LEFT_ALT\020@\022\017\n\nLEFT_"
      "SHIFT\020\200\001\022\017\n\nRIGHT_CTRL\020\200\002\022\016\n\tRIGHT_ALT\020\200"
      "\004\022\020\n\013RIGHT_SHIFT\020\200\010\022\t\n\004CAPS\020\200\020\":\n\nInputS"
      "tyle\022\017\n\013FOLLOW_MODE\020\000\022\t\n\005AS_IS\020\001\022\020\n\014DIRE"
      "CT_INPUT\020\002\"\273\001\n\023GenericStorageEntry\022<\n\004ty"
      "pe\030\001 \001(\0162..mozc.commands.GenericStorageE"
      "ntry.StorageType\022\013\n\003key\030\002 \001(\t\022\r\n\005value\030\003"
      " \003(\014\"J\n\013StorageType\022\022\n\016SYMBOL_HISTORY\020\000\022"
      "\024\n\020EMOTICON_HISTORY\020\001\022\021\n\rEMOJI_HISTORY\020\002"
      "\"\311\016\n\016SessionCommand\0227\n\004type\030\001 \002(\0162).mozc"
      ".commands.SessionCommand.CommandType\022\n\n\002"
      "id\030\002 \001(\005\0228\n\020composition_mode\030\003 \001(\0162\036.moz"
      "c.commands.CompositionMode\022\014\n\004text\030\004 \001(\t"
      "\022\027\n\017cursor_position\030\005 \001(\r\022H\n\021usage_stats"
      "_event\030\007 \001(\0162-.mozc.commands.SessionComm"
      "and.UsageStatsEvent\022#\n\033usage_stats_event"
      "_int_value\030\t \001(\005\"\227\004\n\013CommandType\022\n\n\006REVE"
      "RT\020\001\022\n\n\006SUBMIT\020\002\022\024\n\020SELECT_CANDIDATE\020\003\022\027"
      "\n\023HIGHLIGHT_CANDIDATE\020\004\022\025\n\021SWITCH_INPUT_"
      "MODE\020\005\022\016\n\nGET_STATUS\020\006\022\024\n\020SUBMIT_CANDIDA"
      "TE\020\007\022\023\n\017CONVERT_REVERSE\020\010\022\010\n\004UNDO\020\t\022\021\n\rR"
      "ESET_CONTEXT\020\n\022\017\n\013MOVE_CURSOR\020\013\022\033\n\027SWITC"
      "H_INPUT_FIELD_TYPE\020\014\022\025\n\021USAGE_STATS_EVEN"
      "T\020\r\022\022\n\016UNDO_OR_REWIND\020\016\022\025\n\021EXPAND_SUGGES"
      "TION\020\017\022 \n\034OBSOLETE_SEND_CARET_LOCATION\020\020"
      "\022&\n\"OBSOLETE_SEND_LANGUAGE_BAR_COMMAND\020\021"
      "\022\035\n\031OBSOLETE_GET_ASYNC_RESULT\020\022\022\023\n\017COMMI"
      "T_RAW_TEXT\020\023\022\025\n\021CONVERT_PREV_PAGE\020\024\022\025\n\021C"
      "ONVERT_NEXT_PAGE\020\025\022\017\n\013TURN_ON_IME\020\026\022\020\n\014T"
      "URN_OFF_IME\020\027\022\023\n\017NUM_OF_COMMANDS\020\030\"\365\007\n\017U"
      "sageStatsEvent\022\030\n\024INFOLIST_WINDOW_SHOW\020\001"
      "\022\030\n\024INFOLIST_WINDOW_HIDE\020\002\022\032\n\026HANDWRITIN"
      "G_OPEN_EVENT\020\003\022\034\n\030HANDWRITING_COMMIT_EVE"
      "NT\020\004\022 \n\034CHARACTER_PALETTE_OPEN_EVENT\020\005\022\""
      "\n\036CHARACTER_PALETTE_COMMIT_EVENT\020\006\022&\n\"SO"
      "FTWARE_KEYBOARD_LAYOUT_LANDSCAPE\020\007\022%\n!SO"
      "FTWARE_KEYBOARD_LAYOUT_PORTRAIT\020\010\022\035\n\031SUB"
      "MITTED_CANDIDATE_ROW_0\020\t\022\035\n\031SUBMITTED_CA"
      "NDIDATE_ROW_1\020\n\022\035\n\031SUBMITTED_CANDIDATE_R"
      "OW_2\020\013\022\035\n\031SUBMITTED_CANDIDATE_ROW_3\020\014\022\035\n"
      "\031SUBMITTED_CANDIDATE_ROW_4\020\r\022\035\n\031SUBMITTE"
      "D_CANDIDATE_ROW_5\020\016\022\035\n\031SUBMITTED_CANDIDA"
      "TE_ROW_6\020\017\022\035\n\031SUBMITTED_CANDIDATE_ROW_7\020"
      "\020\022\035\n\031SUBMITTED_CANDIDATE_ROW_8\020\021\022\035\n\031SUBM"
      "ITTED_CANDIDATE_ROW_9\020\022\022 \n\034SUBMITTED_CAN"
      "DIDATE_ROW_GE10\020\023\022\027\n\023KEYBOARD_FOLD_EVENT"
      "\020\024\022\031\n\025KEYBOARD_EXPAND_EVENT\020\025\022(\n$MUSHROO"
      "M_SELECTION_DIALOG_OPEN_EVENT\020\026\022*\n&SOFTW"
      "ARE_KEYBOARD_HEIGHT_DIP_LANDSCAPE\020\027\022)\n%S"
      "OFTWARE_KEYBOARD_HEIGHT_DIP_PORTRAIT\020\030\0229"
      "\n5SOFTWARE_KEYBOARD_LAYOUT_ADJUSTMENT_EN"
      "ABLED_LANDSCAPE\020\031\0228\n4SOFTWARE_KEYBOARD_L"
      "AYOUT_ADJUSTMENT_ENABLED_PORTRAIT\020\032\022.\n*S"
      "OFTWARE_KEYBOARD_LAYOUT_ENGLISH_LANDSCAP"
      "E\020\033\022-\n)SOFTWARE_KEYBOARD_LAYOUT_ENGLISH_"
      "PORTRAIT\020\034J\004\010\006\020\007J\004\010\010\020\tJ\004\010\n\020\013\"\223\002\n\007Context"
      "\022\026\n\016preceding_text\030\001 \001(\t\022\026\n\016following_te"
      "xt\030\002 \001(\t\022\"\n\023suppress_suggestion\030\003 \001(\010:\005f"
      "alse\022\?\n\020input_field_type\030\004 \001(\0162%.mozc.co"
      "mmands.Context.InputFieldType\022\023\n\010revisio"
      "n\030\005 \001(\005:\0010\022\035\n\025experimental_features\030d \003("
      "\t\"\?\n\016InputFieldType\022\n\n\006NORMAL\020\001\022\014\n\010PASSW"
      "ORD\020\002\022\007\n\003TEL\020\003\022\n\n\006NUMBER\020\004\"\320\001\n\nCapabilit"
      "y\022h\n\rtext_deletion\030\001 \001(\01624.mozc.commands"
      ".Capability.TextDeletionCapabilityType:\033"
      "NO_TEXT_DELETION_CAPABILITY\"X\n\032TextDelet"
      "ionCapabilityType\022\037\n\033NO_TEXT_DELETION_CA"
      "PABILITY\020\000\022\031\n\025DELETE_PRECEDING_TEXT\020\001\"\342\016"
      "\n\007Request\022$\n\025zero_query_suggestion\030\001 \001(\010"
      ":\005false\022\037\n\020mixed_conversion\030\002 \001(\010:\005false"
      "\022X\n\025special_romanji_table\030\004 \001(\0162*.mozc.c"
      "ommands.Request.SpecialRomanjiTable:\rDEF"
      "AULT_TABLE\022o\n\025space_on_alphanumeric\030\006 \001("
      "\0162*.mozc.commands.Request.SpaceOnAlphanu"
      "meric:$SPACE_OR_CONVERT_KEEPING_COMPOSIT"
      "ION\022\025\n\rkeyboard_name\030\007 \001(\t\0225\n\'update_inp"
      "ut_mode_from_surrounding_text\030\010 \001(\010:\004tru"
      "e\0223\n$kana_modifier_insensitive_conversio"
      "n\030\t \001(\010:\005false\022&\n\027auto_partial_suggestio"
      "n\030\n \001(\010:\005false\022\"\n\027available_emoji_carrie"
      "r\030\013 \001(\005:\0011\022$\n\031emoji_rewriter_capability\030"
      "\014 \001(\005:\0011\022W\n\026crossing_edge_behavior\030\r \001(\016"
      "2+.mozc.commands.Request.CrossingEdgeBeh"
      "avior:\nDO_NOTHING\022p\n\024language_aware_inpu"
      "t\030\016 \001(\01621.mozc.commands.Request.Language"
      "AwareInputBehavior:\037DEFAULT_LANGUAGE_AWA"
      "RE_BEHAVIOR\022\036\n\023candidate_page_size\030\017 \001(\005"
      ":\0019\022\035\n\025candidates_size_limit\030\020 \001(\005\"\302\004\n\023S"
      "pecialRomanjiTable\022\021\n\rDEFAULT_TABLE\020\000\022\033\n"
      "\027TWELVE_KEYS_TO_HIRAGANA\020\n\022!\n\035TWELVE_KEY"
      "S_TO_HALFWIDTHASCII\020\013\022\025\n\021FLICK_TO_HIRAGA"
      "NA\020\r\022\033\n\027FLICK_TO_HALFWIDTHASCII\020\016\022\034\n\030TOG"
      "GLE_FLICK_TO_HIRAGANA\020\020\022\"\n\036TOGGLE_FLICK_"
      "TO_HALFWIDTHASCII\020\021\022\035\n\031QWERTY_MOBILE_TO_"
      "HIRAGANA\020\024\022#\n\037QWERTY_MOBILE_TO_HALFWIDTH"
      "ASCII\020\026\022\025\n\021GODAN_TO_HIRAGANA\020\036\022\033\n\027GODAN_"
      "TO_HALFWIDTHASCII\020\037\022\027\n\023NOTOUCH_TO_HIRAGA"
      "NA\020(\022\035\n\031NOTOUCH_TO_HALFWIDTHASCII\020)\022\"\n\036O"
      "BSOLETE_TWELVE_KEYS_TO_NUMBER\020\014\022\034\n\030OBSOL"
      "ETE_FLICK_TO_NUMBER\020\017\022\034\n\030OBSOLETE_GODAN_"
      "TO_NUMBER\020 \022-\n)OBSOLETE_QWERTY_MOBILE_TO"
      "_HIRAGANA_NUMBER\020\025\022#\n\037OBSOLETE_TOGGLE_FL"
      "ICK_TO_NUMBER\020\022\"w\n\023SpaceOnAlphanumeric\022("
      "\n$SPACE_OR_CONVERT_KEEPING_COMPOSITION\020\000"
      "\022*\n&SPACE_OR_CONVERT_COMMITING_COMPOSITI"
      "ON\020\001\022\n\n\006COMMIT\020\002\"[\n\020EmojiCarrierType\022\021\n\r"
      "UNICODE_EMOJI\020\001\022\020\n\014DOCOMO_EMOJI\020\002\022\022\n\016SOF"
      "TBANK_EMOJI\020\004\022\016\n\nKDDI_EMOJI\020\010\"`\n\022Rewrite"
      "rCapability\022\021\n\rNOT_AVAILABLE\020\000\022\016\n\nCONVER"
      "SION\020\001\022\016\n\nPREDICTION\020\002\022\016\n\nSUGGESTION\020\004\022\007"
      "\n\003ALL\020\007\"D\n\024CrossingEdgeBehavior\022\016\n\nDO_NO"
      "THING\020\000\022\034\n\030COMMIT_WITHOUT_CONSUMING\020\001\"}\n"
      "\032LanguageAwareInputBehavior\022#\n\037DEFAULT_L"
      "ANGUAGE_AWARE_BEHAVIOR\020\000\022\033\n\027NO_LANGUAGE_"
      "AWARE_INPUT\020\001\022\035\n\031LANGUAGE_AWARE_SUGGESTI"
      "ON\020\002J\004\010\003\020\004\"Q\n\017ApplicationInfo\022\022\n\nprocess"
      "_id\030\001 \001(\r\022\021\n\tthread_id\030\002 \001(\r\022\027\n\017timezone"
      "_offset\030\003 \001(\005\"\357\013\n\005Input\022.\n\004type\030\001 \002(\0162 ."
      "mozc.commands.Input.CommandType\022\n\n\002id\030\002 "
      "\001(\004\022$\n\003key\030\003 \001(\0132\027.mozc.commands.KeyEven"
      "t\022.\n\007command\030\004 \001(\0132\035.mozc.commands.Sessi"
      "onCommand\022#\n\006config\030\005 \001(\0132\023.mozc.config."
      "Config\022\'\n\007context\030\006 \001(\0132\026.mozc.commands."
      "Context\022-\n\ncapability\030\007 \001(\0132\031.mozc.comma"
      "nds.Capability\0228\n\020application_info\030\010 \001(\013"
      "2\036.mozc.commands.ApplicationInfo\022\'\n\007requ"
      "est\030\t \001(\0132\026.mozc.commands.Request\0229\n\rsto"
      "rage_entry\030\n \001(\0132\".mozc.commands.Generic"
      "StorageEntry\0225\n\014touch_events\030\014 \003(\0132\037.moz"
      "c.commands.Input.TouchEvent\022L\n\027user_dict"
      "ionary_command\030\r \001(\0132+.mozc.user_diction"
      "ary.UserDictionaryCommand\022 \n\022request_sug"
      "gestion\030\016 \001(\010:\004true\0228\n\025engine_reload_req"
      "uest\030\017 \001(\0132\031.mozc.EngineReloadRequest\032j\n"
      "\rTouchPosition\0220\n\006action\030\001 \001(\0162 .mozc.co"
      "mmands.Input.TouchAction\022\t\n\001x\030\002 \001(\002\022\t\n\001y"
      "\030\003 \001(\002\022\021\n\ttimestamp\030\004 \001(\003\032S\n\nTouchEvent\022"
      "\021\n\tsource_id\030\001 \001(\r\0222\n\006stroke\030\002 \003(\0132\".moz"
      "c.commands.Input.TouchPosition\"\323\004\n\013Comma"
      "ndType\022\010\n\004NONE\020\000\022\022\n\016CREATE_SESSION\020\001\022\022\n\016"
      "DELETE_SESSION\020\002\022\014\n\010SEND_KEY\020\003\022\021\n\rTEST_S"
      "END_KEY\020\004\022\020\n\014SEND_COMMAND\020\005\022\016\n\nGET_CONFI"
      "G\020\006\022\016\n\nSET_CONFIG\020\007\022\026\n\022SET_IMPOSED_CONFI"
      "G\020\026\022\017\n\013SET_REQUEST\020\021\022\r\n\tSYNC_DATA\020\010\022\014\n\010S"
      "HUTDOWN\020\t\022\n\n\006RELOAD\020\n\022\026\n\022CLEAR_USER_HIST"
      "ORY\020\013\022\031\n\025CLEAR_USER_PREDICTION\020\014\022 \n\034CLEA"
      "R_UNUSED_USER_PREDICTION\020\020\022\013\n\007CLEANUP\020\r\022"
      "\020\n\014NO_OPERATION\020\016\022\035\n\031OBSOLETE_START_CLOU"
      "D_SYNC\020\022\022\"\n\036OBSOLETE_GET_CLOUD_SYNC_STAT"
      "US\020\027\022\032\n\026OBSOLETE_ADD_AUTH_CODE\020\030\022\025\n\021INSE"
      "RT_TO_STORAGE\020\024\022\031\n\025READ_ALL_FROM_STORAGE"
      "\020\025\022\021\n\rCLEAR_STORAGE\020\031\022 \n\034SEND_USER_DICTI"
      "ONARY_COMMAND\020\032\022\036\n\032SEND_ENGINE_RELOAD_RE"
      "QUEST\020\033\022\023\n\017NUM_OF_COMMANDS\020\034\";\n\013TouchAct"
      "ion\022\016\n\nTOUCH_DOWN\020\001\022\016\n\nTOUCH_MOVE\020\002\022\014\n\010T"
      "OUCH_UP\020\003J\004\010\013\020\014\"\222\001\n\006Result\022.\n\004type\030\001 \002(\016"
      "2 .mozc.commands.Result.ResultType\022\r\n\005va"
      "lue\030\002 \002(\t\022\013\n\003key\030\003 \001(\t\022\030\n\rcursor_offset\030"
      "\004 \001(\005:\0010\"\"\n\nResultType\022\010\n\004NONE\020\000\022\n\n\006STRI"
      "NG\020\001\"\233\002\n\007Preedit\022\016\n\006cursor\030\001 \002(\r\022/\n\007segm"
      "ent\030\002 \003(\n2\036.mozc.commands.Preedit.Segmen"
      "t\022\034\n\024highlighted_position\030\003 \001(\r\032\260\001\n\007Segm"
      "ent\022=\n\nannotation\030\003 \002(\0162).mozc.commands."
      "Preedit.Segment.Annotation\022\r\n\005value\030\004 \002("
      "\t\022\024\n\014value_length\030\005 \002(\r\022\013\n\003key\030\006 \001(\t\"4\n\n"
      "Annotation\022\010\n\004NONE\020\000\022\r\n\tUNDERLINE\020\001\022\r\n\tH"
      "IGHLIGHT\020\002\"\200\001\n\006Status\022\021\n\tactivated\030\001 \001(\010"
      "\022,\n\004mode\030\002 \001(\0162\036.mozc.commands.Compositi"
      "onMode\0225\n\rcomeback_mode\030\003 \001(\0162\036.mozc.com"
      "mands.CompositionMode\"/\n\rDeletionRange\022\016"
      "\n\006offset\030\001 \001(\005\022\016\n\006length\030\002 \001(\005\"\272\t\n\006Outpu"
      "t\022\n\n\002id\030\001 \001(\004\022,\n\004mode\030\002 \001(\0162\036.mozc.comma"
      "nds.CompositionMode\022\020\n\010consumed\030\003 \001(\010\022%\n"
      "\006result\030\004 \001(\0132\025.mozc.commands.Result\022\'\n\007"
      "preedit\030\005 \001(\0132\026.mozc.commands.Preedit\022-\n"
      "\ncandidates\030\006 \001(\0132\031.mozc.commands.Candid"
      "ates\022$\n\003key\030\007 \001(\0132\027.mozc.commands.KeyEve"
      "nt\022\013\n\003url\030\010 \001(\t\022#\n\006config\030\t \001(\0132\023.mozc.c"
      "onfig.Config\022B\n\016preedit_method\030\n \001(\0162#.m"
      "ozc.commands.Output.PreeditMethod:\005ASCII"
      "\022D\n\nerror_code\030\013 \001(\0162\037.mozc.commands.Out"
      "put.ErrorCode:\017SESSION_SUCCESS\022%\n\006status"
      "\030\r \001(\0132\025.mozc.commands.Status\0229\n\023all_can"
      "didate_words\030\016 \001(\0132\034.mozc.commands.Candi"
      "dateList\0224\n\016deletion_range\030\020 \001(\0132\034.mozc."
      "commands.DeletionRange\022A\n\020launch_tool_mo"
      "de\030\021 \001(\0162\036.mozc.commands.Output.ToolMode"
      ":\007NO_TOOL\0220\n\010callback\030\022 \001(\0132\036.mozc.comma"
      "nds.Output.Callback\0229\n\rstorage_entry\030\023 \001"
      "(\0132\".mozc.commands.GenericStorageEntry\022Y"
      "\n\036user_dictionary_command_status\030\025 \001(\01321"
      ".mozc.user_dictionary.UserDictionaryComm"
      "andStatus\022:\n\026engine_reload_response\030\026 \001("
      "\0132\032.mozc.EngineReloadResponse\032Z\n\010Callbac"
      "k\0226\n\017session_command\030\001 \001(\0132\035.mozc.comman"
      "ds.SessionCommand\022\026\n\016delay_millisec\030\002 \001("
      "\r\"$\n\rPreeditMethod\022\t\n\005ASCII\020\000\022\010\n\004KANA\020\001\""
      "5\n\tErrorCode\022\023\n\017SESSION_SUCCESS\020\000\022\023\n\017SES"
      "SION_FAILURE\020\001\"Y\n\010ToolMode\022\013\n\007NO_TOOL\020\000\022"
      "\021\n\rCONFIG_DIALOG\020\001\022\023\n\017DICTIONARY_TOOL\020\002\022"
      "\030\n\024WORD_REGISTER_DIALOG\020\003J\004\010\014\020\rJ\004\010\017\020\020J\004\010"
      "\024\020\025\"U\n\007Command\022#\n\005input\030\001 \002(\0132\024.mozc.com"
      "mands.Input\022%\n\006output\030\002 \002(\0132\025.mozc.comma"
      "nds.Output\"7\n\013CommandList\022(\n\010commands\030\001 "
      "\003(\0132\026.mozc.commands.Command*\212\001\n\017Composit"
      "ionMode\022\n\n\006DIRECT\020\000\022\014\n\010HIRAGANA\020\001\022\021\n\rFUL"
      "L_KATAKANA\020\002\022\016\n\nHALF_ASCII\020\003\022\016\n\nFULL_ASC"
      "II\020\004\022\021\n\rHALF_KATAKANA\020\005\022\027\n\023NUM_OF_COMPOS"
      "ITIONS\020\006B\?\n.org.mozc.android.inputmethod"
      ".japanese.protobufB\rProtoCommands"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 10113);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/commands.proto", &protobuf_RegisterTypes);
  ::protobuf_protocol_2fcandidates_2eproto::AddDescriptors();
  ::protobuf_protocol_2fconfig_2eproto::AddDescriptors();
  ::protobuf_protocol_2fengine_5fbuilder_2eproto::AddDescriptors();
  ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protocol_2fcommands_2eproto
namespace mozc {
namespace commands {
const ::google::protobuf::EnumDescriptor* KeyEvent_SpecialKey_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[0];
}
bool KeyEvent_SpecialKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const KeyEvent_SpecialKey KeyEvent::NO_SPECIALKEY;
const KeyEvent_SpecialKey KeyEvent::DIGIT;
const KeyEvent_SpecialKey KeyEvent::ON;
const KeyEvent_SpecialKey KeyEvent::OFF;
const KeyEvent_SpecialKey KeyEvent::SPACE;
const KeyEvent_SpecialKey KeyEvent::ENTER;
const KeyEvent_SpecialKey KeyEvent::LEFT;
const KeyEvent_SpecialKey KeyEvent::RIGHT;
const KeyEvent_SpecialKey KeyEvent::UP;
const KeyEvent_SpecialKey KeyEvent::DOWN;
const KeyEvent_SpecialKey KeyEvent::ESCAPE;
const KeyEvent_SpecialKey KeyEvent::DEL;
const KeyEvent_SpecialKey KeyEvent::BACKSPACE;
const KeyEvent_SpecialKey KeyEvent::HENKAN;
const KeyEvent_SpecialKey KeyEvent::MUHENKAN;
const KeyEvent_SpecialKey KeyEvent::KANA;
const KeyEvent_SpecialKey KeyEvent::HOME;
const KeyEvent_SpecialKey KeyEvent::END;
const KeyEvent_SpecialKey KeyEvent::TAB;
const KeyEvent_SpecialKey KeyEvent::F1;
const KeyEvent_SpecialKey KeyEvent::F2;
const KeyEvent_SpecialKey KeyEvent::F3;
const KeyEvent_SpecialKey KeyEvent::F4;
const KeyEvent_SpecialKey KeyEvent::F5;
const KeyEvent_SpecialKey KeyEvent::F6;
const KeyEvent_SpecialKey KeyEvent::F7;
const KeyEvent_SpecialKey KeyEvent::F8;
const KeyEvent_SpecialKey KeyEvent::F9;
const KeyEvent_SpecialKey KeyEvent::F10;
const KeyEvent_SpecialKey KeyEvent::F11;
const KeyEvent_SpecialKey KeyEvent::F12;
const KeyEvent_SpecialKey KeyEvent::PAGE_UP;
const KeyEvent_SpecialKey KeyEvent::PAGE_DOWN;
const KeyEvent_SpecialKey KeyEvent::INSERT;
const KeyEvent_SpecialKey KeyEvent::F13;
const KeyEvent_SpecialKey KeyEvent::F14;
const KeyEvent_SpecialKey KeyEvent::F15;
const KeyEvent_SpecialKey KeyEvent::F16;
const KeyEvent_SpecialKey KeyEvent::F17;
const KeyEvent_SpecialKey KeyEvent::F18;
const KeyEvent_SpecialKey KeyEvent::F19;
const KeyEvent_SpecialKey KeyEvent::F20;
const KeyEvent_SpecialKey KeyEvent::F21;
const KeyEvent_SpecialKey KeyEvent::F22;
const KeyEvent_SpecialKey KeyEvent::F23;
const KeyEvent_SpecialKey KeyEvent::F24;
const KeyEvent_SpecialKey KeyEvent::EISU;
const KeyEvent_SpecialKey KeyEvent::NUMPAD0;
const KeyEvent_SpecialKey KeyEvent::NUMPAD1;
const KeyEvent_SpecialKey KeyEvent::NUMPAD2;
const KeyEvent_SpecialKey KeyEvent::NUMPAD3;
const KeyEvent_SpecialKey KeyEvent::NUMPAD4;
const KeyEvent_SpecialKey KeyEvent::NUMPAD5;
const KeyEvent_SpecialKey KeyEvent::NUMPAD6;
const KeyEvent_SpecialKey KeyEvent::NUMPAD7;
const KeyEvent_SpecialKey KeyEvent::NUMPAD8;
const KeyEvent_SpecialKey KeyEvent::NUMPAD9;
const KeyEvent_SpecialKey KeyEvent::MULTIPLY;
const KeyEvent_SpecialKey KeyEvent::ADD;
const KeyEvent_SpecialKey KeyEvent::SEPARATOR;
const KeyEvent_SpecialKey KeyEvent::SUBTRACT;
const KeyEvent_SpecialKey KeyEvent::DECIMAL;
const KeyEvent_SpecialKey KeyEvent::DIVIDE;
const KeyEvent_SpecialKey KeyEvent::EQUALS;
const KeyEvent_SpecialKey KeyEvent::TEXT_INPUT;
const KeyEvent_SpecialKey KeyEvent::HANKAKU;
const KeyEvent_SpecialKey KeyEvent::KANJI;
const KeyEvent_SpecialKey KeyEvent::KATAKANA;
const KeyEvent_SpecialKey KeyEvent::CAPS_LOCK;
const KeyEvent_SpecialKey KeyEvent::UNDEFINED_KEY;
const KeyEvent_SpecialKey KeyEvent::COMMA;
const KeyEvent_SpecialKey KeyEvent::CLEAR;
const KeyEvent_SpecialKey KeyEvent::VIRTUAL_LEFT;
const KeyEvent_SpecialKey KeyEvent::VIRTUAL_RIGHT;
const KeyEvent_SpecialKey KeyEvent::VIRTUAL_ENTER;
const KeyEvent_SpecialKey KeyEvent::VIRTUAL_UP;
const KeyEvent_SpecialKey KeyEvent::VIRTUAL_DOWN;
const KeyEvent_SpecialKey KeyEvent::NUM_SPECIALKEYS;
const KeyEvent_SpecialKey KeyEvent::SpecialKey_MIN;
const KeyEvent_SpecialKey KeyEvent::SpecialKey_MAX;
const int KeyEvent::SpecialKey_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* KeyEvent_ModifierKey_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[1];
}
bool KeyEvent_ModifierKey_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const KeyEvent_ModifierKey KeyEvent::CTRL;
const KeyEvent_ModifierKey KeyEvent::ALT;
const KeyEvent_ModifierKey KeyEvent::SHIFT;
const KeyEvent_ModifierKey KeyEvent::KEY_DOWN;
const KeyEvent_ModifierKey KeyEvent::KEY_UP;
const KeyEvent_ModifierKey KeyEvent::LEFT_CTRL;
const KeyEvent_ModifierKey KeyEvent::LEFT_ALT;
const KeyEvent_ModifierKey KeyEvent::LEFT_SHIFT;
const KeyEvent_ModifierKey KeyEvent::RIGHT_CTRL;
const KeyEvent_ModifierKey KeyEvent::RIGHT_ALT;
const KeyEvent_ModifierKey KeyEvent::RIGHT_SHIFT;
const KeyEvent_ModifierKey KeyEvent::CAPS;
const KeyEvent_ModifierKey KeyEvent::ModifierKey_MIN;
const KeyEvent_ModifierKey KeyEvent::ModifierKey_MAX;
const int KeyEvent::ModifierKey_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* KeyEvent_InputStyle_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[2];
}
bool KeyEvent_InputStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const KeyEvent_InputStyle KeyEvent::FOLLOW_MODE;
const KeyEvent_InputStyle KeyEvent::AS_IS;
const KeyEvent_InputStyle KeyEvent::DIRECT_INPUT;
const KeyEvent_InputStyle KeyEvent::InputStyle_MIN;
const KeyEvent_InputStyle KeyEvent::InputStyle_MAX;
const int KeyEvent::InputStyle_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GenericStorageEntry_StorageType_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[3];
}
bool GenericStorageEntry_StorageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GenericStorageEntry_StorageType GenericStorageEntry::SYMBOL_HISTORY;
const GenericStorageEntry_StorageType GenericStorageEntry::EMOTICON_HISTORY;
const GenericStorageEntry_StorageType GenericStorageEntry::EMOJI_HISTORY;
const GenericStorageEntry_StorageType GenericStorageEntry::StorageType_MIN;
const GenericStorageEntry_StorageType GenericStorageEntry::StorageType_MAX;
const int GenericStorageEntry::StorageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SessionCommand_CommandType_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[4];
}
bool SessionCommand_CommandType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SessionCommand_CommandType SessionCommand::REVERT;
const SessionCommand_CommandType SessionCommand::SUBMIT;
const SessionCommand_CommandType SessionCommand::SELECT_CANDIDATE;
const SessionCommand_CommandType SessionCommand::HIGHLIGHT_CANDIDATE;
const SessionCommand_CommandType SessionCommand::SWITCH_INPUT_MODE;
const SessionCommand_CommandType SessionCommand::GET_STATUS;
const SessionCommand_CommandType SessionCommand::SUBMIT_CANDIDATE;
const SessionCommand_CommandType SessionCommand::CONVERT_REVERSE;
const SessionCommand_CommandType SessionCommand::UNDO;
const SessionCommand_CommandType SessionCommand::RESET_CONTEXT;
const SessionCommand_CommandType SessionCommand::MOVE_CURSOR;
const SessionCommand_CommandType SessionCommand::SWITCH_INPUT_FIELD_TYPE;
const SessionCommand_CommandType SessionCommand::USAGE_STATS_EVENT;
const SessionCommand_CommandType SessionCommand::UNDO_OR_REWIND;
const SessionCommand_CommandType SessionCommand::EXPAND_SUGGESTION;
const SessionCommand_CommandType SessionCommand::OBSOLETE_SEND_CARET_LOCATION;
const SessionCommand_CommandType SessionCommand::OBSOLETE_SEND_LANGUAGE_BAR_COMMAND;
const SessionCommand_CommandType SessionCommand::OBSOLETE_GET_ASYNC_RESULT;
const SessionCommand_CommandType SessionCommand::COMMIT_RAW_TEXT;
const SessionCommand_CommandType SessionCommand::CONVERT_PREV_PAGE;
const SessionCommand_CommandType SessionCommand::CONVERT_NEXT_PAGE;
const SessionCommand_CommandType SessionCommand::TURN_ON_IME;
const SessionCommand_CommandType SessionCommand::TURN_OFF_IME;
const SessionCommand_CommandType SessionCommand::NUM_OF_COMMANDS;
const SessionCommand_CommandType SessionCommand::CommandType_MIN;
const SessionCommand_CommandType SessionCommand::CommandType_MAX;
const int SessionCommand::CommandType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SessionCommand_UsageStatsEvent_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[5];
}
bool SessionCommand_UsageStatsEvent_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SessionCommand_UsageStatsEvent SessionCommand::INFOLIST_WINDOW_SHOW;
const SessionCommand_UsageStatsEvent SessionCommand::INFOLIST_WINDOW_HIDE;
const SessionCommand_UsageStatsEvent SessionCommand::HANDWRITING_OPEN_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::HANDWRITING_COMMIT_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::CHARACTER_PALETTE_OPEN_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::CHARACTER_PALETTE_COMMIT_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_LANDSCAPE;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_PORTRAIT;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_0;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_1;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_2;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_3;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_4;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_5;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_6;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_7;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_8;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_9;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_GE10;
const SessionCommand_UsageStatsEvent SessionCommand::KEYBOARD_FOLD_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::KEYBOARD_EXPAND_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::MUSHROOM_SELECTION_DIALOG_OPEN_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_HEIGHT_DIP_LANDSCAPE;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_HEIGHT_DIP_PORTRAIT;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_ADJUSTMENT_ENABLED_LANDSCAPE;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_ADJUSTMENT_ENABLED_PORTRAIT;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_ENGLISH_LANDSCAPE;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_ENGLISH_PORTRAIT;
const SessionCommand_UsageStatsEvent SessionCommand::UsageStatsEvent_MIN;
const SessionCommand_UsageStatsEvent SessionCommand::UsageStatsEvent_MAX;
const int SessionCommand::UsageStatsEvent_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Context_InputFieldType_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[6];
}
bool Context_InputFieldType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Context_InputFieldType Context::NORMAL;
const Context_InputFieldType Context::PASSWORD;
const Context_InputFieldType Context::TEL;
const Context_InputFieldType Context::NUMBER;
const Context_InputFieldType Context::InputFieldType_MIN;
const Context_InputFieldType Context::InputFieldType_MAX;
const int Context::InputFieldType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Capability_TextDeletionCapabilityType_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[7];
}
bool Capability_TextDeletionCapabilityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Capability_TextDeletionCapabilityType Capability::NO_TEXT_DELETION_CAPABILITY;
const Capability_TextDeletionCapabilityType Capability::DELETE_PRECEDING_TEXT;
const Capability_TextDeletionCapabilityType Capability::TextDeletionCapabilityType_MIN;
const Capability_TextDeletionCapabilityType Capability::TextDeletionCapabilityType_MAX;
const int Capability::TextDeletionCapabilityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Request_SpecialRomanjiTable_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[8];
}
bool Request_SpecialRomanjiTable_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 30:
    case 31:
    case 32:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_SpecialRomanjiTable Request::DEFAULT_TABLE;
const Request_SpecialRomanjiTable Request::TWELVE_KEYS_TO_HIRAGANA;
const Request_SpecialRomanjiTable Request::TWELVE_KEYS_TO_HALFWIDTHASCII;
const Request_SpecialRomanjiTable Request::FLICK_TO_HIRAGANA;
const Request_SpecialRomanjiTable Request::FLICK_TO_HALFWIDTHASCII;
const Request_SpecialRomanjiTable Request::TOGGLE_FLICK_TO_HIRAGANA;
const Request_SpecialRomanjiTable Request::TOGGLE_FLICK_TO_HALFWIDTHASCII;
const Request_SpecialRomanjiTable Request::QWERTY_MOBILE_TO_HIRAGANA;
const Request_SpecialRomanjiTable Request::QWERTY_MOBILE_TO_HALFWIDTHASCII;
const Request_SpecialRomanjiTable Request::GODAN_TO_HIRAGANA;
const Request_SpecialRomanjiTable Request::GODAN_TO_HALFWIDTHASCII;
const Request_SpecialRomanjiTable Request::NOTOUCH_TO_HIRAGANA;
const Request_SpecialRomanjiTable Request::NOTOUCH_TO_HALFWIDTHASCII;
const Request_SpecialRomanjiTable Request::OBSOLETE_TWELVE_KEYS_TO_NUMBER;
const Request_SpecialRomanjiTable Request::OBSOLETE_FLICK_TO_NUMBER;
const Request_SpecialRomanjiTable Request::OBSOLETE_GODAN_TO_NUMBER;
const Request_SpecialRomanjiTable Request::OBSOLETE_QWERTY_MOBILE_TO_HIRAGANA_NUMBER;
const Request_SpecialRomanjiTable Request::OBSOLETE_TOGGLE_FLICK_TO_NUMBER;
const Request_SpecialRomanjiTable Request::SpecialRomanjiTable_MIN;
const Request_SpecialRomanjiTable Request::SpecialRomanjiTable_MAX;
const int Request::SpecialRomanjiTable_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Request_SpaceOnAlphanumeric_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[9];
}
bool Request_SpaceOnAlphanumeric_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_SpaceOnAlphanumeric Request::SPACE_OR_CONVERT_KEEPING_COMPOSITION;
const Request_SpaceOnAlphanumeric Request::SPACE_OR_CONVERT_COMMITING_COMPOSITION;
const Request_SpaceOnAlphanumeric Request::COMMIT;
const Request_SpaceOnAlphanumeric Request::SpaceOnAlphanumeric_MIN;
const Request_SpaceOnAlphanumeric Request::SpaceOnAlphanumeric_MAX;
const int Request::SpaceOnAlphanumeric_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Request_EmojiCarrierType_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[10];
}
bool Request_EmojiCarrierType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_EmojiCarrierType Request::UNICODE_EMOJI;
const Request_EmojiCarrierType Request::DOCOMO_EMOJI;
const Request_EmojiCarrierType Request::SOFTBANK_EMOJI;
const Request_EmojiCarrierType Request::KDDI_EMOJI;
const Request_EmojiCarrierType Request::EmojiCarrierType_MIN;
const Request_EmojiCarrierType Request::EmojiCarrierType_MAX;
const int Request::EmojiCarrierType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Request_RewriterCapability_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[11];
}
bool Request_RewriterCapability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_RewriterCapability Request::NOT_AVAILABLE;
const Request_RewriterCapability Request::CONVERSION;
const Request_RewriterCapability Request::PREDICTION;
const Request_RewriterCapability Request::SUGGESTION;
const Request_RewriterCapability Request::ALL;
const Request_RewriterCapability Request::RewriterCapability_MIN;
const Request_RewriterCapability Request::RewriterCapability_MAX;
const int Request::RewriterCapability_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Request_CrossingEdgeBehavior_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[12];
}
bool Request_CrossingEdgeBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_CrossingEdgeBehavior Request::DO_NOTHING;
const Request_CrossingEdgeBehavior Request::COMMIT_WITHOUT_CONSUMING;
const Request_CrossingEdgeBehavior Request::CrossingEdgeBehavior_MIN;
const Request_CrossingEdgeBehavior Request::CrossingEdgeBehavior_MAX;
const int Request::CrossingEdgeBehavior_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Request_LanguageAwareInputBehavior_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[13];
}
bool Request_LanguageAwareInputBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_LanguageAwareInputBehavior Request::DEFAULT_LANGUAGE_AWARE_BEHAVIOR;
const Request_LanguageAwareInputBehavior Request::NO_LANGUAGE_AWARE_INPUT;
const Request_LanguageAwareInputBehavior Request::LANGUAGE_AWARE_SUGGESTION;
const Request_LanguageAwareInputBehavior Request::LanguageAwareInputBehavior_MIN;
const Request_LanguageAwareInputBehavior Request::LanguageAwareInputBehavior_MAX;
const int Request::LanguageAwareInputBehavior_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Input_CommandType_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[14];
}
bool Input_CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Input_CommandType Input::NONE;
const Input_CommandType Input::CREATE_SESSION;
const Input_CommandType Input::DELETE_SESSION;
const Input_CommandType Input::SEND_KEY;
const Input_CommandType Input::TEST_SEND_KEY;
const Input_CommandType Input::SEND_COMMAND;
const Input_CommandType Input::GET_CONFIG;
const Input_CommandType Input::SET_CONFIG;
const Input_CommandType Input::SET_IMPOSED_CONFIG;
const Input_CommandType Input::SET_REQUEST;
const Input_CommandType Input::SYNC_DATA;
const Input_CommandType Input::SHUTDOWN;
const Input_CommandType Input::RELOAD;
const Input_CommandType Input::CLEAR_USER_HISTORY;
const Input_CommandType Input::CLEAR_USER_PREDICTION;
const Input_CommandType Input::CLEAR_UNUSED_USER_PREDICTION;
const Input_CommandType Input::CLEANUP;
const Input_CommandType Input::NO_OPERATION;
const Input_CommandType Input::OBSOLETE_START_CLOUD_SYNC;
const Input_CommandType Input::OBSOLETE_GET_CLOUD_SYNC_STATUS;
const Input_CommandType Input::OBSOLETE_ADD_AUTH_CODE;
const Input_CommandType Input::INSERT_TO_STORAGE;
const Input_CommandType Input::READ_ALL_FROM_STORAGE;
const Input_CommandType Input::CLEAR_STORAGE;
const Input_CommandType Input::SEND_USER_DICTIONARY_COMMAND;
const Input_CommandType Input::SEND_ENGINE_RELOAD_REQUEST;
const Input_CommandType Input::NUM_OF_COMMANDS;
const Input_CommandType Input::CommandType_MIN;
const Input_CommandType Input::CommandType_MAX;
const int Input::CommandType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Input_TouchAction_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[15];
}
bool Input_TouchAction_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Input_TouchAction Input::TOUCH_DOWN;
const Input_TouchAction Input::TOUCH_MOVE;
const Input_TouchAction Input::TOUCH_UP;
const Input_TouchAction Input::TouchAction_MIN;
const Input_TouchAction Input::TouchAction_MAX;
const int Input::TouchAction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Result_ResultType_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[16];
}
bool Result_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Result_ResultType Result::NONE;
const Result_ResultType Result::STRING;
const Result_ResultType Result::ResultType_MIN;
const Result_ResultType Result::ResultType_MAX;
const int Result::ResultType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Preedit_Segment_Annotation_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[17];
}
bool Preedit_Segment_Annotation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Preedit_Segment_Annotation Preedit_Segment::NONE;
const Preedit_Segment_Annotation Preedit_Segment::UNDERLINE;
const Preedit_Segment_Annotation Preedit_Segment::HIGHLIGHT;
const Preedit_Segment_Annotation Preedit_Segment::Annotation_MIN;
const Preedit_Segment_Annotation Preedit_Segment::Annotation_MAX;
const int Preedit_Segment::Annotation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Output_PreeditMethod_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[18];
}
bool Output_PreeditMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Output_PreeditMethod Output::ASCII;
const Output_PreeditMethod Output::KANA;
const Output_PreeditMethod Output::PreeditMethod_MIN;
const Output_PreeditMethod Output::PreeditMethod_MAX;
const int Output::PreeditMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Output_ErrorCode_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[19];
}
bool Output_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Output_ErrorCode Output::SESSION_SUCCESS;
const Output_ErrorCode Output::SESSION_FAILURE;
const Output_ErrorCode Output::ErrorCode_MIN;
const Output_ErrorCode Output::ErrorCode_MAX;
const int Output::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Output_ToolMode_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[20];
}
bool Output_ToolMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Output_ToolMode Output::NO_TOOL;
const Output_ToolMode Output::CONFIG_DIALOG;
const Output_ToolMode Output::DICTIONARY_TOOL;
const Output_ToolMode Output::WORD_REGISTER_DIALOG;
const Output_ToolMode Output::ToolMode_MIN;
const Output_ToolMode Output::ToolMode_MAX;
const int Output::ToolMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CompositionMode_descriptor() {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcommands_2eproto::file_level_enum_descriptors[21];
}
bool CompositionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void KeyEvent_ProbableKeyEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyEvent_ProbableKeyEvent::kKeyCodeFieldNumber;
const int KeyEvent_ProbableKeyEvent::kSpecialKeyFieldNumber;
const int KeyEvent_ProbableKeyEvent::kModifierKeysFieldNumber;
const int KeyEvent_ProbableKeyEvent::kProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyEvent_ProbableKeyEvent::KeyEvent_ProbableKeyEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_KeyEvent_ProbableKeyEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.KeyEvent.ProbableKeyEvent)
}
KeyEvent_ProbableKeyEvent::KeyEvent_ProbableKeyEvent(const KeyEvent_ProbableKeyEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      modifier_keys_(from.modifier_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_code_, &from.key_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&probability_) -
    reinterpret_cast<char*>(&key_code_)) + sizeof(probability_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.KeyEvent.ProbableKeyEvent)
}

void KeyEvent_ProbableKeyEvent::SharedCtor() {
  ::memset(&key_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&key_code_)) + sizeof(probability_));
}

KeyEvent_ProbableKeyEvent::~KeyEvent_ProbableKeyEvent() {
  // @@protoc_insertion_point(destructor:mozc.commands.KeyEvent.ProbableKeyEvent)
  SharedDtor();
}

void KeyEvent_ProbableKeyEvent::SharedDtor() {
}

void KeyEvent_ProbableKeyEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KeyEvent_ProbableKeyEvent::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyEvent_ProbableKeyEvent& KeyEvent_ProbableKeyEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_KeyEvent_ProbableKeyEvent.base);
  return *internal_default_instance();
}


void KeyEvent_ProbableKeyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modifier_keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&key_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&probability_) -
        reinterpret_cast<char*>(&key_code_)) + sizeof(probability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KeyEvent_ProbableKeyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_key_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::KeyEvent_SpecialKey_IsValid(value)) {
            set_special_key(static_cast< ::mozc::commands::KeyEvent_SpecialKey >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::KeyEvent_ModifierKey_IsValid(value)) {
            add_modifier_keys(static_cast< ::mozc::commands::KeyEvent_ModifierKey >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 4,
                 ::mozc::commands::KeyEvent_ModifierKey_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_modifier_keys())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double probability = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.KeyEvent.ProbableKeyEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.KeyEvent.ProbableKeyEvent)
  return false;
#undef DO_
}

void KeyEvent_ProbableKeyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 key_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key_code(), output);
  }

  // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->special_key(), output);
  }

  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  for (int i = 0, n = this->modifier_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->modifier_keys(i), output);
  }

  // optional double probability = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->probability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.KeyEvent.ProbableKeyEvent)
}

::google::protobuf::uint8* KeyEvent_ProbableKeyEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 key_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key_code(), target);
  }

  // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->special_key(), target);
  }

  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    4, this->modifier_keys_, target);

  // optional double probability = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->probability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.KeyEvent.ProbableKeyEvent)
  return target;
}

size_t KeyEvent_ProbableKeyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->modifier_keys_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->modifier_keys(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 key_code = 1;
    if (has_key_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_code());
    }

    // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
    if (has_special_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->special_key());
    }

    // optional double probability = 10;
    if (has_probability()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyEvent_ProbableKeyEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyEvent_ProbableKeyEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyEvent_ProbableKeyEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.KeyEvent.ProbableKeyEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.KeyEvent.ProbableKeyEvent)
    MergeFrom(*source);
  }
}

void KeyEvent_ProbableKeyEvent::MergeFrom(const KeyEvent_ProbableKeyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modifier_keys_.MergeFrom(from.modifier_keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      key_code_ = from.key_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      special_key_ = from.special_key_;
    }
    if (cached_has_bits & 0x00000004u) {
      probability_ = from.probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeyEvent_ProbableKeyEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyEvent_ProbableKeyEvent::CopyFrom(const KeyEvent_ProbableKeyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEvent_ProbableKeyEvent::IsInitialized() const {
  return true;
}

void KeyEvent_ProbableKeyEvent::Swap(KeyEvent_ProbableKeyEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyEvent_ProbableKeyEvent::InternalSwap(KeyEvent_ProbableKeyEvent* other) {
  using std::swap;
  modifier_keys_.InternalSwap(&other->modifier_keys_);
  swap(key_code_, other->key_code_);
  swap(special_key_, other->special_key_);
  swap(probability_, other->probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KeyEvent_ProbableKeyEvent::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KeyEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyEvent::kKeyCodeFieldNumber;
const int KeyEvent::kModifiersFieldNumber;
const int KeyEvent::kSpecialKeyFieldNumber;
const int KeyEvent::kModifierKeysFieldNumber;
const int KeyEvent::kKeyStringFieldNumber;
const int KeyEvent::kInputStyleFieldNumber;
const int KeyEvent::kModeFieldNumber;
const int KeyEvent::kProbableKeyEventFieldNumber;
const int KeyEvent::kActivatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyEvent::KeyEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_KeyEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.KeyEvent)
}
KeyEvent::KeyEvent(const KeyEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      modifier_keys_(from.modifier_keys_),
      probable_key_event_(from.probable_key_event_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_string()) {
    key_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_string_);
  }
  ::memcpy(&key_code_, &from.key_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&activated_) -
    reinterpret_cast<char*>(&key_code_)) + sizeof(activated_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.KeyEvent)
}

void KeyEvent::SharedCtor() {
  key_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activated_) -
      reinterpret_cast<char*>(&key_code_)) + sizeof(activated_));
}

KeyEvent::~KeyEvent() {
  // @@protoc_insertion_point(destructor:mozc.commands.KeyEvent)
  SharedDtor();
}

void KeyEvent::SharedDtor() {
  key_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KeyEvent::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyEvent& KeyEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_KeyEvent.base);
  return *internal_default_instance();
}


void KeyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.KeyEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modifier_keys_.Clear();
  probable_key_event_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_string_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&key_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&activated_) -
        reinterpret_cast<char*>(&key_code_)) + sizeof(activated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KeyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.KeyEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_key_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifiers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_modifiers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::KeyEvent_SpecialKey_IsValid(value)) {
            set_special_key(static_cast< ::mozc::commands::KeyEvent_SpecialKey >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::KeyEvent_ModifierKey_IsValid(value)) {
            add_modifier_keys(static_cast< ::mozc::commands::KeyEvent_ModifierKey >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 4,
                 ::mozc::commands::KeyEvent_ModifierKey_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_modifier_keys())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key_string = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_string().data(), static_cast<int>(this->key_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.KeyEvent.key_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::KeyEvent_InputStyle_IsValid(value)) {
            set_input_style(static_cast< ::mozc::commands::KeyEvent_InputStyle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.CompositionMode mode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::CompositionMode_IsValid(value)) {
            set_mode(static_cast< ::mozc::commands::CompositionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_probable_key_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool activated = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_activated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.KeyEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.KeyEvent)
  return false;
#undef DO_
}

void KeyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.KeyEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 key_code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key_code(), output);
  }

  // optional uint32 modifiers = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->modifiers(), output);
  }

  // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->special_key(), output);
  }

  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  for (int i = 0, n = this->modifier_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->modifier_keys(i), output);
  }

  // optional string key_string = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_string().data(), static_cast<int>(this->key_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.KeyEvent.key_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->key_string(), output);
  }

  // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->input_style(), output);
  }

  // optional .mozc.commands.CompositionMode mode = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->mode(), output);
  }

  // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->probable_key_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->probable_key_event(static_cast<int>(i)),
      output);
  }

  // optional bool activated = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->activated(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.KeyEvent)
}

::google::protobuf::uint8* KeyEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.KeyEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 key_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key_code(), target);
  }

  // optional uint32 modifiers = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->modifiers(), target);
  }

  // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->special_key(), target);
  }

  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    4, this->modifier_keys_, target);

  // optional string key_string = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_string().data(), static_cast<int>(this->key_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.KeyEvent.key_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->key_string(), target);
  }

  // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->input_style(), target);
  }

  // optional .mozc.commands.CompositionMode mode = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->mode(), target);
  }

  // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->probable_key_event_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->probable_key_event(static_cast<int>(i)), deterministic, target);
  }

  // optional bool activated = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->activated(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.KeyEvent)
  return target;
}

size_t KeyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.KeyEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->modifier_keys_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->modifier_keys(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->probable_key_event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->probable_key_event(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string key_string = 5;
    if (has_key_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_string());
    }

    // optional uint32 key_code = 1;
    if (has_key_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_code());
    }

    // optional uint32 modifiers = 2;
    if (has_modifiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

    // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
    if (has_special_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->special_key());
    }

    // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
    if (has_input_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_style());
    }

    // optional .mozc.commands.CompositionMode mode = 7;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional bool activated = 9;
    if (has_activated()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.KeyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.KeyEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.KeyEvent)
    MergeFrom(*source);
  }
}

void KeyEvent::MergeFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.KeyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modifier_keys_.MergeFrom(from.modifier_keys_);
  probable_key_event_.MergeFrom(from.probable_key_event_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key_string();
      key_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      key_code_ = from.key_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    if (cached_has_bits & 0x00000008u) {
      special_key_ = from.special_key_;
    }
    if (cached_has_bits & 0x00000010u) {
      input_style_ = from.input_style_;
    }
    if (cached_has_bits & 0x00000020u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      activated_ = from.activated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeyEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.KeyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyEvent::CopyFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.KeyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEvent::IsInitialized() const {
  return true;
}

void KeyEvent::Swap(KeyEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyEvent::InternalSwap(KeyEvent* other) {
  using std::swap;
  modifier_keys_.InternalSwap(&other->modifier_keys_);
  CastToBase(&probable_key_event_)->InternalSwap(CastToBase(&other->probable_key_event_));
  key_string_.Swap(&other->key_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(key_code_, other->key_code_);
  swap(modifiers_, other->modifiers_);
  swap(special_key_, other->special_key_);
  swap(input_style_, other->input_style_);
  swap(mode_, other->mode_);
  swap(activated_, other->activated_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KeyEvent::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GenericStorageEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenericStorageEntry::kTypeFieldNumber;
const int GenericStorageEntry::kKeyFieldNumber;
const int GenericStorageEntry::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenericStorageEntry::GenericStorageEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_GenericStorageEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.GenericStorageEntry)
}
GenericStorageEntry::GenericStorageEntry(const GenericStorageEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:mozc.commands.GenericStorageEntry)
}

void GenericStorageEntry::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

GenericStorageEntry::~GenericStorageEntry() {
  // @@protoc_insertion_point(destructor:mozc.commands.GenericStorageEntry)
  SharedDtor();
}

void GenericStorageEntry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GenericStorageEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GenericStorageEntry::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GenericStorageEntry& GenericStorageEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_GenericStorageEntry.base);
  return *internal_default_instance();
}


void GenericStorageEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.GenericStorageEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmptyNoArena();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GenericStorageEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.GenericStorageEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::GenericStorageEntry_StorageType_IsValid(value)) {
            set_type(static_cast< ::mozc::commands::GenericStorageEntry_StorageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.GenericStorageEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.GenericStorageEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.GenericStorageEntry)
  return false;
#undef DO_
}

void GenericStorageEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.GenericStorageEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.GenericStorageEntry.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // repeated bytes value = 3;
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.GenericStorageEntry)
}

::google::protobuf::uint8* GenericStorageEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.GenericStorageEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.GenericStorageEntry.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // repeated bytes value = 3;
  for (int i = 0, n = this->value_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->value(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.GenericStorageEntry)
  return target;
}

size_t GenericStorageEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.GenericStorageEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes value = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->value_size());
  for (int i = 0, n = this->value_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericStorageEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.GenericStorageEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericStorageEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GenericStorageEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.GenericStorageEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.GenericStorageEntry)
    MergeFrom(*source);
  }
}

void GenericStorageEntry::MergeFrom(const GenericStorageEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.GenericStorageEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GenericStorageEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.GenericStorageEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericStorageEntry::CopyFrom(const GenericStorageEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.GenericStorageEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericStorageEntry::IsInitialized() const {
  return true;
}

void GenericStorageEntry::Swap(GenericStorageEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericStorageEntry::InternalSwap(GenericStorageEntry* other) {
  using std::swap;
  value_.InternalSwap(CastToBase(&other->value_));
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GenericStorageEntry::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SessionCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionCommand::kTypeFieldNumber;
const int SessionCommand::kIdFieldNumber;
const int SessionCommand::kCompositionModeFieldNumber;
const int SessionCommand::kTextFieldNumber;
const int SessionCommand::kCursorPositionFieldNumber;
const int SessionCommand::kUsageStatsEventFieldNumber;
const int SessionCommand::kUsageStatsEventIntValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionCommand::SessionCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_SessionCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.SessionCommand)
}
SessionCommand::SessionCommand(const SessionCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&usage_stats_event_) -
    reinterpret_cast<char*>(&id_)) + sizeof(usage_stats_event_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.SessionCommand)
}

void SessionCommand::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usage_stats_event_int_value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(usage_stats_event_int_value_));
  type_ = 1;
  usage_stats_event_ = 1;
}

SessionCommand::~SessionCommand() {
  // @@protoc_insertion_point(destructor:mozc.commands.SessionCommand)
  SharedDtor();
}

void SessionCommand::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SessionCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SessionCommand::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SessionCommand& SessionCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_SessionCommand.base);
  return *internal_default_instance();
}


void SessionCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.SessionCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usage_stats_event_int_value_) -
        reinterpret_cast<char*>(&id_)) + sizeof(usage_stats_event_int_value_));
    type_ = 1;
    usage_stats_event_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.SessionCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.commands.SessionCommand.CommandType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::SessionCommand_CommandType_IsValid(value)) {
            set_type(static_cast< ::mozc::commands::SessionCommand_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.CompositionMode composition_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::CompositionMode_IsValid(value)) {
            set_composition_mode(static_cast< ::mozc::commands::CompositionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.SessionCommand.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cursor_position = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_cursor_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cursor_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::SessionCommand_UsageStatsEvent_IsValid(value)) {
            set_usage_stats_event(static_cast< ::mozc::commands::SessionCommand_UsageStatsEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 usage_stats_event_int_value = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_usage_stats_event_int_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usage_stats_event_int_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.SessionCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.SessionCommand)
  return false;
#undef DO_
}

void SessionCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.SessionCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.commands.SessionCommand.CommandType type = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional .mozc.commands.CompositionMode composition_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->composition_mode(), output);
  }

  // optional string text = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.SessionCommand.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text(), output);
  }

  // optional uint32 cursor_position = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cursor_position(), output);
  }

  // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->usage_stats_event(), output);
  }

  // optional int32 usage_stats_event_int_value = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->usage_stats_event_int_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.SessionCommand)
}

::google::protobuf::uint8* SessionCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.SessionCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.commands.SessionCommand.CommandType type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional .mozc.commands.CompositionMode composition_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->composition_mode(), target);
  }

  // optional string text = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.SessionCommand.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }

  // optional uint32 cursor_position = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cursor_position(), target);
  }

  // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->usage_stats_event(), target);
  }

  // optional int32 usage_stats_event_int_value = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->usage_stats_event_int_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.SessionCommand)
  return target;
}

size_t SessionCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.SessionCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .mozc.commands.SessionCommand.CommandType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .mozc.commands.CompositionMode composition_mode = 3;
    if (has_composition_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->composition_mode());
    }

    // optional uint32 cursor_position = 5;
    if (has_cursor_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cursor_position());
    }

    // optional int32 usage_stats_event_int_value = 9;
    if (has_usage_stats_event_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usage_stats_event_int_value());
    }

  }
  // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
  if (has_usage_stats_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->usage_stats_event());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.SessionCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.SessionCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.SessionCommand)
    MergeFrom(*source);
  }
}

void SessionCommand::MergeFrom(const SessionCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.SessionCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      composition_mode_ = from.composition_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      cursor_position_ = from.cursor_position_;
    }
    if (cached_has_bits & 0x00000010u) {
      usage_stats_event_int_value_ = from.usage_stats_event_int_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      usage_stats_event_ = from.usage_stats_event_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SessionCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.SessionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionCommand::CopyFrom(const SessionCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.SessionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  return true;
}

void SessionCommand::Swap(SessionCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionCommand::InternalSwap(SessionCommand* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(composition_mode_, other->composition_mode_);
  swap(cursor_position_, other->cursor_position_);
  swap(usage_stats_event_int_value_, other->usage_stats_event_int_value_);
  swap(type_, other->type_);
  swap(usage_stats_event_, other->usage_stats_event_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SessionCommand::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Context::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Context::kPrecedingTextFieldNumber;
const int Context::kFollowingTextFieldNumber;
const int Context::kSuppressSuggestionFieldNumber;
const int Context::kInputFieldTypeFieldNumber;
const int Context::kRevisionFieldNumber;
const int Context::kExperimentalFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Context::Context()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_Context.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Context)
}
Context::Context(const Context& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      experimental_features_(from.experimental_features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  preceding_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preceding_text()) {
    preceding_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preceding_text_);
  }
  following_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_following_text()) {
    following_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.following_text_);
  }
  ::memcpy(&suppress_suggestion_, &from.suppress_suggestion_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_field_type_) -
    reinterpret_cast<char*>(&suppress_suggestion_)) + sizeof(input_field_type_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Context)
}

void Context::SharedCtor() {
  preceding_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  following_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&suppress_suggestion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revision_) -
      reinterpret_cast<char*>(&suppress_suggestion_)) + sizeof(revision_));
  input_field_type_ = 1;
}

Context::~Context() {
  // @@protoc_insertion_point(destructor:mozc.commands.Context)
  SharedDtor();
}

void Context::SharedDtor() {
  preceding_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  following_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Context::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Context::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Context& Context::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_Context.base);
  return *internal_default_instance();
}


void Context::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Context)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  experimental_features_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      preceding_text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      following_text_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&suppress_suggestion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&revision_) -
        reinterpret_cast<char*>(&suppress_suggestion_)) + sizeof(revision_));
    input_field_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Context::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Context)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string preceding_text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preceding_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preceding_text().data(), static_cast<int>(this->preceding_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Context.preceding_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string following_text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_following_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->following_text().data(), static_cast<int>(this->following_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Context.following_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool suppress_suggestion = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_suppress_suggestion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suppress_suggestion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Context_InputFieldType_IsValid(value)) {
            set_input_field_type(static_cast< ::mozc::commands::Context_InputFieldType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 revision = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_revision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string experimental_features = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_experimental_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->experimental_features(this->experimental_features_size() - 1).data(),
            static_cast<int>(this->experimental_features(this->experimental_features_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Context.experimental_features");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Context)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Context)
  return false;
#undef DO_
}

void Context::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Context)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string preceding_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preceding_text().data(), static_cast<int>(this->preceding_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Context.preceding_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->preceding_text(), output);
  }

  // optional string following_text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->following_text().data(), static_cast<int>(this->following_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Context.following_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->following_text(), output);
  }

  // optional bool suppress_suggestion = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->suppress_suggestion(), output);
  }

  // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->input_field_type(), output);
  }

  // optional int32 revision = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->revision(), output);
  }

  // repeated string experimental_features = 100;
  for (int i = 0, n = this->experimental_features_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->experimental_features(i).data(), static_cast<int>(this->experimental_features(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Context.experimental_features");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      100, this->experimental_features(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Context)
}

::google::protobuf::uint8* Context::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Context)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string preceding_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preceding_text().data(), static_cast<int>(this->preceding_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Context.preceding_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->preceding_text(), target);
  }

  // optional string following_text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->following_text().data(), static_cast<int>(this->following_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Context.following_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->following_text(), target);
  }

  // optional bool suppress_suggestion = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->suppress_suggestion(), target);
  }

  // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->input_field_type(), target);
  }

  // optional int32 revision = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->revision(), target);
  }

  // repeated string experimental_features = 100;
  for (int i = 0, n = this->experimental_features_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->experimental_features(i).data(), static_cast<int>(this->experimental_features(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Context.experimental_features");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(100, this->experimental_features(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Context)
  return target;
}

size_t Context::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Context)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string experimental_features = 100;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->experimental_features_size());
  for (int i = 0, n = this->experimental_features_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->experimental_features(i));
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string preceding_text = 1;
    if (has_preceding_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preceding_text());
    }

    // optional string following_text = 2;
    if (has_following_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->following_text());
    }

    // optional bool suppress_suggestion = 3 [default = false];
    if (has_suppress_suggestion()) {
      total_size += 1 + 1;
    }

    // optional int32 revision = 5 [default = 0];
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revision());
    }

    // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
    if (has_input_field_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_field_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Context::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Context)
  GOOGLE_DCHECK_NE(&from, this);
  const Context* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Context>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Context)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Context)
    MergeFrom(*source);
  }
}

void Context::MergeFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Context)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  experimental_features_.MergeFrom(from.experimental_features_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_preceding_text();
      preceding_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preceding_text_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_following_text();
      following_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.following_text_);
    }
    if (cached_has_bits & 0x00000004u) {
      suppress_suggestion_ = from.suppress_suggestion_;
    }
    if (cached_has_bits & 0x00000008u) {
      revision_ = from.revision_;
    }
    if (cached_has_bits & 0x00000010u) {
      input_field_type_ = from.input_field_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Context::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Context::CopyFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Context::IsInitialized() const {
  return true;
}

void Context::Swap(Context* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Context::InternalSwap(Context* other) {
  using std::swap;
  experimental_features_.InternalSwap(CastToBase(&other->experimental_features_));
  preceding_text_.Swap(&other->preceding_text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  following_text_.Swap(&other->following_text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(suppress_suggestion_, other->suppress_suggestion_);
  swap(revision_, other->revision_);
  swap(input_field_type_, other->input_field_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Context::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Capability::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Capability::kTextDeletionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Capability::Capability()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_Capability.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Capability)
}
Capability::Capability(const Capability& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_deletion_ = from.text_deletion_;
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Capability)
}

void Capability::SharedCtor() {
  text_deletion_ = 0;
}

Capability::~Capability() {
  // @@protoc_insertion_point(destructor:mozc.commands.Capability)
  SharedDtor();
}

void Capability::SharedDtor() {
}

void Capability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Capability::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Capability& Capability::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_Capability.base);
  return *internal_default_instance();
}


void Capability::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Capability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_deletion_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Capability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Capability)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Capability_TextDeletionCapabilityType_IsValid(value)) {
            set_text_deletion(static_cast< ::mozc::commands::Capability_TextDeletionCapabilityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Capability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Capability)
  return false;
#undef DO_
}

void Capability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Capability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->text_deletion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Capability)
}

::google::protobuf::uint8* Capability::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Capability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->text_deletion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Capability)
  return target;
}

size_t Capability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Capability)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
  if (has_text_deletion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->text_deletion());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Capability::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Capability)
  GOOGLE_DCHECK_NE(&from, this);
  const Capability* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Capability>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Capability)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Capability)
    MergeFrom(*source);
  }
}

void Capability::MergeFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Capability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text_deletion()) {
    set_text_deletion(from.text_deletion());
  }
}

void Capability::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Capability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Capability::CopyFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Capability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capability::IsInitialized() const {
  return true;
}

void Capability::Swap(Capability* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Capability::InternalSwap(Capability* other) {
  using std::swap;
  swap(text_deletion_, other->text_deletion_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Capability::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kZeroQuerySuggestionFieldNumber;
const int Request::kMixedConversionFieldNumber;
const int Request::kSpecialRomanjiTableFieldNumber;
const int Request::kSpaceOnAlphanumericFieldNumber;
const int Request::kKeyboardNameFieldNumber;
const int Request::kUpdateInputModeFromSurroundingTextFieldNumber;
const int Request::kKanaModifierInsensitiveConversionFieldNumber;
const int Request::kAutoPartialSuggestionFieldNumber;
const int Request::kAvailableEmojiCarrierFieldNumber;
const int Request::kEmojiRewriterCapabilityFieldNumber;
const int Request::kCrossingEdgeBehaviorFieldNumber;
const int Request::kLanguageAwareInputFieldNumber;
const int Request::kCandidatePageSizeFieldNumber;
const int Request::kCandidatesSizeLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keyboard_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keyboard_name()) {
    keyboard_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyboard_name_);
  }
  ::memcpy(&special_romanji_table_, &from.special_romanji_table_,
    static_cast<size_t>(reinterpret_cast<char*>(&candidate_page_size_) -
    reinterpret_cast<char*>(&special_romanji_table_)) + sizeof(candidate_page_size_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Request)
}

void Request::SharedCtor() {
  keyboard_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&special_romanji_table_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&candidates_size_limit_) -
      reinterpret_cast<char*>(&special_romanji_table_)) + sizeof(candidates_size_limit_));
  update_input_mode_from_surrounding_text_ = true;
  available_emoji_carrier_ = 1;
  emoji_rewriter_capability_ = 1;
  candidate_page_size_ = 9;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:mozc.commands.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  keyboard_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_Request.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    keyboard_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&special_romanji_table_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crossing_edge_behavior_) -
        reinterpret_cast<char*>(&special_romanji_table_)) + sizeof(crossing_edge_behavior_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&language_aware_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&candidates_size_limit_) -
        reinterpret_cast<char*>(&language_aware_input_)) + sizeof(candidates_size_limit_));
    update_input_mode_from_surrounding_text_ = true;
    available_emoji_carrier_ = 1;
    emoji_rewriter_capability_ = 1;
    candidate_page_size_ = 9;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool zero_query_suggestion = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_zero_query_suggestion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &zero_query_suggestion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mixed_conversion = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mixed_conversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mixed_conversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Request_SpecialRomanjiTable_IsValid(value)) {
            set_special_romanji_table(static_cast< ::mozc::commands::Request_SpecialRomanjiTable >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Request_SpaceOnAlphanumeric_IsValid(value)) {
            set_space_on_alphanumeric(static_cast< ::mozc::commands::Request_SpaceOnAlphanumeric >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string keyboard_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyboard_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyboard_name().data(), static_cast<int>(this->keyboard_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Request.keyboard_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_update_input_mode_from_surrounding_text();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_input_mode_from_surrounding_text_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_kana_modifier_insensitive_conversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kana_modifier_insensitive_conversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool auto_partial_suggestion = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_auto_partial_suggestion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_partial_suggestion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 available_emoji_carrier = 11 [default = 1];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_available_emoji_carrier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &available_emoji_carrier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 emoji_rewriter_capability = 12 [default = 1];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_emoji_rewriter_capability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emoji_rewriter_capability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Request_CrossingEdgeBehavior_IsValid(value)) {
            set_crossing_edge_behavior(static_cast< ::mozc::commands::Request_CrossingEdgeBehavior >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                13, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Request.LanguageAwareInputBehavior language_aware_input = 14 [default = DEFAULT_LANGUAGE_AWARE_BEHAVIOR];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Request_LanguageAwareInputBehavior_IsValid(value)) {
            set_language_aware_input(static_cast< ::mozc::commands::Request_LanguageAwareInputBehavior >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 candidate_page_size = 15 [default = 9];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_candidate_page_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &candidate_page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 candidates_size_limit = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_candidates_size_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &candidates_size_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool zero_query_suggestion = 1 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->zero_query_suggestion(), output);
  }

  // optional bool mixed_conversion = 2 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mixed_conversion(), output);
  }

  // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->special_romanji_table(), output);
  }

  // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->space_on_alphanumeric(), output);
  }

  // optional string keyboard_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyboard_name().data(), static_cast<int>(this->keyboard_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Request.keyboard_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->keyboard_name(), output);
  }

  // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->update_input_mode_from_surrounding_text(), output);
  }

  // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->kana_modifier_insensitive_conversion(), output);
  }

  // optional bool auto_partial_suggestion = 10 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->auto_partial_suggestion(), output);
  }

  // optional int32 available_emoji_carrier = 11 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->available_emoji_carrier(), output);
  }

  // optional int32 emoji_rewriter_capability = 12 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->emoji_rewriter_capability(), output);
  }

  // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->crossing_edge_behavior(), output);
  }

  // optional .mozc.commands.Request.LanguageAwareInputBehavior language_aware_input = 14 [default = DEFAULT_LANGUAGE_AWARE_BEHAVIOR];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->language_aware_input(), output);
  }

  // optional int32 candidate_page_size = 15 [default = 9];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->candidate_page_size(), output);
  }

  // optional int32 candidates_size_limit = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->candidates_size_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool zero_query_suggestion = 1 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->zero_query_suggestion(), target);
  }

  // optional bool mixed_conversion = 2 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mixed_conversion(), target);
  }

  // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->special_romanji_table(), target);
  }

  // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->space_on_alphanumeric(), target);
  }

  // optional string keyboard_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyboard_name().data(), static_cast<int>(this->keyboard_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Request.keyboard_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->keyboard_name(), target);
  }

  // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->update_input_mode_from_surrounding_text(), target);
  }

  // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->kana_modifier_insensitive_conversion(), target);
  }

  // optional bool auto_partial_suggestion = 10 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->auto_partial_suggestion(), target);
  }

  // optional int32 available_emoji_carrier = 11 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->available_emoji_carrier(), target);
  }

  // optional int32 emoji_rewriter_capability = 12 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->emoji_rewriter_capability(), target);
  }

  // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->crossing_edge_behavior(), target);
  }

  // optional .mozc.commands.Request.LanguageAwareInputBehavior language_aware_input = 14 [default = DEFAULT_LANGUAGE_AWARE_BEHAVIOR];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->language_aware_input(), target);
  }

  // optional int32 candidate_page_size = 15 [default = 9];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->candidate_page_size(), target);
  }

  // optional int32 candidates_size_limit = 16;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->candidates_size_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string keyboard_name = 7;
    if (has_keyboard_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyboard_name());
    }

    // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
    if (has_special_romanji_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->special_romanji_table());
    }

    // optional bool zero_query_suggestion = 1 [default = false];
    if (has_zero_query_suggestion()) {
      total_size += 1 + 1;
    }

    // optional bool mixed_conversion = 2 [default = false];
    if (has_mixed_conversion()) {
      total_size += 1 + 1;
    }

    // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
    if (has_kana_modifier_insensitive_conversion()) {
      total_size += 1 + 1;
    }

    // optional bool auto_partial_suggestion = 10 [default = false];
    if (has_auto_partial_suggestion()) {
      total_size += 1 + 1;
    }

    // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
    if (has_space_on_alphanumeric()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->space_on_alphanumeric());
    }

    // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
    if (has_crossing_edge_behavior()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->crossing_edge_behavior());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional .mozc.commands.Request.LanguageAwareInputBehavior language_aware_input = 14 [default = DEFAULT_LANGUAGE_AWARE_BEHAVIOR];
    if (has_language_aware_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->language_aware_input());
    }

    // optional int32 candidates_size_limit = 16;
    if (has_candidates_size_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->candidates_size_limit());
    }

    // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
    if (has_update_input_mode_from_surrounding_text()) {
      total_size += 1 + 1;
    }

    // optional int32 available_emoji_carrier = 11 [default = 1];
    if (has_available_emoji_carrier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->available_emoji_carrier());
    }

    // optional int32 emoji_rewriter_capability = 12 [default = 1];
    if (has_emoji_rewriter_capability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emoji_rewriter_capability());
    }

    // optional int32 candidate_page_size = 15 [default = 9];
    if (has_candidate_page_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->candidate_page_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_keyboard_name();
      keyboard_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyboard_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      special_romanji_table_ = from.special_romanji_table_;
    }
    if (cached_has_bits & 0x00000004u) {
      zero_query_suggestion_ = from.zero_query_suggestion_;
    }
    if (cached_has_bits & 0x00000008u) {
      mixed_conversion_ = from.mixed_conversion_;
    }
    if (cached_has_bits & 0x00000010u) {
      kana_modifier_insensitive_conversion_ = from.kana_modifier_insensitive_conversion_;
    }
    if (cached_has_bits & 0x00000020u) {
      auto_partial_suggestion_ = from.auto_partial_suggestion_;
    }
    if (cached_has_bits & 0x00000040u) {
      space_on_alphanumeric_ = from.space_on_alphanumeric_;
    }
    if (cached_has_bits & 0x00000080u) {
      crossing_edge_behavior_ = from.crossing_edge_behavior_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      language_aware_input_ = from.language_aware_input_;
    }
    if (cached_has_bits & 0x00000200u) {
      candidates_size_limit_ = from.candidates_size_limit_;
    }
    if (cached_has_bits & 0x00000400u) {
      update_input_mode_from_surrounding_text_ = from.update_input_mode_from_surrounding_text_;
    }
    if (cached_has_bits & 0x00000800u) {
      available_emoji_carrier_ = from.available_emoji_carrier_;
    }
    if (cached_has_bits & 0x00001000u) {
      emoji_rewriter_capability_ = from.emoji_rewriter_capability_;
    }
    if (cached_has_bits & 0x00002000u) {
      candidate_page_size_ = from.candidate_page_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  keyboard_name_.Swap(&other->keyboard_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(special_romanji_table_, other->special_romanji_table_);
  swap(zero_query_suggestion_, other->zero_query_suggestion_);
  swap(mixed_conversion_, other->mixed_conversion_);
  swap(kana_modifier_insensitive_conversion_, other->kana_modifier_insensitive_conversion_);
  swap(auto_partial_suggestion_, other->auto_partial_suggestion_);
  swap(space_on_alphanumeric_, other->space_on_alphanumeric_);
  swap(crossing_edge_behavior_, other->crossing_edge_behavior_);
  swap(language_aware_input_, other->language_aware_input_);
  swap(candidates_size_limit_, other->candidates_size_limit_);
  swap(update_input_mode_from_surrounding_text_, other->update_input_mode_from_surrounding_text_);
  swap(available_emoji_carrier_, other->available_emoji_carrier_);
  swap(emoji_rewriter_capability_, other->emoji_rewriter_capability_);
  swap(candidate_page_size_, other->candidate_page_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ApplicationInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplicationInfo::kProcessIdFieldNumber;
const int ApplicationInfo::kThreadIdFieldNumber;
const int ApplicationInfo::kTimezoneOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplicationInfo::ApplicationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_ApplicationInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.ApplicationInfo)
}
ApplicationInfo::ApplicationInfo(const ApplicationInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&process_id_, &from.process_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timezone_offset_) -
    reinterpret_cast<char*>(&process_id_)) + sizeof(timezone_offset_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.ApplicationInfo)
}

void ApplicationInfo::SharedCtor() {
  ::memset(&process_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timezone_offset_) -
      reinterpret_cast<char*>(&process_id_)) + sizeof(timezone_offset_));
}

ApplicationInfo::~ApplicationInfo() {
  // @@protoc_insertion_point(destructor:mozc.commands.ApplicationInfo)
  SharedDtor();
}

void ApplicationInfo::SharedDtor() {
}

void ApplicationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ApplicationInfo::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ApplicationInfo& ApplicationInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_ApplicationInfo.base);
  return *internal_default_instance();
}


void ApplicationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.ApplicationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&process_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timezone_offset_) -
        reinterpret_cast<char*>(&process_id_)) + sizeof(timezone_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ApplicationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.ApplicationInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 process_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_process_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 thread_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_thread_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timezone_offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timezone_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezone_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.ApplicationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.ApplicationInfo)
  return false;
#undef DO_
}

void ApplicationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.ApplicationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 process_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->process_id(), output);
  }

  // optional uint32 thread_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->thread_id(), output);
  }

  // optional int32 timezone_offset = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timezone_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.ApplicationInfo)
}

::google::protobuf::uint8* ApplicationInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.ApplicationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 process_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->process_id(), target);
  }

  // optional uint32 thread_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->thread_id(), target);
  }

  // optional int32 timezone_offset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timezone_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.ApplicationInfo)
  return target;
}

size_t ApplicationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.ApplicationInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 process_id = 1;
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process_id());
    }

    // optional uint32 thread_id = 2;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_id());
    }

    // optional int32 timezone_offset = 3;
    if (has_timezone_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timezone_offset());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplicationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.ApplicationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplicationInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ApplicationInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.ApplicationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.ApplicationInfo)
    MergeFrom(*source);
  }
}

void ApplicationInfo::MergeFrom(const ApplicationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.ApplicationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      process_id_ = from.process_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      thread_id_ = from.thread_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timezone_offset_ = from.timezone_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplicationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.ApplicationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationInfo::CopyFrom(const ApplicationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.ApplicationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationInfo::IsInitialized() const {
  return true;
}

void ApplicationInfo::Swap(ApplicationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplicationInfo::InternalSwap(ApplicationInfo* other) {
  using std::swap;
  swap(process_id_, other->process_id_);
  swap(thread_id_, other->thread_id_);
  swap(timezone_offset_, other->timezone_offset_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ApplicationInfo::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Input_TouchPosition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Input_TouchPosition::kActionFieldNumber;
const int Input_TouchPosition::kXFieldNumber;
const int Input_TouchPosition::kYFieldNumber;
const int Input_TouchPosition::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Input_TouchPosition::Input_TouchPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_Input_TouchPosition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Input.TouchPosition)
}
Input_TouchPosition::Input_TouchPosition(const Input_TouchPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&x_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Input.TouchPosition)
}

void Input_TouchPosition::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&x_)) + sizeof(timestamp_));
  action_ = 1;
}

Input_TouchPosition::~Input_TouchPosition() {
  // @@protoc_insertion_point(destructor:mozc.commands.Input.TouchPosition)
  SharedDtor();
}

void Input_TouchPosition::SharedDtor() {
}

void Input_TouchPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Input_TouchPosition::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Input_TouchPosition& Input_TouchPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_Input_TouchPosition.base);
  return *internal_default_instance();
}


void Input_TouchPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Input.TouchPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&x_)) + sizeof(timestamp_));
    action_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Input_TouchPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Input.TouchPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.commands.Input.TouchAction action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Input_TouchAction_IsValid(value)) {
            set_action(static_cast< ::mozc::commands::Input_TouchAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Input.TouchPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Input.TouchPosition)
  return false;
#undef DO_
}

void Input_TouchPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Input.TouchPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mozc.commands.Input.TouchAction action = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional int64 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Input.TouchPosition)
}

::google::protobuf::uint8* Input_TouchPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Input.TouchPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mozc.commands.Input.TouchAction action = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // optional int64 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Input.TouchPosition)
  return target;
}

size_t Input_TouchPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Input.TouchPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional int64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .mozc.commands.Input.TouchAction action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input_TouchPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Input.TouchPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const Input_TouchPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Input_TouchPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Input.TouchPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Input.TouchPosition)
    MergeFrom(*source);
  }
}

void Input_TouchPosition::MergeFrom(const Input_TouchPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Input.TouchPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Input_TouchPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Input.TouchPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input_TouchPosition::CopyFrom(const Input_TouchPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Input.TouchPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input_TouchPosition::IsInitialized() const {
  return true;
}

void Input_TouchPosition::Swap(Input_TouchPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Input_TouchPosition::InternalSwap(Input_TouchPosition* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(timestamp_, other->timestamp_);
  swap(action_, other->action_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Input_TouchPosition::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Input_TouchEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Input_TouchEvent::kSourceIdFieldNumber;
const int Input_TouchEvent::kStrokeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Input_TouchEvent::Input_TouchEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_Input_TouchEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Input.TouchEvent)
}
Input_TouchEvent::Input_TouchEvent(const Input_TouchEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      stroke_(from.stroke_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_id_ = from.source_id_;
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Input.TouchEvent)
}

void Input_TouchEvent::SharedCtor() {
  source_id_ = 0u;
}

Input_TouchEvent::~Input_TouchEvent() {
  // @@protoc_insertion_point(destructor:mozc.commands.Input.TouchEvent)
  SharedDtor();
}

void Input_TouchEvent::SharedDtor() {
}

void Input_TouchEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Input_TouchEvent::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Input_TouchEvent& Input_TouchEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_Input_TouchEvent.base);
  return *internal_default_instance();
}


void Input_TouchEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Input.TouchEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stroke_.Clear();
  source_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Input_TouchEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Input.TouchEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mozc.commands.Input.TouchPosition stroke = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stroke()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Input.TouchEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Input.TouchEvent)
  return false;
#undef DO_
}

void Input_TouchEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Input.TouchEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source_id(), output);
  }

  // repeated .mozc.commands.Input.TouchPosition stroke = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stroke_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->stroke(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Input.TouchEvent)
}

::google::protobuf::uint8* Input_TouchEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Input.TouchEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source_id(), target);
  }

  // repeated .mozc.commands.Input.TouchPosition stroke = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stroke_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->stroke(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Input.TouchEvent)
  return target;
}

size_t Input_TouchEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Input.TouchEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mozc.commands.Input.TouchPosition stroke = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stroke_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stroke(static_cast<int>(i)));
    }
  }

  // optional uint32 source_id = 1;
  if (has_source_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input_TouchEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Input.TouchEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Input_TouchEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Input_TouchEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Input.TouchEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Input.TouchEvent)
    MergeFrom(*source);
  }
}

void Input_TouchEvent::MergeFrom(const Input_TouchEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Input.TouchEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stroke_.MergeFrom(from.stroke_);
  if (from.has_source_id()) {
    set_source_id(from.source_id());
  }
}

void Input_TouchEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Input.TouchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input_TouchEvent::CopyFrom(const Input_TouchEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Input.TouchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input_TouchEvent::IsInitialized() const {
  return true;
}

void Input_TouchEvent::Swap(Input_TouchEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Input_TouchEvent::InternalSwap(Input_TouchEvent* other) {
  using std::swap;
  CastToBase(&stroke_)->InternalSwap(CastToBase(&other->stroke_));
  swap(source_id_, other->source_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Input_TouchEvent::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Input::InitAsDefaultInstance() {
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->key_ = const_cast< ::mozc::commands::KeyEvent*>(
      ::mozc::commands::KeyEvent::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->command_ = const_cast< ::mozc::commands::SessionCommand*>(
      ::mozc::commands::SessionCommand::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->config_ = const_cast< ::mozc::config::Config*>(
      ::mozc::config::Config::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->context_ = const_cast< ::mozc::commands::Context*>(
      ::mozc::commands::Context::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->capability_ = const_cast< ::mozc::commands::Capability*>(
      ::mozc::commands::Capability::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->application_info_ = const_cast< ::mozc::commands::ApplicationInfo*>(
      ::mozc::commands::ApplicationInfo::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->request_ = const_cast< ::mozc::commands::Request*>(
      ::mozc::commands::Request::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->storage_entry_ = const_cast< ::mozc::commands::GenericStorageEntry*>(
      ::mozc::commands::GenericStorageEntry::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->user_dictionary_command_ = const_cast< ::mozc::user_dictionary::UserDictionaryCommand*>(
      ::mozc::user_dictionary::UserDictionaryCommand::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->engine_reload_request_ = const_cast< ::mozc::EngineReloadRequest*>(
      ::mozc::EngineReloadRequest::internal_default_instance());
}
void Input::clear_config() {
  if (config_ != NULL) config_->Clear();
  clear_has_config();
}
void Input::clear_user_dictionary_command() {
  if (user_dictionary_command_ != NULL) user_dictionary_command_->Clear();
  clear_has_user_dictionary_command();
}
void Input::clear_engine_reload_request() {
  if (engine_reload_request_ != NULL) engine_reload_request_->Clear();
  clear_has_engine_reload_request();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Input::kTypeFieldNumber;
const int Input::kIdFieldNumber;
const int Input::kKeyFieldNumber;
const int Input::kCommandFieldNumber;
const int Input::kConfigFieldNumber;
const int Input::kContextFieldNumber;
const int Input::kCapabilityFieldNumber;
const int Input::kApplicationInfoFieldNumber;
const int Input::kRequestFieldNumber;
const int Input::kStorageEntryFieldNumber;
const int Input::kTouchEventsFieldNumber;
const int Input::kUserDictionaryCommandFieldNumber;
const int Input::kRequestSuggestionFieldNumber;
const int Input::kEngineReloadRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Input::Input()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_Input.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Input)
}
Input::Input(const Input& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      touch_events_(from.touch_events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::mozc::commands::KeyEvent(*from.key_);
  } else {
    key_ = NULL;
  }
  if (from.has_command()) {
    command_ = new ::mozc::commands::SessionCommand(*from.command_);
  } else {
    command_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::mozc::config::Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_context()) {
    context_ = new ::mozc::commands::Context(*from.context_);
  } else {
    context_ = NULL;
  }
  if (from.has_capability()) {
    capability_ = new ::mozc::commands::Capability(*from.capability_);
  } else {
    capability_ = NULL;
  }
  if (from.has_application_info()) {
    application_info_ = new ::mozc::commands::ApplicationInfo(*from.application_info_);
  } else {
    application_info_ = NULL;
  }
  if (from.has_request()) {
    request_ = new ::mozc::commands::Request(*from.request_);
  } else {
    request_ = NULL;
  }
  if (from.has_storage_entry()) {
    storage_entry_ = new ::mozc::commands::GenericStorageEntry(*from.storage_entry_);
  } else {
    storage_entry_ = NULL;
  }
  if (from.has_user_dictionary_command()) {
    user_dictionary_command_ = new ::mozc::user_dictionary::UserDictionaryCommand(*from.user_dictionary_command_);
  } else {
    user_dictionary_command_ = NULL;
  }
  if (from.has_engine_reload_request()) {
    engine_reload_request_ = new ::mozc::EngineReloadRequest(*from.engine_reload_request_);
  } else {
    engine_reload_request_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_suggestion_) -
    reinterpret_cast<char*>(&id_)) + sizeof(request_suggestion_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Input)
}

void Input::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&key_)) + sizeof(type_));
  request_suggestion_ = true;
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:mozc.commands.Input)
  SharedDtor();
}

void Input::SharedDtor() {
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete command_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete context_;
  if (this != internal_default_instance()) delete capability_;
  if (this != internal_default_instance()) delete application_info_;
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete storage_entry_;
  if (this != internal_default_instance()) delete user_dictionary_command_;
  if (this != internal_default_instance()) delete engine_reload_request_;
}

void Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Input::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Input& Input::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_Input.base);
  return *internal_default_instance();
}


void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  touch_events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(key_ != NULL);
      key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(command_ != NULL);
      command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(config_ != NULL);
      config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(context_ != NULL);
      context_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(capability_ != NULL);
      capability_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(application_info_ != NULL);
      application_info_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(request_ != NULL);
      request_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(storage_entry_ != NULL);
      storage_entry_->Clear();
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(user_dictionary_command_ != NULL);
      user_dictionary_command_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(engine_reload_request_ != NULL);
      engine_reload_request_->Clear();
    }
  }
  if (cached_has_bits & 7168u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
    request_suggestion_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Input::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Input)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.commands.Input.CommandType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Input_CommandType_IsValid(value)) {
            set_type(static_cast< ::mozc::commands::Input_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.KeyEvent key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.SessionCommand command = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.config.Config config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Context context = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Capability capability = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_capability()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.ApplicationInfo application_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_application_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Request request = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_storage_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_touch_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_dictionary_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool request_suggestion = 14 [default = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_request_suggestion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_suggestion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.EngineReloadRequest engine_reload_request = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_engine_reload_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Input)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Input)
  return false;
#undef DO_
}

void Input::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.commands.Input.CommandType type = 1;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional .mozc.commands.KeyEvent key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_key(), output);
  }

  // optional .mozc.commands.SessionCommand command = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_command(), output);
  }

  // optional .mozc.config.Config config = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_config(), output);
  }

  // optional .mozc.commands.Context context = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_context(), output);
  }

  // optional .mozc.commands.Capability capability = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_capability(), output);
  }

  // optional .mozc.commands.ApplicationInfo application_info = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_application_info(), output);
  }

  // optional .mozc.commands.Request request = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_request(), output);
  }

  // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_storage_entry(), output);
  }

  // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->touch_events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->touch_events(static_cast<int>(i)),
      output);
  }

  // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_user_dictionary_command(), output);
  }

  // optional bool request_suggestion = 14 [default = true];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->request_suggestion(), output);
  }

  // optional .mozc.EngineReloadRequest engine_reload_request = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_engine_reload_request(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Input)
}

::google::protobuf::uint8* Input::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.commands.Input.CommandType type = 1;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional .mozc.commands.KeyEvent key = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_key(), deterministic, target);
  }

  // optional .mozc.commands.SessionCommand command = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_command(), deterministic, target);
  }

  // optional .mozc.config.Config config = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_config(), deterministic, target);
  }

  // optional .mozc.commands.Context context = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_context(), deterministic, target);
  }

  // optional .mozc.commands.Capability capability = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_capability(), deterministic, target);
  }

  // optional .mozc.commands.ApplicationInfo application_info = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_application_info(), deterministic, target);
  }

  // optional .mozc.commands.Request request = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_request(), deterministic, target);
  }

  // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_storage_entry(), deterministic, target);
  }

  // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->touch_events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->touch_events(static_cast<int>(i)), deterministic, target);
  }

  // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_user_dictionary_command(), deterministic, target);
  }

  // optional bool request_suggestion = 14 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->request_suggestion(), target);
  }

  // optional .mozc.EngineReloadRequest engine_reload_request = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_engine_reload_request(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Input)
  return target;
}

size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Input)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .mozc.commands.Input.CommandType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->touch_events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->touch_events(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .mozc.commands.KeyEvent key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *key_);
    }

    // optional .mozc.commands.SessionCommand command = 4;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_);
    }

    // optional .mozc.config.Config config = 5;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *config_);
    }

    // optional .mozc.commands.Context context = 6;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *context_);
    }

    // optional .mozc.commands.Capability capability = 7;
    if (has_capability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *capability_);
    }

    // optional .mozc.commands.ApplicationInfo application_info = 8;
    if (has_application_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *application_info_);
    }

    // optional .mozc.commands.Request request = 9;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_);
    }

    // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
    if (has_storage_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *storage_entry_);
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
    if (has_user_dictionary_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_dictionary_command_);
    }

    // optional .mozc.EngineReloadRequest engine_reload_request = 15;
    if (has_engine_reload_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *engine_reload_request_);
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // optional bool request_suggestion = 14 [default = true];
  if (has_request_suggestion()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Input)
  GOOGLE_DCHECK_NE(&from, this);
  const Input* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Input>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Input)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Input)
    MergeFrom(*source);
  }
}

void Input::MergeFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  touch_events_.MergeFrom(from.touch_events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_key()->::mozc::commands::KeyEvent::MergeFrom(from.key());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_command()->::mozc::commands::SessionCommand::MergeFrom(from.command());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_config()->::mozc::config::Config::MergeFrom(from.config());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_context()->::mozc::commands::Context::MergeFrom(from.context());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_capability()->::mozc::commands::Capability::MergeFrom(from.capability());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_application_info()->::mozc::commands::ApplicationInfo::MergeFrom(from.application_info());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_request()->::mozc::commands::Request::MergeFrom(from.request());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_storage_entry()->::mozc::commands::GenericStorageEntry::MergeFrom(from.storage_entry());
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_user_dictionary_command()->::mozc::user_dictionary::UserDictionaryCommand::MergeFrom(from.user_dictionary_command());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_engine_reload_request()->::mozc::EngineReloadRequest::MergeFrom(from.engine_reload_request());
    }
    if (cached_has_bits & 0x00000400u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000800u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00001000u) {
      request_suggestion_ = from.request_suggestion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Input::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000800) != 0x00000800) return false;
  if (has_command()) {
    if (!this->command_->IsInitialized()) return false;
  }
  if (has_user_dictionary_command()) {
    if (!this->user_dictionary_command_->IsInitialized()) return false;
  }
  if (has_engine_reload_request()) {
    if (!this->engine_reload_request_->IsInitialized()) return false;
  }
  return true;
}

void Input::Swap(Input* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Input::InternalSwap(Input* other) {
  using std::swap;
  CastToBase(&touch_events_)->InternalSwap(CastToBase(&other->touch_events_));
  swap(key_, other->key_);
  swap(command_, other->command_);
  swap(config_, other->config_);
  swap(context_, other->context_);
  swap(capability_, other->capability_);
  swap(application_info_, other->application_info_);
  swap(request_, other->request_);
  swap(storage_entry_, other->storage_entry_);
  swap(user_dictionary_command_, other->user_dictionary_command_);
  swap(engine_reload_request_, other->engine_reload_request_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(request_suggestion_, other->request_suggestion_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Input::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Result::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Result::kTypeFieldNumber;
const int Result::kValueFieldNumber;
const int Result::kKeyFieldNumber;
const int Result::kCursorOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Result::Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_Result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Result)
}
Result::Result(const Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&cursor_offset_) -
    reinterpret_cast<char*>(&type_)) + sizeof(cursor_offset_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Result)
}

void Result::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cursor_offset_) -
      reinterpret_cast<char*>(&type_)) + sizeof(cursor_offset_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:mozc.commands.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Result& Result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_Result.base);
  return *internal_default_instance();
}


void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cursor_offset_) -
        reinterpret_cast<char*>(&type_)) + sizeof(cursor_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.commands.Result.ResultType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Result_ResultType_IsValid(value)) {
            set_type(static_cast< ::mozc::commands::Result_ResultType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Result.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Result.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cursor_offset = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cursor_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cursor_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.commands.Result.ResultType type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Result.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional string key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Result.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->key(), output);
  }

  // optional int32 cursor_offset = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cursor_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Result)
}

::google::protobuf::uint8* Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.commands.Result.ResultType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Result.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional string key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Result.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  // optional int32 cursor_offset = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cursor_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Result)
  return target;
}

size_t Result::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.commands.Result)
  size_t total_size = 0;

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  if (has_type()) {
    // required .mozc.commands.Result.ResultType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

    // required .mozc.commands.Result.ResultType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string key = 3;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional int32 cursor_offset = 4 [default = 0];
  if (has_cursor_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cursor_offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const Result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      cursor_offset_ = from.cursor_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void Result::Swap(Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Result::InternalSwap(Result* other) {
  using std::swap;
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(cursor_offset_, other->cursor_offset_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Preedit_Segment::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Preedit_Segment::kAnnotationFieldNumber;
const int Preedit_Segment::kValueFieldNumber;
const int Preedit_Segment::kValueLengthFieldNumber;
const int Preedit_Segment::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Preedit_Segment::Preedit_Segment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_Preedit_Segment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Preedit.Segment)
}
Preedit_Segment::Preedit_Segment(const Preedit_Segment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&annotation_, &from.annotation_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_length_) -
    reinterpret_cast<char*>(&annotation_)) + sizeof(value_length_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Preedit.Segment)
}

void Preedit_Segment::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&annotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_length_) -
      reinterpret_cast<char*>(&annotation_)) + sizeof(value_length_));
}

Preedit_Segment::~Preedit_Segment() {
  // @@protoc_insertion_point(destructor:mozc.commands.Preedit.Segment)
  SharedDtor();
}

void Preedit_Segment::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Preedit_Segment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Preedit_Segment::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Preedit_Segment& Preedit_Segment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_Preedit_Segment.base);
  return *internal_default_instance();
}


void Preedit_Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Preedit.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&annotation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_length_) -
        reinterpret_cast<char*>(&annotation_)) + sizeof(value_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Preedit_Segment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Preedit.Segment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Preedit_Segment_Annotation_IsValid(value)) {
            set_annotation(static_cast< ::mozc::commands::Preedit_Segment_Annotation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Preedit.Segment.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 value_length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_value_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Preedit.Segment.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Preedit.Segment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Preedit.Segment)
  return false;
#undef DO_
}

void Preedit_Segment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Preedit.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->annotation(), output);
  }

  // required string value = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Preedit.Segment.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->value(), output);
  }

  // required uint32 value_length = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->value_length(), output);
  }

  // optional string key = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Preedit.Segment.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Preedit.Segment)
}

::google::protobuf::uint8* Preedit_Segment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Preedit.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->annotation(), target);
  }

  // required string value = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Preedit.Segment.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  // required uint32 value_length = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->value_length(), target);
  }

  // optional string key = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Preedit.Segment.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Preedit.Segment)
  return target;
}

size_t Preedit_Segment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.commands.Preedit.Segment)
  size_t total_size = 0;

  if (has_value()) {
    // required string value = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  if (has_annotation()) {
    // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->annotation());
  }

  if (has_value_length()) {
    // required uint32 value_length = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value_length());
  }

  return total_size;
}
size_t Preedit_Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Preedit.Segment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string value = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

    // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->annotation());

    // required uint32 value_length = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string key = 6;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Preedit_Segment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Preedit.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  const Preedit_Segment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Preedit_Segment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Preedit.Segment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Preedit.Segment)
    MergeFrom(*source);
  }
}

void Preedit_Segment::MergeFrom(const Preedit_Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Preedit.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000004u) {
      annotation_ = from.annotation_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_length_ = from.value_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Preedit_Segment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Preedit.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Preedit_Segment::CopyFrom(const Preedit_Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Preedit.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preedit_Segment::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  return true;
}

void Preedit_Segment::Swap(Preedit_Segment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Preedit_Segment::InternalSwap(Preedit_Segment* other) {
  using std::swap;
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(annotation_, other->annotation_);
  swap(value_length_, other->value_length_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Preedit_Segment::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Preedit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Preedit::kCursorFieldNumber;
const int Preedit::kSegmentFieldNumber;
const int Preedit::kHighlightedPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Preedit::Preedit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_Preedit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Preedit)
}
Preedit::Preedit(const Preedit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      segment_(from.segment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cursor_, &from.cursor_,
    static_cast<size_t>(reinterpret_cast<char*>(&highlighted_position_) -
    reinterpret_cast<char*>(&cursor_)) + sizeof(highlighted_position_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Preedit)
}

void Preedit::SharedCtor() {
  ::memset(&cursor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&highlighted_position_) -
      reinterpret_cast<char*>(&cursor_)) + sizeof(highlighted_position_));
}

Preedit::~Preedit() {
  // @@protoc_insertion_point(destructor:mozc.commands.Preedit)
  SharedDtor();
}

void Preedit::SharedDtor() {
}

void Preedit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Preedit::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Preedit& Preedit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_Preedit.base);
  return *internal_default_instance();
}


void Preedit::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Preedit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&cursor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&highlighted_position_) -
        reinterpret_cast<char*>(&cursor_)) + sizeof(highlighted_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Preedit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Preedit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cursor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cursor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cursor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Segment = 2 { ... };
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(19u /* 19 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(2, input, add_segment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 highlighted_position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_highlighted_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highlighted_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Preedit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Preedit)
  return false;
#undef DO_
}

void Preedit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Preedit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cursor = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cursor(), output);
  }

  // repeated group Segment = 2 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segment_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      2,
      this->segment(static_cast<int>(i)),
      output);
  }

  // optional uint32 highlighted_position = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->highlighted_position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Preedit)
}

::google::protobuf::uint8* Preedit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Preedit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cursor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cursor(), target);
  }

  // repeated group Segment = 2 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segment_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        2, this->segment(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 highlighted_position = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->highlighted_position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Preedit)
  return target;
}

size_t Preedit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Preedit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 cursor = 1;
  if (has_cursor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cursor());
  }
  // repeated group Segment = 2 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->segment_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->segment(static_cast<int>(i)));
    }
  }

  // optional uint32 highlighted_position = 3;
  if (has_highlighted_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->highlighted_position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Preedit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Preedit)
  GOOGLE_DCHECK_NE(&from, this);
  const Preedit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Preedit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Preedit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Preedit)
    MergeFrom(*source);
  }
}

void Preedit::MergeFrom(const Preedit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Preedit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segment_.MergeFrom(from.segment_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      cursor_ = from.cursor_;
    }
    if (cached_has_bits & 0x00000002u) {
      highlighted_position_ = from.highlighted_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Preedit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Preedit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Preedit::CopyFrom(const Preedit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Preedit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preedit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->segment())) return false;
  return true;
}

void Preedit::Swap(Preedit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Preedit::InternalSwap(Preedit* other) {
  using std::swap;
  CastToBase(&segment_)->InternalSwap(CastToBase(&other->segment_));
  swap(cursor_, other->cursor_);
  swap(highlighted_position_, other->highlighted_position_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Preedit::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Status::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kActivatedFieldNumber;
const int Status::kModeFieldNumber;
const int Status::kComebackModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_Status.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Status)
}
Status::Status(const Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&activated_, &from.activated_,
    static_cast<size_t>(reinterpret_cast<char*>(&comeback_mode_) -
    reinterpret_cast<char*>(&activated_)) + sizeof(comeback_mode_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Status)
}

void Status::SharedCtor() {
  ::memset(&activated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&comeback_mode_) -
      reinterpret_cast<char*>(&activated_)) + sizeof(comeback_mode_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:mozc.commands.Status)
  SharedDtor();
}

void Status::SharedDtor() {
}

void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Status& Status::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_Status.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&activated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&comeback_mode_) -
        reinterpret_cast<char*>(&activated_)) + sizeof(comeback_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Status)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool activated = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_activated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.CompositionMode mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::CompositionMode_IsValid(value)) {
            set_mode(static_cast< ::mozc::commands::CompositionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.CompositionMode comeback_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::CompositionMode_IsValid(value)) {
            set_comeback_mode(static_cast< ::mozc::commands::CompositionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool activated = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->activated(), output);
  }

  // optional .mozc.commands.CompositionMode mode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // optional .mozc.commands.CompositionMode comeback_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->comeback_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool activated = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->activated(), target);
  }

  // optional .mozc.commands.CompositionMode mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // optional .mozc.commands.CompositionMode comeback_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->comeback_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Status)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool activated = 1;
    if (has_activated()) {
      total_size += 1 + 1;
    }

    // optional .mozc.commands.CompositionMode mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional .mozc.commands.CompositionMode comeback_mode = 3;
    if (has_comeback_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->comeback_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      activated_ = from.activated_;
    }
    if (cached_has_bits & 0x00000002u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      comeback_mode_ = from.comeback_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  using std::swap;
  swap(activated_, other->activated_);
  swap(mode_, other->mode_);
  swap(comeback_mode_, other->comeback_mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeletionRange::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeletionRange::kOffsetFieldNumber;
const int DeletionRange::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeletionRange::DeletionRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_DeletionRange.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.DeletionRange)
}
DeletionRange::DeletionRange(const DeletionRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.DeletionRange)
}

void DeletionRange::SharedCtor() {
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
}

DeletionRange::~DeletionRange() {
  // @@protoc_insertion_point(destructor:mozc.commands.DeletionRange)
  SharedDtor();
}

void DeletionRange::SharedDtor() {
}

void DeletionRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeletionRange::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeletionRange& DeletionRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_DeletionRange.base);
  return *internal_default_instance();
}


void DeletionRange::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.DeletionRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_) -
        reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeletionRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.DeletionRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.DeletionRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.DeletionRange)
  return false;
#undef DO_
}

void DeletionRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.DeletionRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 offset = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // optional int32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.DeletionRange)
}

::google::protobuf::uint8* DeletionRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.DeletionRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 offset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // optional int32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.DeletionRange)
  return target;
}

size_t DeletionRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.DeletionRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletionRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.DeletionRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletionRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeletionRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.DeletionRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.DeletionRange)
    MergeFrom(*source);
  }
}

void DeletionRange::MergeFrom(const DeletionRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.DeletionRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeletionRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.DeletionRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletionRange::CopyFrom(const DeletionRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.DeletionRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletionRange::IsInitialized() const {
  return true;
}

void DeletionRange::Swap(DeletionRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeletionRange::InternalSwap(DeletionRange* other) {
  using std::swap;
  swap(offset_, other->offset_);
  swap(length_, other->length_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeletionRange::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Output_Callback::InitAsDefaultInstance() {
  ::mozc::commands::_Output_Callback_default_instance_._instance.get_mutable()->session_command_ = const_cast< ::mozc::commands::SessionCommand*>(
      ::mozc::commands::SessionCommand::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Output_Callback::kSessionCommandFieldNumber;
const int Output_Callback::kDelayMillisecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Output_Callback::Output_Callback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_Output_Callback.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Output.Callback)
}
Output_Callback::Output_Callback(const Output_Callback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_session_command()) {
    session_command_ = new ::mozc::commands::SessionCommand(*from.session_command_);
  } else {
    session_command_ = NULL;
  }
  delay_millisec_ = from.delay_millisec_;
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Output.Callback)
}

void Output_Callback::SharedCtor() {
  ::memset(&session_command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_millisec_) -
      reinterpret_cast<char*>(&session_command_)) + sizeof(delay_millisec_));
}

Output_Callback::~Output_Callback() {
  // @@protoc_insertion_point(destructor:mozc.commands.Output.Callback)
  SharedDtor();
}

void Output_Callback::SharedDtor() {
  if (this != internal_default_instance()) delete session_command_;
}

void Output_Callback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Output_Callback::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Output_Callback& Output_Callback::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_Output_Callback.base);
  return *internal_default_instance();
}


void Output_Callback::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Output.Callback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(session_command_ != NULL);
    session_command_->Clear();
  }
  delay_millisec_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Output_Callback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Output.Callback)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.commands.SessionCommand session_command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_session_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 delay_millisec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_delay_millisec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_millisec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Output.Callback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Output.Callback)
  return false;
#undef DO_
}

void Output_Callback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Output.Callback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mozc.commands.SessionCommand session_command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_session_command(), output);
  }

  // optional uint32 delay_millisec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->delay_millisec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Output.Callback)
}

::google::protobuf::uint8* Output_Callback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Output.Callback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mozc.commands.SessionCommand session_command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_session_command(), deterministic, target);
  }

  // optional uint32 delay_millisec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->delay_millisec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Output.Callback)
  return target;
}

size_t Output_Callback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Output.Callback)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .mozc.commands.SessionCommand session_command = 1;
    if (has_session_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *session_command_);
    }

    // optional uint32 delay_millisec = 2;
    if (has_delay_millisec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_millisec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Output_Callback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Output.Callback)
  GOOGLE_DCHECK_NE(&from, this);
  const Output_Callback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Output_Callback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Output.Callback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Output.Callback)
    MergeFrom(*source);
  }
}

void Output_Callback::MergeFrom(const Output_Callback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Output.Callback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_session_command()->::mozc::commands::SessionCommand::MergeFrom(from.session_command());
    }
    if (cached_has_bits & 0x00000002u) {
      delay_millisec_ = from.delay_millisec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Output_Callback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Output.Callback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Output_Callback::CopyFrom(const Output_Callback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Output.Callback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output_Callback::IsInitialized() const {
  if (has_session_command()) {
    if (!this->session_command_->IsInitialized()) return false;
  }
  return true;
}

void Output_Callback::Swap(Output_Callback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Output_Callback::InternalSwap(Output_Callback* other) {
  using std::swap;
  swap(session_command_, other->session_command_);
  swap(delay_millisec_, other->delay_millisec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Output_Callback::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Output::InitAsDefaultInstance() {
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->result_ = const_cast< ::mozc::commands::Result*>(
      ::mozc::commands::Result::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->preedit_ = const_cast< ::mozc::commands::Preedit*>(
      ::mozc::commands::Preedit::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->candidates_ = const_cast< ::mozc::commands::Candidates*>(
      ::mozc::commands::Candidates::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->key_ = const_cast< ::mozc::commands::KeyEvent*>(
      ::mozc::commands::KeyEvent::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->config_ = const_cast< ::mozc::config::Config*>(
      ::mozc::config::Config::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->status_ = const_cast< ::mozc::commands::Status*>(
      ::mozc::commands::Status::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->all_candidate_words_ = const_cast< ::mozc::commands::CandidateList*>(
      ::mozc::commands::CandidateList::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->deletion_range_ = const_cast< ::mozc::commands::DeletionRange*>(
      ::mozc::commands::DeletionRange::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->callback_ = const_cast< ::mozc::commands::Output_Callback*>(
      ::mozc::commands::Output_Callback::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->storage_entry_ = const_cast< ::mozc::commands::GenericStorageEntry*>(
      ::mozc::commands::GenericStorageEntry::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->user_dictionary_command_status_ = const_cast< ::mozc::user_dictionary::UserDictionaryCommandStatus*>(
      ::mozc::user_dictionary::UserDictionaryCommandStatus::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->engine_reload_response_ = const_cast< ::mozc::EngineReloadResponse*>(
      ::mozc::EngineReloadResponse::internal_default_instance());
}
void Output::clear_candidates() {
  if (candidates_ != NULL) candidates_->Clear();
  clear_has_candidates();
}
void Output::clear_config() {
  if (config_ != NULL) config_->Clear();
  clear_has_config();
}
void Output::clear_all_candidate_words() {
  if (all_candidate_words_ != NULL) all_candidate_words_->Clear();
  clear_has_all_candidate_words();
}
void Output::clear_user_dictionary_command_status() {
  if (user_dictionary_command_status_ != NULL) user_dictionary_command_status_->Clear();
  clear_has_user_dictionary_command_status();
}
void Output::clear_engine_reload_response() {
  if (engine_reload_response_ != NULL) engine_reload_response_->Clear();
  clear_has_engine_reload_response();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Output::kIdFieldNumber;
const int Output::kModeFieldNumber;
const int Output::kConsumedFieldNumber;
const int Output::kResultFieldNumber;
const int Output::kPreeditFieldNumber;
const int Output::kCandidatesFieldNumber;
const int Output::kKeyFieldNumber;
const int Output::kUrlFieldNumber;
const int Output::kConfigFieldNumber;
const int Output::kPreeditMethodFieldNumber;
const int Output::kErrorCodeFieldNumber;
const int Output::kStatusFieldNumber;
const int Output::kAllCandidateWordsFieldNumber;
const int Output::kDeletionRangeFieldNumber;
const int Output::kLaunchToolModeFieldNumber;
const int Output::kCallbackFieldNumber;
const int Output::kStorageEntryFieldNumber;
const int Output::kUserDictionaryCommandStatusFieldNumber;
const int Output::kEngineReloadResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Output::Output()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_Output.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Output)
}
Output::Output(const Output& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_result()) {
    result_ = new ::mozc::commands::Result(*from.result_);
  } else {
    result_ = NULL;
  }
  if (from.has_preedit()) {
    preedit_ = new ::mozc::commands::Preedit(*from.preedit_);
  } else {
    preedit_ = NULL;
  }
  if (from.has_candidates()) {
    candidates_ = new ::mozc::commands::Candidates(*from.candidates_);
  } else {
    candidates_ = NULL;
  }
  if (from.has_key()) {
    key_ = new ::mozc::commands::KeyEvent(*from.key_);
  } else {
    key_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::mozc::config::Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::mozc::commands::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  if (from.has_all_candidate_words()) {
    all_candidate_words_ = new ::mozc::commands::CandidateList(*from.all_candidate_words_);
  } else {
    all_candidate_words_ = NULL;
  }
  if (from.has_deletion_range()) {
    deletion_range_ = new ::mozc::commands::DeletionRange(*from.deletion_range_);
  } else {
    deletion_range_ = NULL;
  }
  if (from.has_callback()) {
    callback_ = new ::mozc::commands::Output_Callback(*from.callback_);
  } else {
    callback_ = NULL;
  }
  if (from.has_storage_entry()) {
    storage_entry_ = new ::mozc::commands::GenericStorageEntry(*from.storage_entry_);
  } else {
    storage_entry_ = NULL;
  }
  if (from.has_user_dictionary_command_status()) {
    user_dictionary_command_status_ = new ::mozc::user_dictionary::UserDictionaryCommandStatus(*from.user_dictionary_command_status_);
  } else {
    user_dictionary_command_status_ = NULL;
  }
  if (from.has_engine_reload_response()) {
    engine_reload_response_ = new ::mozc::EngineReloadResponse(*from.engine_reload_response_);
  } else {
    engine_reload_response_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&launch_tool_mode_) -
    reinterpret_cast<char*>(&id_)) + sizeof(launch_tool_mode_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Output)
}

void Output::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&launch_tool_mode_) -
      reinterpret_cast<char*>(&result_)) + sizeof(launch_tool_mode_));
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:mozc.commands.Output)
  SharedDtor();
}

void Output::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete preedit_;
  if (this != internal_default_instance()) delete candidates_;
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete all_candidate_words_;
  if (this != internal_default_instance()) delete deletion_range_;
  if (this != internal_default_instance()) delete callback_;
  if (this != internal_default_instance()) delete storage_entry_;
  if (this != internal_default_instance()) delete user_dictionary_command_status_;
  if (this != internal_default_instance()) delete engine_reload_response_;
}

void Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Output::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Output& Output::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_Output.base);
  return *internal_default_instance();
}


void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(result_ != NULL);
      result_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(preedit_ != NULL);
      preedit_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(candidates_ != NULL);
      candidates_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(key_ != NULL);
      key_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(config_ != NULL);
      config_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(status_ != NULL);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(all_candidate_words_ != NULL);
      all_candidate_words_->Clear();
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(deletion_range_ != NULL);
      deletion_range_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(callback_ != NULL);
      callback_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(storage_entry_ != NULL);
      storage_entry_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(user_dictionary_command_status_ != NULL);
      user_dictionary_command_status_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(engine_reload_response_ != NULL);
      engine_reload_response_->Clear();
    }
  }
  if (cached_has_bits & 57344u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&consumed_) -
        reinterpret_cast<char*>(&id_)) + sizeof(consumed_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&preedit_method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&launch_tool_mode_) -
        reinterpret_cast<char*>(&preedit_method_)) + sizeof(launch_tool_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Output)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.CompositionMode mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::CompositionMode_IsValid(value)) {
            set_mode(static_cast< ::mozc::commands::CompositionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool consumed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_consumed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &consumed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Result result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Preedit preedit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_preedit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Candidates candidates = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_candidates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.KeyEvent key = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Output.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.config.Config config = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Output_PreeditMethod_IsValid(value)) {
            set_preedit_method(static_cast< ::mozc::commands::Output_PreeditMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Output_ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::mozc::commands::Output_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Status status = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.CandidateList all_candidate_words = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_all_candidate_words()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.DeletionRange deletion_range = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deletion_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Output_ToolMode_IsValid(value)) {
            set_launch_tool_mode(static_cast< ::mozc::commands::Output_ToolMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                17, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Output.Callback callback = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_callback()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_storage_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_dictionary_command_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.EngineReloadResponse engine_reload_response = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_engine_reload_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Output)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Output)
  return false;
#undef DO_
}

void Output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .mozc.commands.CompositionMode mode = 2;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // optional bool consumed = 3;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->consumed(), output);
  }

  // optional .mozc.commands.Result result = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_result(), output);
  }

  // optional .mozc.commands.Preedit preedit = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_preedit(), output);
  }

  // optional .mozc.commands.Candidates candidates = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_candidates(), output);
  }

  // optional .mozc.commands.KeyEvent key = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_key(), output);
  }

  // optional string url = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Output.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->url(), output);
  }

  // optional .mozc.config.Config config = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_config(), output);
  }

  // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->preedit_method(), output);
  }

  // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->error_code(), output);
  }

  // optional .mozc.commands.Status status = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_status(), output);
  }

  // optional .mozc.commands.CandidateList all_candidate_words = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_all_candidate_words(), output);
  }

  // optional .mozc.commands.DeletionRange deletion_range = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_deletion_range(), output);
  }

  // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->launch_tool_mode(), output);
  }

  // optional .mozc.commands.Output.Callback callback = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_callback(), output);
  }

  // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_storage_entry(), output);
  }

  // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_user_dictionary_command_status(), output);
  }

  // optional .mozc.EngineReloadResponse engine_reload_response = 22;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_engine_reload_response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Output)
}

::google::protobuf::uint8* Output::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .mozc.commands.CompositionMode mode = 2;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // optional bool consumed = 3;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->consumed(), target);
  }

  // optional .mozc.commands.Result result = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_result(), deterministic, target);
  }

  // optional .mozc.commands.Preedit preedit = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_preedit(), deterministic, target);
  }

  // optional .mozc.commands.Candidates candidates = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_candidates(), deterministic, target);
  }

  // optional .mozc.commands.KeyEvent key = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_key(), deterministic, target);
  }

  // optional string url = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Output.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->url(), target);
  }

  // optional .mozc.config.Config config = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_config(), deterministic, target);
  }

  // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->preedit_method(), target);
  }

  // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->error_code(), target);
  }

  // optional .mozc.commands.Status status = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_status(), deterministic, target);
  }

  // optional .mozc.commands.CandidateList all_candidate_words = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_all_candidate_words(), deterministic, target);
  }

  // optional .mozc.commands.DeletionRange deletion_range = 16;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_deletion_range(), deterministic, target);
  }

  // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->launch_tool_mode(), target);
  }

  // optional .mozc.commands.Output.Callback callback = 18;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_callback(), deterministic, target);
  }

  // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_storage_entry(), deterministic, target);
  }

  // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_user_dictionary_command_status(), deterministic, target);
  }

  // optional .mozc.EngineReloadResponse engine_reload_response = 22;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_engine_reload_response(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Output)
  return target;
}

size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Output)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string url = 8;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional .mozc.commands.Result result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *result_);
    }

    // optional .mozc.commands.Preedit preedit = 5;
    if (has_preedit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *preedit_);
    }

    // optional .mozc.commands.Candidates candidates = 6;
    if (has_candidates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *candidates_);
    }

    // optional .mozc.commands.KeyEvent key = 7;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *key_);
    }

    // optional .mozc.config.Config config = 9;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *config_);
    }

    // optional .mozc.commands.Status status = 13;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .mozc.commands.CandidateList all_candidate_words = 14;
    if (has_all_candidate_words()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *all_candidate_words_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .mozc.commands.DeletionRange deletion_range = 16;
    if (has_deletion_range()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *deletion_range_);
    }

    // optional .mozc.commands.Output.Callback callback = 18;
    if (has_callback()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *callback_);
    }

    // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
    if (has_storage_entry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *storage_entry_);
    }

    // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
    if (has_user_dictionary_command_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_dictionary_command_status_);
    }

    // optional .mozc.EngineReloadResponse engine_reload_response = 22;
    if (has_engine_reload_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *engine_reload_response_);
    }

    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .mozc.commands.CompositionMode mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional bool consumed = 3;
    if (has_consumed()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
    if (has_preedit_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->preedit_method());
    }

    // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
    if (has_launch_tool_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->launch_tool_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Output::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Output)
  GOOGLE_DCHECK_NE(&from, this);
  const Output* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Output>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Output)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Output)
    MergeFrom(*source);
  }
}

void Output::MergeFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_result()->::mozc::commands::Result::MergeFrom(from.result());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_preedit()->::mozc::commands::Preedit::MergeFrom(from.preedit());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_candidates()->::mozc::commands::Candidates::MergeFrom(from.candidates());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_key()->::mozc::commands::KeyEvent::MergeFrom(from.key());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_config()->::mozc::config::Config::MergeFrom(from.config());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_status()->::mozc::commands::Status::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_all_candidate_words()->::mozc::commands::CandidateList::MergeFrom(from.all_candidate_words());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_deletion_range()->::mozc::commands::DeletionRange::MergeFrom(from.deletion_range());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_callback()->::mozc::commands::Output_Callback::MergeFrom(from.callback());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_storage_entry()->::mozc::commands::GenericStorageEntry::MergeFrom(from.storage_entry());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_user_dictionary_command_status()->::mozc::user_dictionary::UserDictionaryCommandStatus::MergeFrom(from.user_dictionary_command_status());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_engine_reload_response()->::mozc::EngineReloadResponse::MergeFrom(from.engine_reload_response());
    }
    if (cached_has_bits & 0x00002000u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00004000u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00008000u) {
      consumed_ = from.consumed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      preedit_method_ = from.preedit_method_;
    }
    if (cached_has_bits & 0x00020000u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00040000u) {
      launch_tool_mode_ = from.launch_tool_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Output::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  if (has_result()) {
    if (!this->result_->IsInitialized()) return false;
  }
  if (has_preedit()) {
    if (!this->preedit_->IsInitialized()) return false;
  }
  if (has_candidates()) {
    if (!this->candidates_->IsInitialized()) return false;
  }
  if (has_callback()) {
    if (!this->callback_->IsInitialized()) return false;
  }
  if (has_user_dictionary_command_status()) {
    if (!this->user_dictionary_command_status_->IsInitialized()) return false;
  }
  if (has_engine_reload_response()) {
    if (!this->engine_reload_response_->IsInitialized()) return false;
  }
  return true;
}

void Output::Swap(Output* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Output::InternalSwap(Output* other) {
  using std::swap;
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
  swap(preedit_, other->preedit_);
  swap(candidates_, other->candidates_);
  swap(key_, other->key_);
  swap(config_, other->config_);
  swap(status_, other->status_);
  swap(all_candidate_words_, other->all_candidate_words_);
  swap(deletion_range_, other->deletion_range_);
  swap(callback_, other->callback_);
  swap(storage_entry_, other->storage_entry_);
  swap(user_dictionary_command_status_, other->user_dictionary_command_status_);
  swap(engine_reload_response_, other->engine_reload_response_);
  swap(id_, other->id_);
  swap(mode_, other->mode_);
  swap(consumed_, other->consumed_);
  swap(preedit_method_, other->preedit_method_);
  swap(error_code_, other->error_code_);
  swap(launch_tool_mode_, other->launch_tool_mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Output::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Command::InitAsDefaultInstance() {
  ::mozc::commands::_Command_default_instance_._instance.get_mutable()->input_ = const_cast< ::mozc::commands::Input*>(
      ::mozc::commands::Input::internal_default_instance());
  ::mozc::commands::_Command_default_instance_._instance.get_mutable()->output_ = const_cast< ::mozc::commands::Output*>(
      ::mozc::commands::Output::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kInputFieldNumber;
const int Command::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_Command.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_input()) {
    input_ = new ::mozc::commands::Input(*from.input_);
  } else {
    input_ = NULL;
  }
  if (from.has_output()) {
    output_ = new ::mozc::commands::Output(*from.output_);
  } else {
    output_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Command)
}

void Command::SharedCtor() {
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&input_)) + sizeof(output_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:mozc.commands.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete output_;
}

void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Command& Command::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_Command.base);
  return *internal_default_instance();
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(input_ != NULL);
      input_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(output_ != NULL);
      output_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Command)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.commands.Input input = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mozc.commands.Output output = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.commands.Input input = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_input(), output);
  }

  // required .mozc.commands.Output output = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.commands.Input input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_input(), deterministic, target);
  }

  // required .mozc.commands.Output output = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_output(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Command)
  return target;
}

size_t Command::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.commands.Command)
  size_t total_size = 0;

  if (has_input()) {
    // required .mozc.commands.Input input = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *input_);
  }

  if (has_output()) {
    // required .mozc.commands.Output output = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *output_);
  }

  return total_size;
}
size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .mozc.commands.Input input = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *input_);

    // required .mozc.commands.Output output = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *output_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_input()->::mozc::commands::Input::MergeFrom(from.input());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_output()->::mozc::commands::Output::MergeFrom(from.output());
    }
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_input()) {
    if (!this->input_->IsInitialized()) return false;
  }
  if (has_output()) {
    if (!this->output_->IsInitialized()) return false;
  }
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  using std::swap;
  swap(input_, other->input_);
  swap(output_, other->output_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommandList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommandList::kCommandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommandList::CommandList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcommands_2eproto::scc_info_CommandList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.CommandList)
}
CommandList::CommandList(const CommandList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.CommandList)
}

void CommandList::SharedCtor() {
}

CommandList::~CommandList() {
  // @@protoc_insertion_point(destructor:mozc.commands.CommandList)
  SharedDtor();
}

void CommandList::SharedDtor() {
}

void CommandList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommandList::descriptor() {
  ::protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommandList& CommandList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcommands_2eproto::scc_info_CommandList.base);
  return *internal_default_instance();
}


void CommandList::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.CommandList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommandList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.CommandList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mozc.commands.Command commands = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_commands()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.CommandList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.CommandList)
  return false;
#undef DO_
}

void CommandList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.CommandList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mozc.commands.Command commands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->commands_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->commands(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.CommandList)
}

::google::protobuf::uint8* CommandList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.CommandList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mozc.commands.Command commands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->commands_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->commands(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.CommandList)
  return target;
}

size_t CommandList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.CommandList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mozc.commands.Command commands = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->commands_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->commands(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.CommandList)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommandList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.CommandList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.CommandList)
    MergeFrom(*source);
  }
}

void CommandList::MergeFrom(const CommandList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.CommandList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
}

void CommandList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.CommandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandList::CopyFrom(const CommandList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.CommandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->commands())) return false;
  return true;
}

void CommandList::Swap(CommandList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommandList::InternalSwap(CommandList* other) {
  using std::swap;
  CastToBase(&commands_)->InternalSwap(CastToBase(&other->commands_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommandList::GetMetadata() const {
  protobuf_protocol_2fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commands
}  // namespace mozc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::KeyEvent_ProbableKeyEvent* Arena::CreateMaybeMessage< ::mozc::commands::KeyEvent_ProbableKeyEvent >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::KeyEvent_ProbableKeyEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::KeyEvent* Arena::CreateMaybeMessage< ::mozc::commands::KeyEvent >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::KeyEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::GenericStorageEntry* Arena::CreateMaybeMessage< ::mozc::commands::GenericStorageEntry >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::GenericStorageEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::SessionCommand* Arena::CreateMaybeMessage< ::mozc::commands::SessionCommand >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::SessionCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Context* Arena::CreateMaybeMessage< ::mozc::commands::Context >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Context >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Capability* Arena::CreateMaybeMessage< ::mozc::commands::Capability >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Capability >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Request* Arena::CreateMaybeMessage< ::mozc::commands::Request >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::ApplicationInfo* Arena::CreateMaybeMessage< ::mozc::commands::ApplicationInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::ApplicationInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Input_TouchPosition* Arena::CreateMaybeMessage< ::mozc::commands::Input_TouchPosition >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Input_TouchPosition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Input_TouchEvent* Arena::CreateMaybeMessage< ::mozc::commands::Input_TouchEvent >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Input_TouchEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Input* Arena::CreateMaybeMessage< ::mozc::commands::Input >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Input >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Result* Arena::CreateMaybeMessage< ::mozc::commands::Result >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Preedit_Segment* Arena::CreateMaybeMessage< ::mozc::commands::Preedit_Segment >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Preedit_Segment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Preedit* Arena::CreateMaybeMessage< ::mozc::commands::Preedit >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Preedit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Status* Arena::CreateMaybeMessage< ::mozc::commands::Status >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Status >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::DeletionRange* Arena::CreateMaybeMessage< ::mozc::commands::DeletionRange >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::DeletionRange >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Output_Callback* Arena::CreateMaybeMessage< ::mozc::commands::Output_Callback >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Output_Callback >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Output* Arena::CreateMaybeMessage< ::mozc::commands::Output >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Output >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Command* Arena::CreateMaybeMessage< ::mozc::commands::Command >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Command >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::CommandList* Arena::CreateMaybeMessage< ::mozc::commands::CommandList >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::CommandList >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
