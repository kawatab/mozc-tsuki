// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/config.proto

#include "protocol/config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protocol_2fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Config_CharacterFormRule;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Config_InformationListConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GeneralConfig;
}  // namespace protobuf_protocol_2fconfig_2eproto
namespace mozc {
namespace config {
class GeneralConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeneralConfig>
      _instance;
} _GeneralConfig_default_instance_;
class Config_CharacterFormRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Config_CharacterFormRule>
      _instance;
} _Config_CharacterFormRule_default_instance_;
class Config_InformationListConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Config_InformationListConfig>
      _instance;
} _Config_InformationListConfig_default_instance_;
class ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Config>
      _instance;
} _Config_default_instance_;
}  // namespace config
}  // namespace mozc
namespace protobuf_protocol_2fconfig_2eproto {
static void InitDefaultsGeneralConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.DefaultConstruct();
  *::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.get_mutable() = ::std::string("0.0.0.0", 7);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.get_mutable());
  {
    void* ptr = &::mozc::config::_GeneralConfig_default_instance_;
    new (ptr) ::mozc::config::GeneralConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::config::GeneralConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GeneralConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGeneralConfig}, {}};

static void InitDefaultsConfig_CharacterFormRule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::config::_Config_CharacterFormRule_default_instance_;
    new (ptr) ::mozc::config::Config_CharacterFormRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::config::Config_CharacterFormRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Config_CharacterFormRule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfig_CharacterFormRule}, {}};

static void InitDefaultsConfig_InformationListConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::config::_Config_InformationListConfig_default_instance_;
    new (ptr) ::mozc::config::Config_InformationListConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::config::Config_InformationListConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Config_InformationListConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfig_InformationListConfig}, {}};

static void InitDefaultsConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::config::_Config_default_instance_;
    new (ptr) ::mozc::config::Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::config::Config::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Config =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsConfig}, {
      &protobuf_protocol_2fconfig_2eproto::scc_info_GeneralConfig.base,
      &protobuf_protocol_2fconfig_2eproto::scc_info_Config_CharacterFormRule.base,
      &protobuf_protocol_2fconfig_2eproto::scc_info_Config_InformationListConfig.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GeneralConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Config_CharacterFormRule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Config_InformationListConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Config.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[12];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::GeneralConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::GeneralConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::GeneralConfig, config_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::GeneralConfig, last_modified_product_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::GeneralConfig, last_modified_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::GeneralConfig, platform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::GeneralConfig, ui_locale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::GeneralConfig, upload_usage_stats_),
  4,
  0,
  3,
  1,
  2,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config_CharacterFormRule, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config_CharacterFormRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config_CharacterFormRule, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config_CharacterFormRule, preedit_character_form_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config_CharacterFormRule, conversion_character_form_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config_InformationListConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config_InformationListConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config_InformationListConfig, use_local_usage_dictionary_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, general_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, verbose_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, incognito_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, check_default_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, presentation_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, preedit_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, session_keymap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, custom_keymap_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, custom_roman_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, punctuation_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, symbol_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, space_character_form_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_keyboard_to_change_preedit_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, history_learning_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, selection_shortcut_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, character_form_rules_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_auto_ime_turn_off_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_cascading_window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, shift_key_mode_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, numpad_character_form_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_auto_conversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, auto_conversion_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, yen_sign_character_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_japanese_layout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_kana_modifier_insensitive_conversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_typing_correction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_date_conversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_single_kanji_conversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_symbol_conversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_number_conversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_emoticon_conversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_calculator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_t13n_conversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_zip_code_conversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_spelling_correction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_emoji_conversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, information_list_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_history_suggest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_dictionary_suggest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_realtime_conversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, suggestions_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, use_mode_indicator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::config::Config, allow_cloud_handwriting_),
  2,
  4,
  5,
  22,
  6,
  9,
  20,
  0,
  1,
  10,
  11,
  12,
  7,
  13,
  21,
  ~0u,
  23,
  24,
  26,
  27,
  8,
  28,
  14,
  15,
  16,
  17,
  25,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  18,
  3,
  37,
  38,
  39,
  41,
  40,
  19,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::mozc::config::GeneralConfig)},
  { 17, 25, sizeof(::mozc::config::Config_CharacterFormRule)},
  { 28, 34, sizeof(::mozc::config::Config_InformationListConfig)},
  { 35, 83, sizeof(::mozc::config::Config)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::config::_GeneralConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::config::_Config_CharacterFormRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::config::_Config_InformationListConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::config::_Config_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protocol/config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025protocol/config.proto\022\013mozc.config\"\305\001\n"
      "\rGeneralConfig\022\031\n\016config_version\030\001 \001(\r:\001"
      "0\022.\n\035last_modified_product_version\030\002 \001(\t"
      ":\0070.0.0.0\022\035\n\022last_modified_time\030\003 \001(\004:\0010"
      "\022\022\n\010platform\030\004 \001(\t:\000\022\023\n\tui_locale\030\005 \001(\t:"
      "\000\022!\n\022upload_usage_stats\030\006 \001(\010:\005false\"\217\034\n"
      "\006Config\0222\n\016general_config\030\001 \001(\0132\032.mozc.c"
      "onfig.GeneralConfig\022\030\n\rverbose_level\030\n \001"
      "(\005:\0010\022\035\n\016incognito_mode\030\024 \001(\010:\005false\022\033\n\r"
      "check_default\030\026 \001(\010:\004true\022 \n\021presentatio"
      "n_mode\030\027 \001(\010:\005false\022@\n\016preedit_method\030( "
      "\001(\0162!.mozc.config.Config.PreeditMethod:\005"
      "ROMAN\022\?\n\016session_keymap\030) \001(\0162!.mozc.con"
      "fig.Config.SessionKeymap:\004NONE\022\033\n\023custom"
      "_keymap_table\030* \001(\014\022\032\n\022custom_roman_tabl"
      "e\030+ \001(\014\022O\n\022punctuation_method\030- \001(\0162%.mo"
      "zc.config.Config.PunctuationMethod:\014KUTE"
      "N_TOUTEN\022R\n\rsymbol_method\030. \001(\0162 .mozc.c"
      "onfig.Config.SymbolMethod:\031CORNER_BRACKE"
      "T_MIDDLE_DOT\022b\n\024space_character_form\030/ \001"
      "(\0162,.mozc.config.Config.FundamentalChara"
      "cterForm:\026FUNDAMENTAL_INPUT_MODE\0224\n%use_"
      "keyboard_to_change_preedit_method\0300 \001(\010:"
      "\005false\022Y\n\026history_learning_level\0302 \001(\0162("
      ".mozc.config.Config.HistoryLearningLevel"
      ":\017DEFAULT_HISTORY\022U\n\022selection_shortcut\030"
      "4 \001(\0162%.mozc.config.Config.SelectionShor"
      "tcut:\022SHORTCUT_123456789\022C\n\024character_fo"
      "rm_rules\0306 \003(\0132%.mozc.config.Config.Char"
      "acterFormRule\022#\n\025use_auto_ime_turn_off\0308"
      " \001(\010:\004true\022\"\n\024use_cascading_window\030: \001(\010"
      ":\004true\022W\n\025shift_key_mode_switch\030; \001(\0162&."
      "mozc.config.Config.ShiftKeyModeSwitch:\020A"
      "SCII_INPUT_MODE\022Y\n\025numpad_character_form"
      "\030< \001(\0162\'.mozc.config.Config.NumpadCharac"
      "terForm:\021NUMPAD_HALF_WIDTH\022\"\n\023use_auto_c"
      "onversion\030= \001(\010:\005false\022\037\n\023auto_conversio"
      "n_key\030> \001(\r:\00213\022J\n\022yen_sign_character\030\? "
      "\001(\0162$.mozc.config.Config.YenSignCharacte"
      "r:\010YEN_SIGN\022\"\n\023use_japanese_layout\030@ \001(\010"
      ":\005false\0227\n(use_kana_modifier_insensitive"
      "_conversion\030A \001(\010:\005false\022$\n\025use_typing_c"
      "orrection\030B \001(\010:\005false\022!\n\023use_date_conve"
      "rsion\030P \001(\010:\004true\022)\n\033use_single_kanji_co"
      "nversion\030Q \001(\010:\004true\022#\n\025use_symbol_conve"
      "rsion\030R \001(\010:\004true\022#\n\025use_number_conversi"
      "on\030S \001(\010:\004true\022%\n\027use_emoticon_conversio"
      "n\030T \001(\010:\004true\022\034\n\016use_calculator\030U \001(\010:\004t"
      "rue\022!\n\023use_t13n_conversion\030V \001(\010:\004true\022%"
      "\n\027use_zip_code_conversion\030W \001(\010:\004true\022%\n"
      "\027use_spelling_correction\030X \001(\010:\004true\022#\n\024"
      "use_emoji_conversion\030Y \001(\010:\005false\022J\n\027inf"
      "ormation_list_config\030Z \001(\0132).mozc.config"
      ".Config.InformationListConfig\022!\n\023use_his"
      "tory_suggest\030d \001(\010:\004true\022$\n\026use_dictiona"
      "ry_suggest\030e \001(\010:\004true\022%\n\027use_realtime_c"
      "onversion\030f \001(\010:\004true\022\033\n\020suggestions_siz"
      "e\030n \001(\r:\0013\022 \n\022use_mode_indicator\030x \001(\010:\004"
      "true\022\'\n\027allow_cloud_handwriting\030\255\002 \001(\010:\005"
      "false\032\303\001\n\021CharacterFormRule\022\r\n\005group\030\001 \001"
      "(\t\022M\n\026preedit_character_form\030\002 \001(\0162!.moz"
      "c.config.Config.CharacterForm:\nFULL_WIDT"
      "H\022P\n\031conversion_character_form\030\003 \001(\0162!.m"
      "ozc.config.Config.CharacterForm:\nFULL_WI"
      "DTH\032M\n\025InformationListConfig\022(\n\032use_loca"
      "l_usage_dictionary\030\001 \001(\010:\004trueJ\004\010\002\020\003J\004\010\n"
      "\020\013\"$\n\rPreeditMethod\022\t\n\005ROMAN\020\000\022\010\n\004KANA\020\001"
      "\"j\n\rSessionKeymap\022\021\n\004NONE\020\377\377\377\377\377\377\377\377\377\001\022\n\n\006"
      "CUSTOM\020\000\022\010\n\004ATOK\020\001\022\t\n\005MSIME\020\002\022\013\n\007KOTOERI"
      "\020\003\022\n\n\006MOBILE\020\004\022\014\n\010CHROMEOS\020\005\"[\n\021Punctuat"
      "ionMethod\022\020\n\014KUTEN_TOUTEN\020\000\022\020\n\014COMMA_PER"
      "IOD\020\001\022\020\n\014KUTEN_PERIOD\020\002\022\020\n\014COMMA_TOUTEN\020"
      "\003\"\200\001\n\014SymbolMethod\022\035\n\031CORNER_BRACKET_MID"
      "DLE_DOT\020\000\022\030\n\024SQUARE_BRACKET_SLASH\020\001\022\030\n\024C"
      "ORNER_BRACKET_SLASH\020\002\022\035\n\031SQUARE_BRACKET_"
      "MIDDLE_DOT\020\003\"n\n\030FundamentalCharacterForm"
      "\022\032\n\026FUNDAMENTAL_INPUT_MODE\020\000\022\032\n\026FUNDAMEN"
      "TAL_FULL_WIDTH\020\001\022\032\n\026FUNDAMENTAL_HALF_WID"
      "TH\020\002\"J\n\024HistoryLearningLevel\022\023\n\017DEFAULT_"
      "HISTORY\020\000\022\r\n\tREAD_ONLY\020\001\022\016\n\nNO_HISTORY\020\002"
      "\"T\n\021SelectionShortcut\022\017\n\013NO_SHORTCUT\020\000\022\026"
      "\n\022SHORTCUT_123456789\020\001\022\026\n\022SHORTCUT_ASDFG"
      "HJKL\020\002\"Q\n\rCharacterForm\022\016\n\nHALF_WIDTH\020\000\022"
      "\016\n\nFULL_WIDTH\020\001\022\r\n\tLAST_FORM\020\002\022\021\n\rNO_CON"
      "VERSION\020\003\"L\n\022ShiftKeyModeSwitch\022\007\n\003OFF\020\000"
      "\022\024\n\020ASCII_INPUT_MODE\020\001\022\027\n\023KATAKANA_INPUT"
      "_MODE\020\002\"s\n\023NumpadCharacterForm\022\025\n\021NUMPAD"
      "_INPUT_MODE\020\000\022\025\n\021NUMPAD_FULL_WIDTH\020\001\022\025\n\021"
      "NUMPAD_HALF_WIDTH\020\002\022\027\n\023NUMPAD_DIRECT_INP"
      "UT\020\003\"\254\001\n\021AutoConversionKey\022\027\n\023AUTO_CONVE"
      "RSION_OFF\020\000\022\031\n\025AUTO_CONVERSION_KUTEN\020\001\022\032"
      "\n\026AUTO_CONVERSION_TOUTEN\020\002\022!\n\035AUTO_CONVE"
      "RSION_QUESTION_MARK\020\004\022$\n AUTO_CONVERSION"
      "_EXCLAMATION_MARK\020\010\"/\n\020YenSignCharacter\022"
      "\014\n\010YEN_SIGN\020\000\022\r\n\tBACKSLASH\020\001J\004\010\002\020\nJ\004\010\013\020\014"
      "J\004\010\025\020\026J\006\010\254\002\020\255\002J\006\010\344\007\020\345\007J\006\010\346\007\020\347\007J\006\010\347\007\020\350\007B="
      "\n.org.mozc.android.inputmethod.japanese."
      "protobufB\013ProtoConfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3901);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protocol_2fconfig_2eproto
namespace mozc {
namespace config {
const ::google::protobuf::EnumDescriptor* Config_PreeditMethod_descriptor() {
  protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fconfig_2eproto::file_level_enum_descriptors[0];
}
bool Config_PreeditMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_PreeditMethod Config::ROMAN;
const Config_PreeditMethod Config::KANA;
const Config_PreeditMethod Config::PreeditMethod_MIN;
const Config_PreeditMethod Config::PreeditMethod_MAX;
const int Config::PreeditMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_SessionKeymap_descriptor() {
  protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fconfig_2eproto::file_level_enum_descriptors[1];
}
bool Config_SessionKeymap_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_SessionKeymap Config::NONE;
const Config_SessionKeymap Config::CUSTOM;
const Config_SessionKeymap Config::ATOK;
const Config_SessionKeymap Config::MSIME;
const Config_SessionKeymap Config::KOTOERI;
const Config_SessionKeymap Config::MOBILE;
const Config_SessionKeymap Config::CHROMEOS;
const Config_SessionKeymap Config::SessionKeymap_MIN;
const Config_SessionKeymap Config::SessionKeymap_MAX;
const int Config::SessionKeymap_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_PunctuationMethod_descriptor() {
  protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fconfig_2eproto::file_level_enum_descriptors[2];
}
bool Config_PunctuationMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_PunctuationMethod Config::KUTEN_TOUTEN;
const Config_PunctuationMethod Config::COMMA_PERIOD;
const Config_PunctuationMethod Config::KUTEN_PERIOD;
const Config_PunctuationMethod Config::COMMA_TOUTEN;
const Config_PunctuationMethod Config::PunctuationMethod_MIN;
const Config_PunctuationMethod Config::PunctuationMethod_MAX;
const int Config::PunctuationMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_SymbolMethod_descriptor() {
  protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fconfig_2eproto::file_level_enum_descriptors[3];
}
bool Config_SymbolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_SymbolMethod Config::CORNER_BRACKET_MIDDLE_DOT;
const Config_SymbolMethod Config::SQUARE_BRACKET_SLASH;
const Config_SymbolMethod Config::CORNER_BRACKET_SLASH;
const Config_SymbolMethod Config::SQUARE_BRACKET_MIDDLE_DOT;
const Config_SymbolMethod Config::SymbolMethod_MIN;
const Config_SymbolMethod Config::SymbolMethod_MAX;
const int Config::SymbolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_FundamentalCharacterForm_descriptor() {
  protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fconfig_2eproto::file_level_enum_descriptors[4];
}
bool Config_FundamentalCharacterForm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_FundamentalCharacterForm Config::FUNDAMENTAL_INPUT_MODE;
const Config_FundamentalCharacterForm Config::FUNDAMENTAL_FULL_WIDTH;
const Config_FundamentalCharacterForm Config::FUNDAMENTAL_HALF_WIDTH;
const Config_FundamentalCharacterForm Config::FundamentalCharacterForm_MIN;
const Config_FundamentalCharacterForm Config::FundamentalCharacterForm_MAX;
const int Config::FundamentalCharacterForm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_HistoryLearningLevel_descriptor() {
  protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fconfig_2eproto::file_level_enum_descriptors[5];
}
bool Config_HistoryLearningLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_HistoryLearningLevel Config::DEFAULT_HISTORY;
const Config_HistoryLearningLevel Config::READ_ONLY;
const Config_HistoryLearningLevel Config::NO_HISTORY;
const Config_HistoryLearningLevel Config::HistoryLearningLevel_MIN;
const Config_HistoryLearningLevel Config::HistoryLearningLevel_MAX;
const int Config::HistoryLearningLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_SelectionShortcut_descriptor() {
  protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fconfig_2eproto::file_level_enum_descriptors[6];
}
bool Config_SelectionShortcut_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_SelectionShortcut Config::NO_SHORTCUT;
const Config_SelectionShortcut Config::SHORTCUT_123456789;
const Config_SelectionShortcut Config::SHORTCUT_ASDFGHJKL;
const Config_SelectionShortcut Config::SelectionShortcut_MIN;
const Config_SelectionShortcut Config::SelectionShortcut_MAX;
const int Config::SelectionShortcut_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_CharacterForm_descriptor() {
  protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fconfig_2eproto::file_level_enum_descriptors[7];
}
bool Config_CharacterForm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_CharacterForm Config::HALF_WIDTH;
const Config_CharacterForm Config::FULL_WIDTH;
const Config_CharacterForm Config::LAST_FORM;
const Config_CharacterForm Config::NO_CONVERSION;
const Config_CharacterForm Config::CharacterForm_MIN;
const Config_CharacterForm Config::CharacterForm_MAX;
const int Config::CharacterForm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_ShiftKeyModeSwitch_descriptor() {
  protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fconfig_2eproto::file_level_enum_descriptors[8];
}
bool Config_ShiftKeyModeSwitch_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_ShiftKeyModeSwitch Config::OFF;
const Config_ShiftKeyModeSwitch Config::ASCII_INPUT_MODE;
const Config_ShiftKeyModeSwitch Config::KATAKANA_INPUT_MODE;
const Config_ShiftKeyModeSwitch Config::ShiftKeyModeSwitch_MIN;
const Config_ShiftKeyModeSwitch Config::ShiftKeyModeSwitch_MAX;
const int Config::ShiftKeyModeSwitch_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_NumpadCharacterForm_descriptor() {
  protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fconfig_2eproto::file_level_enum_descriptors[9];
}
bool Config_NumpadCharacterForm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_NumpadCharacterForm Config::NUMPAD_INPUT_MODE;
const Config_NumpadCharacterForm Config::NUMPAD_FULL_WIDTH;
const Config_NumpadCharacterForm Config::NUMPAD_HALF_WIDTH;
const Config_NumpadCharacterForm Config::NUMPAD_DIRECT_INPUT;
const Config_NumpadCharacterForm Config::NumpadCharacterForm_MIN;
const Config_NumpadCharacterForm Config::NumpadCharacterForm_MAX;
const int Config::NumpadCharacterForm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_AutoConversionKey_descriptor() {
  protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fconfig_2eproto::file_level_enum_descriptors[10];
}
bool Config_AutoConversionKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_AutoConversionKey Config::AUTO_CONVERSION_OFF;
const Config_AutoConversionKey Config::AUTO_CONVERSION_KUTEN;
const Config_AutoConversionKey Config::AUTO_CONVERSION_TOUTEN;
const Config_AutoConversionKey Config::AUTO_CONVERSION_QUESTION_MARK;
const Config_AutoConversionKey Config::AUTO_CONVERSION_EXCLAMATION_MARK;
const Config_AutoConversionKey Config::AutoConversionKey_MIN;
const Config_AutoConversionKey Config::AutoConversionKey_MAX;
const int Config::AutoConversionKey_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_YenSignCharacter_descriptor() {
  protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fconfig_2eproto::file_level_enum_descriptors[11];
}
bool Config_YenSignCharacter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_YenSignCharacter Config::YEN_SIGN;
const Config_YenSignCharacter Config::BACKSLASH;
const Config_YenSignCharacter Config::YenSignCharacter_MIN;
const Config_YenSignCharacter Config::YenSignCharacter_MAX;
const int Config::YenSignCharacter_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void GeneralConfig::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeneralConfig::kConfigVersionFieldNumber;
const int GeneralConfig::kLastModifiedProductVersionFieldNumber;
const int GeneralConfig::kLastModifiedTimeFieldNumber;
const int GeneralConfig::kPlatformFieldNumber;
const int GeneralConfig::kUiLocaleFieldNumber;
const int GeneralConfig::kUploadUsageStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeneralConfig::GeneralConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fconfig_2eproto::scc_info_GeneralConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.config.GeneralConfig)
}
GeneralConfig::GeneralConfig(const GeneralConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_modified_product_version_.UnsafeSetDefault(&::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.get());
  if (from.has_last_modified_product_version()) {
    last_modified_product_version_.AssignWithDefault(&::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.get(), from.last_modified_product_version_);
  }
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_platform()) {
    platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
  }
  ui_locale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ui_locale()) {
    ui_locale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ui_locale_);
  }
  ::memcpy(&last_modified_time_, &from.last_modified_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&upload_usage_stats_) -
    reinterpret_cast<char*>(&last_modified_time_)) + sizeof(upload_usage_stats_));
  // @@protoc_insertion_point(copy_constructor:mozc.config.GeneralConfig)
}

void GeneralConfig::SharedCtor() {
  last_modified_product_version_.UnsafeSetDefault(&::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.get());
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ui_locale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_modified_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upload_usage_stats_) -
      reinterpret_cast<char*>(&last_modified_time_)) + sizeof(upload_usage_stats_));
}

GeneralConfig::~GeneralConfig() {
  // @@protoc_insertion_point(destructor:mozc.config.GeneralConfig)
  SharedDtor();
}

void GeneralConfig::SharedDtor() {
  last_modified_product_version_.DestroyNoArena(&::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.get());
  platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ui_locale_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GeneralConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GeneralConfig::descriptor() {
  ::protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeneralConfig& GeneralConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fconfig_2eproto::scc_info_GeneralConfig.base);
  return *internal_default_instance();
}


void GeneralConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.config.GeneralConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      last_modified_product_version_.UnsafeMutablePointer()->assign(*&::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      platform_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ui_locale_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&last_modified_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upload_usage_stats_) -
        reinterpret_cast<char*>(&last_modified_time_)) + sizeof(upload_usage_stats_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GeneralConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.config.GeneralConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 config_version = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_config_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_modified_product_version = 2 [default = "0.0.0.0"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_modified_product_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_modified_product_version().data(), static_cast<int>(this->last_modified_product_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.config.GeneralConfig.last_modified_product_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_modified_time = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_modified_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_modified_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string platform = 4 [default = ""];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), static_cast<int>(this->platform().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.config.GeneralConfig.platform");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ui_locale = 5 [default = ""];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ui_locale()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ui_locale().data(), static_cast<int>(this->ui_locale().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.config.GeneralConfig.ui_locale");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool upload_usage_stats = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_upload_usage_stats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_usage_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.config.GeneralConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.config.GeneralConfig)
  return false;
#undef DO_
}

void GeneralConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.config.GeneralConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 config_version = 1 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->config_version(), output);
  }

  // optional string last_modified_product_version = 2 [default = "0.0.0.0"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_modified_product_version().data(), static_cast<int>(this->last_modified_product_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.config.GeneralConfig.last_modified_product_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->last_modified_product_version(), output);
  }

  // optional uint64 last_modified_time = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_modified_time(), output);
  }

  // optional string platform = 4 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.config.GeneralConfig.platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->platform(), output);
  }

  // optional string ui_locale = 5 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ui_locale().data(), static_cast<int>(this->ui_locale().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.config.GeneralConfig.ui_locale");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ui_locale(), output);
  }

  // optional bool upload_usage_stats = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->upload_usage_stats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.config.GeneralConfig)
}

::google::protobuf::uint8* GeneralConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.config.GeneralConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 config_version = 1 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->config_version(), target);
  }

  // optional string last_modified_product_version = 2 [default = "0.0.0.0"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_modified_product_version().data(), static_cast<int>(this->last_modified_product_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.config.GeneralConfig.last_modified_product_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->last_modified_product_version(), target);
  }

  // optional uint64 last_modified_time = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_modified_time(), target);
  }

  // optional string platform = 4 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.config.GeneralConfig.platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->platform(), target);
  }

  // optional string ui_locale = 5 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ui_locale().data(), static_cast<int>(this->ui_locale().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.config.GeneralConfig.ui_locale");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ui_locale(), target);
  }

  // optional bool upload_usage_stats = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->upload_usage_stats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.config.GeneralConfig)
  return target;
}

size_t GeneralConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.config.GeneralConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string last_modified_product_version = 2 [default = "0.0.0.0"];
    if (has_last_modified_product_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_modified_product_version());
    }

    // optional string platform = 4 [default = ""];
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string ui_locale = 5 [default = ""];
    if (has_ui_locale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ui_locale());
    }

    // optional uint64 last_modified_time = 3 [default = 0];
    if (has_last_modified_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_modified_time());
    }

    // optional uint32 config_version = 1 [default = 0];
    if (has_config_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config_version());
    }

    // optional bool upload_usage_stats = 6 [default = false];
    if (has_upload_usage_stats()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneralConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.config.GeneralConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneralConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeneralConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.config.GeneralConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.config.GeneralConfig)
    MergeFrom(*source);
  }
}

void GeneralConfig::MergeFrom(const GeneralConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.config.GeneralConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_last_modified_product_version();
      last_modified_product_version_.AssignWithDefault(&::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.get(), from.last_modified_product_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_platform();
      platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ui_locale();
      ui_locale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ui_locale_);
    }
    if (cached_has_bits & 0x00000008u) {
      last_modified_time_ = from.last_modified_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      config_version_ = from.config_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      upload_usage_stats_ = from.upload_usage_stats_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GeneralConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.config.GeneralConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralConfig::CopyFrom(const GeneralConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.config.GeneralConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralConfig::IsInitialized() const {
  return true;
}

void GeneralConfig::Swap(GeneralConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeneralConfig::InternalSwap(GeneralConfig* other) {
  using std::swap;
  last_modified_product_version_.Swap(&other->last_modified_product_version_, &::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.get(),
    GetArenaNoVirtual());
  platform_.Swap(&other->platform_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ui_locale_.Swap(&other->ui_locale_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_modified_time_, other->last_modified_time_);
  swap(config_version_, other->config_version_);
  swap(upload_usage_stats_, other->upload_usage_stats_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GeneralConfig::GetMetadata() const {
  protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Config_CharacterFormRule::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config_CharacterFormRule::kGroupFieldNumber;
const int Config_CharacterFormRule::kPreeditCharacterFormFieldNumber;
const int Config_CharacterFormRule::kConversionCharacterFormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config_CharacterFormRule::Config_CharacterFormRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fconfig_2eproto::scc_info_Config_CharacterFormRule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.config.Config.CharacterFormRule)
}
Config_CharacterFormRule::Config_CharacterFormRule(const Config_CharacterFormRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_group()) {
    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  ::memcpy(&preedit_character_form_, &from.preedit_character_form_,
    static_cast<size_t>(reinterpret_cast<char*>(&conversion_character_form_) -
    reinterpret_cast<char*>(&preedit_character_form_)) + sizeof(conversion_character_form_));
  // @@protoc_insertion_point(copy_constructor:mozc.config.Config.CharacterFormRule)
}

void Config_CharacterFormRule::SharedCtor() {
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preedit_character_form_ = 1;
  conversion_character_form_ = 1;
}

Config_CharacterFormRule::~Config_CharacterFormRule() {
  // @@protoc_insertion_point(destructor:mozc.config.Config.CharacterFormRule)
  SharedDtor();
}

void Config_CharacterFormRule::SharedDtor() {
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Config_CharacterFormRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Config_CharacterFormRule::descriptor() {
  ::protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Config_CharacterFormRule& Config_CharacterFormRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fconfig_2eproto::scc_info_Config_CharacterFormRule.base);
  return *internal_default_instance();
}


void Config_CharacterFormRule::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.config.Config.CharacterFormRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      group_.ClearNonDefaultToEmptyNoArena();
    }
    preedit_character_form_ = 1;
    conversion_character_form_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Config_CharacterFormRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.config.Config.CharacterFormRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string group = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group().data(), static_cast<int>(this->group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.config.Config.CharacterFormRule.group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.config.Config.CharacterForm preedit_character_form = 2 [default = FULL_WIDTH];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_CharacterForm_IsValid(value)) {
            set_preedit_character_form(static_cast< ::mozc::config::Config_CharacterForm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.config.Config.CharacterForm conversion_character_form = 3 [default = FULL_WIDTH];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_CharacterForm_IsValid(value)) {
            set_conversion_character_form(static_cast< ::mozc::config::Config_CharacterForm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.config.Config.CharacterFormRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.config.Config.CharacterFormRule)
  return false;
#undef DO_
}

void Config_CharacterFormRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.config.Config.CharacterFormRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string group = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.config.Config.CharacterFormRule.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group(), output);
  }

  // optional .mozc.config.Config.CharacterForm preedit_character_form = 2 [default = FULL_WIDTH];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->preedit_character_form(), output);
  }

  // optional .mozc.config.Config.CharacterForm conversion_character_form = 3 [default = FULL_WIDTH];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->conversion_character_form(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.config.Config.CharacterFormRule)
}

::google::protobuf::uint8* Config_CharacterFormRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.config.Config.CharacterFormRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string group = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group().data(), static_cast<int>(this->group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.config.Config.CharacterFormRule.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group(), target);
  }

  // optional .mozc.config.Config.CharacterForm preedit_character_form = 2 [default = FULL_WIDTH];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->preedit_character_form(), target);
  }

  // optional .mozc.config.Config.CharacterForm conversion_character_form = 3 [default = FULL_WIDTH];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->conversion_character_form(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.config.Config.CharacterFormRule)
  return target;
}

size_t Config_CharacterFormRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.config.Config.CharacterFormRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group());
    }

    // optional .mozc.config.Config.CharacterForm preedit_character_form = 2 [default = FULL_WIDTH];
    if (has_preedit_character_form()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->preedit_character_form());
    }

    // optional .mozc.config.Config.CharacterForm conversion_character_form = 3 [default = FULL_WIDTH];
    if (has_conversion_character_form()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->conversion_character_form());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config_CharacterFormRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.config.Config.CharacterFormRule)
  GOOGLE_DCHECK_NE(&from, this);
  const Config_CharacterFormRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Config_CharacterFormRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.config.Config.CharacterFormRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.config.Config.CharacterFormRule)
    MergeFrom(*source);
  }
}

void Config_CharacterFormRule::MergeFrom(const Config_CharacterFormRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.config.Config.CharacterFormRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_group();
      group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
    }
    if (cached_has_bits & 0x00000002u) {
      preedit_character_form_ = from.preedit_character_form_;
    }
    if (cached_has_bits & 0x00000004u) {
      conversion_character_form_ = from.conversion_character_form_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Config_CharacterFormRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.config.Config.CharacterFormRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_CharacterFormRule::CopyFrom(const Config_CharacterFormRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.config.Config.CharacterFormRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_CharacterFormRule::IsInitialized() const {
  return true;
}

void Config_CharacterFormRule::Swap(Config_CharacterFormRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config_CharacterFormRule::InternalSwap(Config_CharacterFormRule* other) {
  using std::swap;
  group_.Swap(&other->group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(preedit_character_form_, other->preedit_character_form_);
  swap(conversion_character_form_, other->conversion_character_form_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Config_CharacterFormRule::GetMetadata() const {
  protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Config_InformationListConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config_InformationListConfig::kUseLocalUsageDictionaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config_InformationListConfig::Config_InformationListConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fconfig_2eproto::scc_info_Config_InformationListConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.config.Config.InformationListConfig)
}
Config_InformationListConfig::Config_InformationListConfig(const Config_InformationListConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  use_local_usage_dictionary_ = from.use_local_usage_dictionary_;
  // @@protoc_insertion_point(copy_constructor:mozc.config.Config.InformationListConfig)
}

void Config_InformationListConfig::SharedCtor() {
  use_local_usage_dictionary_ = true;
}

Config_InformationListConfig::~Config_InformationListConfig() {
  // @@protoc_insertion_point(destructor:mozc.config.Config.InformationListConfig)
  SharedDtor();
}

void Config_InformationListConfig::SharedDtor() {
}

void Config_InformationListConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Config_InformationListConfig::descriptor() {
  ::protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Config_InformationListConfig& Config_InformationListConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fconfig_2eproto::scc_info_Config_InformationListConfig.base);
  return *internal_default_instance();
}


void Config_InformationListConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.config.Config.InformationListConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  use_local_usage_dictionary_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Config_InformationListConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.config.Config.InformationListConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_local_usage_dictionary = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_use_local_usage_dictionary();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_local_usage_dictionary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.config.Config.InformationListConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.config.Config.InformationListConfig)
  return false;
#undef DO_
}

void Config_InformationListConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.config.Config.InformationListConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_local_usage_dictionary = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_local_usage_dictionary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.config.Config.InformationListConfig)
}

::google::protobuf::uint8* Config_InformationListConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.config.Config.InformationListConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_local_usage_dictionary = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_local_usage_dictionary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.config.Config.InformationListConfig)
  return target;
}

size_t Config_InformationListConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.config.Config.InformationListConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool use_local_usage_dictionary = 1 [default = true];
  if (has_use_local_usage_dictionary()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config_InformationListConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.config.Config.InformationListConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const Config_InformationListConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Config_InformationListConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.config.Config.InformationListConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.config.Config.InformationListConfig)
    MergeFrom(*source);
  }
}

void Config_InformationListConfig::MergeFrom(const Config_InformationListConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.config.Config.InformationListConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_use_local_usage_dictionary()) {
    set_use_local_usage_dictionary(from.use_local_usage_dictionary());
  }
}

void Config_InformationListConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.config.Config.InformationListConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_InformationListConfig::CopyFrom(const Config_InformationListConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.config.Config.InformationListConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_InformationListConfig::IsInitialized() const {
  return true;
}

void Config_InformationListConfig::Swap(Config_InformationListConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config_InformationListConfig::InternalSwap(Config_InformationListConfig* other) {
  using std::swap;
  swap(use_local_usage_dictionary_, other->use_local_usage_dictionary_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Config_InformationListConfig::GetMetadata() const {
  protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Config::InitAsDefaultInstance() {
  ::mozc::config::_Config_default_instance_._instance.get_mutable()->general_config_ = const_cast< ::mozc::config::GeneralConfig*>(
      ::mozc::config::GeneralConfig::internal_default_instance());
  ::mozc::config::_Config_default_instance_._instance.get_mutable()->information_list_config_ = const_cast< ::mozc::config::Config_InformationListConfig*>(
      ::mozc::config::Config_InformationListConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config::kGeneralConfigFieldNumber;
const int Config::kVerboseLevelFieldNumber;
const int Config::kIncognitoModeFieldNumber;
const int Config::kCheckDefaultFieldNumber;
const int Config::kPresentationModeFieldNumber;
const int Config::kPreeditMethodFieldNumber;
const int Config::kSessionKeymapFieldNumber;
const int Config::kCustomKeymapTableFieldNumber;
const int Config::kCustomRomanTableFieldNumber;
const int Config::kPunctuationMethodFieldNumber;
const int Config::kSymbolMethodFieldNumber;
const int Config::kSpaceCharacterFormFieldNumber;
const int Config::kUseKeyboardToChangePreeditMethodFieldNumber;
const int Config::kHistoryLearningLevelFieldNumber;
const int Config::kSelectionShortcutFieldNumber;
const int Config::kCharacterFormRulesFieldNumber;
const int Config::kUseAutoImeTurnOffFieldNumber;
const int Config::kUseCascadingWindowFieldNumber;
const int Config::kShiftKeyModeSwitchFieldNumber;
const int Config::kNumpadCharacterFormFieldNumber;
const int Config::kUseAutoConversionFieldNumber;
const int Config::kAutoConversionKeyFieldNumber;
const int Config::kYenSignCharacterFieldNumber;
const int Config::kUseJapaneseLayoutFieldNumber;
const int Config::kUseKanaModifierInsensitiveConversionFieldNumber;
const int Config::kUseTypingCorrectionFieldNumber;
const int Config::kUseDateConversionFieldNumber;
const int Config::kUseSingleKanjiConversionFieldNumber;
const int Config::kUseSymbolConversionFieldNumber;
const int Config::kUseNumberConversionFieldNumber;
const int Config::kUseEmoticonConversionFieldNumber;
const int Config::kUseCalculatorFieldNumber;
const int Config::kUseT13NConversionFieldNumber;
const int Config::kUseZipCodeConversionFieldNumber;
const int Config::kUseSpellingCorrectionFieldNumber;
const int Config::kUseEmojiConversionFieldNumber;
const int Config::kInformationListConfigFieldNumber;
const int Config::kUseHistorySuggestFieldNumber;
const int Config::kUseDictionarySuggestFieldNumber;
const int Config::kUseRealtimeConversionFieldNumber;
const int Config::kSuggestionsSizeFieldNumber;
const int Config::kUseModeIndicatorFieldNumber;
const int Config::kAllowCloudHandwritingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config::Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fconfig_2eproto::scc_info_Config.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.config.Config)
}
Config::Config(const Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      character_form_rules_(from.character_form_rules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_keymap_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_keymap_table()) {
    custom_keymap_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_keymap_table_);
  }
  custom_roman_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_roman_table()) {
    custom_roman_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_roman_table_);
  }
  if (from.has_general_config()) {
    general_config_ = new ::mozc::config::GeneralConfig(*from.general_config_);
  } else {
    general_config_ = NULL;
  }
  if (from.has_information_list_config()) {
    information_list_config_ = new ::mozc::config::Config_InformationListConfig(*from.information_list_config_);
  } else {
    information_list_config_ = NULL;
  }
  ::memcpy(&verbose_level_, &from.verbose_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&suggestions_size_) -
    reinterpret_cast<char*>(&verbose_level_)) + sizeof(suggestions_size_));
  // @@protoc_insertion_point(copy_constructor:mozc.config.Config)
}

void Config::SharedCtor() {
  custom_keymap_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_roman_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&general_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_cloud_handwriting_) -
      reinterpret_cast<char*>(&general_config_)) + sizeof(allow_cloud_handwriting_));
  session_keymap_ = -1;
  selection_shortcut_ = 1;
  check_default_ = true;
  use_auto_ime_turn_off_ = true;
  use_cascading_window_ = true;
  use_date_conversion_ = true;
  shift_key_mode_switch_ = 1;
  numpad_character_form_ = 2;
  auto_conversion_key_ = 13u;
  use_single_kanji_conversion_ = true;
  use_symbol_conversion_ = true;
  use_number_conversion_ = true;
  use_emoticon_conversion_ = true;
  use_calculator_ = true;
  use_t13n_conversion_ = true;
  use_zip_code_conversion_ = true;
  use_spelling_correction_ = true;
  use_history_suggest_ = true;
  use_dictionary_suggest_ = true;
  use_realtime_conversion_ = true;
  use_mode_indicator_ = true;
  suggestions_size_ = 3u;
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:mozc.config.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  custom_keymap_table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_roman_table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete general_config_;
  if (this != internal_default_instance()) delete information_list_config_;
}

void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  ::protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Config& Config::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fconfig_2eproto::scc_info_Config.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.config.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  character_form_rules_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      custom_keymap_table_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      custom_roman_table_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(general_config_ != NULL);
      general_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(information_list_config_ != NULL);
      information_list_config_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&verbose_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_keyboard_to_change_preedit_method_) -
        reinterpret_cast<char*>(&verbose_level_)) + sizeof(use_keyboard_to_change_preedit_method_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&use_auto_conversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_japanese_layout_) -
        reinterpret_cast<char*>(&use_auto_conversion_)) + sizeof(use_japanese_layout_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&use_kana_modifier_insensitive_conversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allow_cloud_handwriting_) -
        reinterpret_cast<char*>(&use_kana_modifier_insensitive_conversion_)) + sizeof(allow_cloud_handwriting_));
    session_keymap_ = -1;
    selection_shortcut_ = 1;
    check_default_ = true;
    use_auto_ime_turn_off_ = true;
  }
  if (cached_has_bits & 4278190080u) {
    use_cascading_window_ = true;
    use_date_conversion_ = true;
    shift_key_mode_switch_ = 1;
    numpad_character_form_ = 2;
    auto_conversion_key_ = 13u;
    use_single_kanji_conversion_ = true;
    use_symbol_conversion_ = true;
    use_number_conversion_ = true;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    use_emoticon_conversion_ = true;
    use_calculator_ = true;
    use_t13n_conversion_ = true;
    use_zip_code_conversion_ = true;
    use_spelling_correction_ = true;
    use_history_suggest_ = true;
    use_dictionary_suggest_ = true;
    use_realtime_conversion_ = true;
  }
  if (cached_has_bits & 768u) {
    use_mode_indicator_ = true;
    suggestions_size_ = 3u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.config.Config)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.config.GeneralConfig general_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_general_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 verbose_level = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_verbose_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verbose_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool incognito_mode = 20 [default = false];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_incognito_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incognito_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool check_default = 22 [default = true];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_check_default();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_default_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool presentation_mode = 23 [default = false];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_presentation_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &presentation_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.config.Config.PreeditMethod preedit_method = 40 [default = ROMAN];
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_PreeditMethod_IsValid(value)) {
            set_preedit_method(static_cast< ::mozc::config::Config_PreeditMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                40, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.config.Config.SessionKeymap session_keymap = 41 [default = NONE];
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_SessionKeymap_IsValid(value)) {
            set_session_keymap(static_cast< ::mozc::config::Config_SessionKeymap >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                41, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes custom_keymap_table = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_custom_keymap_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes custom_roman_table = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_custom_roman_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.config.Config.PunctuationMethod punctuation_method = 45 [default = KUTEN_TOUTEN];
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_PunctuationMethod_IsValid(value)) {
            set_punctuation_method(static_cast< ::mozc::config::Config_PunctuationMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                45, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.config.Config.SymbolMethod symbol_method = 46 [default = CORNER_BRACKET_MIDDLE_DOT];
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_SymbolMethod_IsValid(value)) {
            set_symbol_method(static_cast< ::mozc::config::Config_SymbolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                46, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.config.Config.FundamentalCharacterForm space_character_form = 47 [default = FUNDAMENTAL_INPUT_MODE];
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 376 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_FundamentalCharacterForm_IsValid(value)) {
            set_space_character_form(static_cast< ::mozc::config::Config_FundamentalCharacterForm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                47, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_keyboard_to_change_preedit_method = 48 [default = false];
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 384 & 0xFF */)) {
          set_has_use_keyboard_to_change_preedit_method();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_keyboard_to_change_preedit_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.config.Config.HistoryLearningLevel history_learning_level = 50 [default = DEFAULT_HISTORY];
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_HistoryLearningLevel_IsValid(value)) {
            set_history_learning_level(static_cast< ::mozc::config::Config_HistoryLearningLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                50, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.config.Config.SelectionShortcut selection_shortcut = 52 [default = SHORTCUT_123456789];
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_SelectionShortcut_IsValid(value)) {
            set_selection_shortcut(static_cast< ::mozc::config::Config_SelectionShortcut >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                52, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mozc.config.Config.CharacterFormRule character_form_rules = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 434 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_character_form_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_auto_ime_turn_off = 56 [default = true];
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 448 & 0xFF */)) {
          set_has_use_auto_ime_turn_off();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_auto_ime_turn_off_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_cascading_window = 58 [default = true];
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {
          set_has_use_cascading_window();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_cascading_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.config.Config.ShiftKeyModeSwitch shift_key_mode_switch = 59 [default = ASCII_INPUT_MODE];
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 472 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_ShiftKeyModeSwitch_IsValid(value)) {
            set_shift_key_mode_switch(static_cast< ::mozc::config::Config_ShiftKeyModeSwitch >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                59, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.config.Config.NumpadCharacterForm numpad_character_form = 60 [default = NUMPAD_HALF_WIDTH];
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_NumpadCharacterForm_IsValid(value)) {
            set_numpad_character_form(static_cast< ::mozc::config::Config_NumpadCharacterForm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                60, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_auto_conversion = 61 [default = false];
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 488 & 0xFF */)) {
          set_has_use_auto_conversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_auto_conversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 auto_conversion_key = 62 [default = 13];
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {
          set_has_auto_conversion_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto_conversion_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.config.Config.YenSignCharacter yen_sign_character = 63 [default = YEN_SIGN];
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_YenSignCharacter_IsValid(value)) {
            set_yen_sign_character(static_cast< ::mozc::config::Config_YenSignCharacter >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                63, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_japanese_layout = 64 [default = false];
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 512 & 0xFF */)) {
          set_has_use_japanese_layout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_japanese_layout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_kana_modifier_insensitive_conversion = 65 [default = false];
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 520 & 0xFF */)) {
          set_has_use_kana_modifier_insensitive_conversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_kana_modifier_insensitive_conversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_typing_correction = 66 [default = false];
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 528 & 0xFF */)) {
          set_has_use_typing_correction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_typing_correction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_date_conversion = 80 [default = true];
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 640 & 0xFF */)) {
          set_has_use_date_conversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_date_conversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_single_kanji_conversion = 81 [default = true];
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 648 & 0xFF */)) {
          set_has_use_single_kanji_conversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_single_kanji_conversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_symbol_conversion = 82 [default = true];
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 656 & 0xFF */)) {
          set_has_use_symbol_conversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_symbol_conversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_number_conversion = 83 [default = true];
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 664 & 0xFF */)) {
          set_has_use_number_conversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_number_conversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_emoticon_conversion = 84 [default = true];
      case 84: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 672 & 0xFF */)) {
          set_has_use_emoticon_conversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_emoticon_conversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_calculator = 85 [default = true];
      case 85: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 680 & 0xFF */)) {
          set_has_use_calculator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_calculator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_t13n_conversion = 86 [default = true];
      case 86: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 688 & 0xFF */)) {
          set_has_use_t13n_conversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_t13n_conversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_zip_code_conversion = 87 [default = true];
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 696 & 0xFF */)) {
          set_has_use_zip_code_conversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_zip_code_conversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_spelling_correction = 88 [default = true];
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 704 & 0xFF */)) {
          set_has_use_spelling_correction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_spelling_correction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_emoji_conversion = 89 [default = false];
      case 89: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 712 & 0xFF */)) {
          set_has_use_emoji_conversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_emoji_conversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.config.Config.InformationListConfig information_list_config = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 722 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_information_list_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_history_suggest = 100 [default = true];
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {
          set_has_use_history_suggest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_history_suggest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_dictionary_suggest = 101 [default = true];
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 808 & 0xFF */)) {
          set_has_use_dictionary_suggest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_dictionary_suggest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_realtime_conversion = 102 [default = true];
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 816 & 0xFF */)) {
          set_has_use_realtime_conversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_realtime_conversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 suggestions_size = 110 [default = 3];
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 880 & 0xFF */)) {
          set_has_suggestions_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suggestions_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_mode_indicator = 120 [default = true];
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 960 & 0xFF */)) {
          set_has_use_mode_indicator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_mode_indicator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_cloud_handwriting = 301 [default = false];
      case 301: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 2408 & 0xFF */)) {
          set_has_allow_cloud_handwriting();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_cloud_handwriting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.config.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.config.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.config.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mozc.config.GeneralConfig general_config = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_general_config(), output);
  }

  // optional int32 verbose_level = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->verbose_level(), output);
  }

  // optional bool incognito_mode = 20 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->incognito_mode(), output);
  }

  // optional bool check_default = 22 [default = true];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->check_default(), output);
  }

  // optional bool presentation_mode = 23 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->presentation_mode(), output);
  }

  // optional .mozc.config.Config.PreeditMethod preedit_method = 40 [default = ROMAN];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->preedit_method(), output);
  }

  // optional .mozc.config.Config.SessionKeymap session_keymap = 41 [default = NONE];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      41, this->session_keymap(), output);
  }

  // optional bytes custom_keymap_table = 42;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      42, this->custom_keymap_table(), output);
  }

  // optional bytes custom_roman_table = 43;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      43, this->custom_roman_table(), output);
  }

  // optional .mozc.config.Config.PunctuationMethod punctuation_method = 45 [default = KUTEN_TOUTEN];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      45, this->punctuation_method(), output);
  }

  // optional .mozc.config.Config.SymbolMethod symbol_method = 46 [default = CORNER_BRACKET_MIDDLE_DOT];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      46, this->symbol_method(), output);
  }

  // optional .mozc.config.Config.FundamentalCharacterForm space_character_form = 47 [default = FUNDAMENTAL_INPUT_MODE];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      47, this->space_character_form(), output);
  }

  // optional bool use_keyboard_to_change_preedit_method = 48 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->use_keyboard_to_change_preedit_method(), output);
  }

  // optional .mozc.config.Config.HistoryLearningLevel history_learning_level = 50 [default = DEFAULT_HISTORY];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      50, this->history_learning_level(), output);
  }

  // optional .mozc.config.Config.SelectionShortcut selection_shortcut = 52 [default = SHORTCUT_123456789];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      52, this->selection_shortcut(), output);
  }

  // repeated .mozc.config.Config.CharacterFormRule character_form_rules = 54;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->character_form_rules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54,
      this->character_form_rules(static_cast<int>(i)),
      output);
  }

  // optional bool use_auto_ime_turn_off = 56 [default = true];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->use_auto_ime_turn_off(), output);
  }

  // optional bool use_cascading_window = 58 [default = true];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(58, this->use_cascading_window(), output);
  }

  // optional .mozc.config.Config.ShiftKeyModeSwitch shift_key_mode_switch = 59 [default = ASCII_INPUT_MODE];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      59, this->shift_key_mode_switch(), output);
  }

  // optional .mozc.config.Config.NumpadCharacterForm numpad_character_form = 60 [default = NUMPAD_HALF_WIDTH];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      60, this->numpad_character_form(), output);
  }

  // optional bool use_auto_conversion = 61 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->use_auto_conversion(), output);
  }

  // optional uint32 auto_conversion_key = 62 [default = 13];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->auto_conversion_key(), output);
  }

  // optional .mozc.config.Config.YenSignCharacter yen_sign_character = 63 [default = YEN_SIGN];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      63, this->yen_sign_character(), output);
  }

  // optional bool use_japanese_layout = 64 [default = false];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->use_japanese_layout(), output);
  }

  // optional bool use_kana_modifier_insensitive_conversion = 65 [default = false];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->use_kana_modifier_insensitive_conversion(), output);
  }

  // optional bool use_typing_correction = 66 [default = false];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->use_typing_correction(), output);
  }

  // optional bool use_date_conversion = 80 [default = true];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(80, this->use_date_conversion(), output);
  }

  // optional bool use_single_kanji_conversion = 81 [default = true];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(81, this->use_single_kanji_conversion(), output);
  }

  // optional bool use_symbol_conversion = 82 [default = true];
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(82, this->use_symbol_conversion(), output);
  }

  // optional bool use_number_conversion = 83 [default = true];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->use_number_conversion(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool use_emoticon_conversion = 84 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(84, this->use_emoticon_conversion(), output);
  }

  // optional bool use_calculator = 85 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(85, this->use_calculator(), output);
  }

  // optional bool use_t13n_conversion = 86 [default = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(86, this->use_t13n_conversion(), output);
  }

  // optional bool use_zip_code_conversion = 87 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(87, this->use_zip_code_conversion(), output);
  }

  // optional bool use_spelling_correction = 88 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(88, this->use_spelling_correction(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_emoji_conversion = 89 [default = false];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(89, this->use_emoji_conversion(), output);
  }

  // optional .mozc.config.Config.InformationListConfig information_list_config = 90;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      90, this->_internal_information_list_config(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool use_history_suggest = 100 [default = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->use_history_suggest(), output);
  }

  // optional bool use_dictionary_suggest = 101 [default = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(101, this->use_dictionary_suggest(), output);
  }

  // optional bool use_realtime_conversion = 102 [default = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->use_realtime_conversion(), output);
  }

  // optional uint32 suggestions_size = 110 [default = 3];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(110, this->suggestions_size(), output);
  }

  // optional bool use_mode_indicator = 120 [default = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(120, this->use_mode_indicator(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool allow_cloud_handwriting = 301 [default = false];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(301, this->allow_cloud_handwriting(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.config.Config)
}

::google::protobuf::uint8* Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.config.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mozc.config.GeneralConfig general_config = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_general_config(), deterministic, target);
  }

  // optional int32 verbose_level = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->verbose_level(), target);
  }

  // optional bool incognito_mode = 20 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->incognito_mode(), target);
  }

  // optional bool check_default = 22 [default = true];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->check_default(), target);
  }

  // optional bool presentation_mode = 23 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->presentation_mode(), target);
  }

  // optional .mozc.config.Config.PreeditMethod preedit_method = 40 [default = ROMAN];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->preedit_method(), target);
  }

  // optional .mozc.config.Config.SessionKeymap session_keymap = 41 [default = NONE];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      41, this->session_keymap(), target);
  }

  // optional bytes custom_keymap_table = 42;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        42, this->custom_keymap_table(), target);
  }

  // optional bytes custom_roman_table = 43;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        43, this->custom_roman_table(), target);
  }

  // optional .mozc.config.Config.PunctuationMethod punctuation_method = 45 [default = KUTEN_TOUTEN];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      45, this->punctuation_method(), target);
  }

  // optional .mozc.config.Config.SymbolMethod symbol_method = 46 [default = CORNER_BRACKET_MIDDLE_DOT];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      46, this->symbol_method(), target);
  }

  // optional .mozc.config.Config.FundamentalCharacterForm space_character_form = 47 [default = FUNDAMENTAL_INPUT_MODE];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      47, this->space_character_form(), target);
  }

  // optional bool use_keyboard_to_change_preedit_method = 48 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->use_keyboard_to_change_preedit_method(), target);
  }

  // optional .mozc.config.Config.HistoryLearningLevel history_learning_level = 50 [default = DEFAULT_HISTORY];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      50, this->history_learning_level(), target);
  }

  // optional .mozc.config.Config.SelectionShortcut selection_shortcut = 52 [default = SHORTCUT_123456789];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      52, this->selection_shortcut(), target);
  }

  // repeated .mozc.config.Config.CharacterFormRule character_form_rules = 54;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->character_form_rules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        54, this->character_form_rules(static_cast<int>(i)), deterministic, target);
  }

  // optional bool use_auto_ime_turn_off = 56 [default = true];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->use_auto_ime_turn_off(), target);
  }

  // optional bool use_cascading_window = 58 [default = true];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(58, this->use_cascading_window(), target);
  }

  // optional .mozc.config.Config.ShiftKeyModeSwitch shift_key_mode_switch = 59 [default = ASCII_INPUT_MODE];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      59, this->shift_key_mode_switch(), target);
  }

  // optional .mozc.config.Config.NumpadCharacterForm numpad_character_form = 60 [default = NUMPAD_HALF_WIDTH];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      60, this->numpad_character_form(), target);
  }

  // optional bool use_auto_conversion = 61 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(61, this->use_auto_conversion(), target);
  }

  // optional uint32 auto_conversion_key = 62 [default = 13];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->auto_conversion_key(), target);
  }

  // optional .mozc.config.Config.YenSignCharacter yen_sign_character = 63 [default = YEN_SIGN];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      63, this->yen_sign_character(), target);
  }

  // optional bool use_japanese_layout = 64 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(64, this->use_japanese_layout(), target);
  }

  // optional bool use_kana_modifier_insensitive_conversion = 65 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->use_kana_modifier_insensitive_conversion(), target);
  }

  // optional bool use_typing_correction = 66 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->use_typing_correction(), target);
  }

  // optional bool use_date_conversion = 80 [default = true];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(80, this->use_date_conversion(), target);
  }

  // optional bool use_single_kanji_conversion = 81 [default = true];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(81, this->use_single_kanji_conversion(), target);
  }

  // optional bool use_symbol_conversion = 82 [default = true];
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(82, this->use_symbol_conversion(), target);
  }

  // optional bool use_number_conversion = 83 [default = true];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(83, this->use_number_conversion(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool use_emoticon_conversion = 84 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(84, this->use_emoticon_conversion(), target);
  }

  // optional bool use_calculator = 85 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(85, this->use_calculator(), target);
  }

  // optional bool use_t13n_conversion = 86 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(86, this->use_t13n_conversion(), target);
  }

  // optional bool use_zip_code_conversion = 87 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(87, this->use_zip_code_conversion(), target);
  }

  // optional bool use_spelling_correction = 88 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(88, this->use_spelling_correction(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_emoji_conversion = 89 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(89, this->use_emoji_conversion(), target);
  }

  // optional .mozc.config.Config.InformationListConfig information_list_config = 90;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        90, this->_internal_information_list_config(), deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool use_history_suggest = 100 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->use_history_suggest(), target);
  }

  // optional bool use_dictionary_suggest = 101 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(101, this->use_dictionary_suggest(), target);
  }

  // optional bool use_realtime_conversion = 102 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->use_realtime_conversion(), target);
  }

  // optional uint32 suggestions_size = 110 [default = 3];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(110, this->suggestions_size(), target);
  }

  // optional bool use_mode_indicator = 120 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(120, this->use_mode_indicator(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool allow_cloud_handwriting = 301 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(301, this->allow_cloud_handwriting(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.config.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.config.Config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mozc.config.Config.CharacterFormRule character_form_rules = 54;
  {
    unsigned int count = static_cast<unsigned int>(this->character_form_rules_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->character_form_rules(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes custom_keymap_table = 42;
    if (has_custom_keymap_table()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->custom_keymap_table());
    }

    // optional bytes custom_roman_table = 43;
    if (has_custom_roman_table()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->custom_roman_table());
    }

    // optional .mozc.config.GeneralConfig general_config = 1;
    if (has_general_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *general_config_);
    }

    // optional .mozc.config.Config.InformationListConfig information_list_config = 90;
    if (has_information_list_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *information_list_config_);
    }

    // optional int32 verbose_level = 10 [default = 0];
    if (has_verbose_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verbose_level());
    }

    // optional bool incognito_mode = 20 [default = false];
    if (has_incognito_mode()) {
      total_size += 2 + 1;
    }

    // optional bool presentation_mode = 23 [default = false];
    if (has_presentation_mode()) {
      total_size += 2 + 1;
    }

    // optional bool use_keyboard_to_change_preedit_method = 48 [default = false];
    if (has_use_keyboard_to_change_preedit_method()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool use_auto_conversion = 61 [default = false];
    if (has_use_auto_conversion()) {
      total_size += 2 + 1;
    }

    // optional .mozc.config.Config.PreeditMethod preedit_method = 40 [default = ROMAN];
    if (has_preedit_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->preedit_method());
    }

    // optional .mozc.config.Config.PunctuationMethod punctuation_method = 45 [default = KUTEN_TOUTEN];
    if (has_punctuation_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->punctuation_method());
    }

    // optional .mozc.config.Config.SymbolMethod symbol_method = 46 [default = CORNER_BRACKET_MIDDLE_DOT];
    if (has_symbol_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->symbol_method());
    }

    // optional .mozc.config.Config.FundamentalCharacterForm space_character_form = 47 [default = FUNDAMENTAL_INPUT_MODE];
    if (has_space_character_form()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->space_character_form());
    }

    // optional .mozc.config.Config.HistoryLearningLevel history_learning_level = 50 [default = DEFAULT_HISTORY];
    if (has_history_learning_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->history_learning_level());
    }

    // optional .mozc.config.Config.YenSignCharacter yen_sign_character = 63 [default = YEN_SIGN];
    if (has_yen_sign_character()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->yen_sign_character());
    }

    // optional bool use_japanese_layout = 64 [default = false];
    if (has_use_japanese_layout()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool use_kana_modifier_insensitive_conversion = 65 [default = false];
    if (has_use_kana_modifier_insensitive_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_typing_correction = 66 [default = false];
    if (has_use_typing_correction()) {
      total_size += 2 + 1;
    }

    // optional bool use_emoji_conversion = 89 [default = false];
    if (has_use_emoji_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool allow_cloud_handwriting = 301 [default = false];
    if (has_allow_cloud_handwriting()) {
      total_size += 2 + 1;
    }

    // optional .mozc.config.Config.SessionKeymap session_keymap = 41 [default = NONE];
    if (has_session_keymap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_keymap());
    }

    // optional .mozc.config.Config.SelectionShortcut selection_shortcut = 52 [default = SHORTCUT_123456789];
    if (has_selection_shortcut()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_shortcut());
    }

    // optional bool check_default = 22 [default = true];
    if (has_check_default()) {
      total_size += 2 + 1;
    }

    // optional bool use_auto_ime_turn_off = 56 [default = true];
    if (has_use_auto_ime_turn_off()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional bool use_cascading_window = 58 [default = true];
    if (has_use_cascading_window()) {
      total_size += 2 + 1;
    }

    // optional bool use_date_conversion = 80 [default = true];
    if (has_use_date_conversion()) {
      total_size += 2 + 1;
    }

    // optional .mozc.config.Config.ShiftKeyModeSwitch shift_key_mode_switch = 59 [default = ASCII_INPUT_MODE];
    if (has_shift_key_mode_switch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shift_key_mode_switch());
    }

    // optional .mozc.config.Config.NumpadCharacterForm numpad_character_form = 60 [default = NUMPAD_HALF_WIDTH];
    if (has_numpad_character_form()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->numpad_character_form());
    }

    // optional uint32 auto_conversion_key = 62 [default = 13];
    if (has_auto_conversion_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auto_conversion_key());
    }

    // optional bool use_single_kanji_conversion = 81 [default = true];
    if (has_use_single_kanji_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_symbol_conversion = 82 [default = true];
    if (has_use_symbol_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_number_conversion = 83 [default = true];
    if (has_use_number_conversion()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional bool use_emoticon_conversion = 84 [default = true];
    if (has_use_emoticon_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_calculator = 85 [default = true];
    if (has_use_calculator()) {
      total_size += 2 + 1;
    }

    // optional bool use_t13n_conversion = 86 [default = true];
    if (has_use_t13n_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_zip_code_conversion = 87 [default = true];
    if (has_use_zip_code_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_spelling_correction = 88 [default = true];
    if (has_use_spelling_correction()) {
      total_size += 2 + 1;
    }

    // optional bool use_history_suggest = 100 [default = true];
    if (has_use_history_suggest()) {
      total_size += 2 + 1;
    }

    // optional bool use_dictionary_suggest = 101 [default = true];
    if (has_use_dictionary_suggest()) {
      total_size += 2 + 1;
    }

    // optional bool use_realtime_conversion = 102 [default = true];
    if (has_use_realtime_conversion()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & 768u) {
    // optional bool use_mode_indicator = 120 [default = true];
    if (has_use_mode_indicator()) {
      total_size += 2 + 1;
    }

    // optional uint32 suggestions_size = 110 [default = 3];
    if (has_suggestions_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suggestions_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.config.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.config.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  character_form_rules_.MergeFrom(from.character_form_rules_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_custom_keymap_table();
      custom_keymap_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_keymap_table_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_custom_roman_table();
      custom_roman_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_roman_table_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_general_config()->::mozc::config::GeneralConfig::MergeFrom(from.general_config());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_information_list_config()->::mozc::config::Config_InformationListConfig::MergeFrom(from.information_list_config());
    }
    if (cached_has_bits & 0x00000010u) {
      verbose_level_ = from.verbose_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      incognito_mode_ = from.incognito_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      presentation_mode_ = from.presentation_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_keyboard_to_change_preedit_method_ = from.use_keyboard_to_change_preedit_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      use_auto_conversion_ = from.use_auto_conversion_;
    }
    if (cached_has_bits & 0x00000200u) {
      preedit_method_ = from.preedit_method_;
    }
    if (cached_has_bits & 0x00000400u) {
      punctuation_method_ = from.punctuation_method_;
    }
    if (cached_has_bits & 0x00000800u) {
      symbol_method_ = from.symbol_method_;
    }
    if (cached_has_bits & 0x00001000u) {
      space_character_form_ = from.space_character_form_;
    }
    if (cached_has_bits & 0x00002000u) {
      history_learning_level_ = from.history_learning_level_;
    }
    if (cached_has_bits & 0x00004000u) {
      yen_sign_character_ = from.yen_sign_character_;
    }
    if (cached_has_bits & 0x00008000u) {
      use_japanese_layout_ = from.use_japanese_layout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      use_kana_modifier_insensitive_conversion_ = from.use_kana_modifier_insensitive_conversion_;
    }
    if (cached_has_bits & 0x00020000u) {
      use_typing_correction_ = from.use_typing_correction_;
    }
    if (cached_has_bits & 0x00040000u) {
      use_emoji_conversion_ = from.use_emoji_conversion_;
    }
    if (cached_has_bits & 0x00080000u) {
      allow_cloud_handwriting_ = from.allow_cloud_handwriting_;
    }
    if (cached_has_bits & 0x00100000u) {
      session_keymap_ = from.session_keymap_;
    }
    if (cached_has_bits & 0x00200000u) {
      selection_shortcut_ = from.selection_shortcut_;
    }
    if (cached_has_bits & 0x00400000u) {
      check_default_ = from.check_default_;
    }
    if (cached_has_bits & 0x00800000u) {
      use_auto_ime_turn_off_ = from.use_auto_ime_turn_off_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      use_cascading_window_ = from.use_cascading_window_;
    }
    if (cached_has_bits & 0x02000000u) {
      use_date_conversion_ = from.use_date_conversion_;
    }
    if (cached_has_bits & 0x04000000u) {
      shift_key_mode_switch_ = from.shift_key_mode_switch_;
    }
    if (cached_has_bits & 0x08000000u) {
      numpad_character_form_ = from.numpad_character_form_;
    }
    if (cached_has_bits & 0x10000000u) {
      auto_conversion_key_ = from.auto_conversion_key_;
    }
    if (cached_has_bits & 0x20000000u) {
      use_single_kanji_conversion_ = from.use_single_kanji_conversion_;
    }
    if (cached_has_bits & 0x40000000u) {
      use_symbol_conversion_ = from.use_symbol_conversion_;
    }
    if (cached_has_bits & 0x80000000u) {
      use_number_conversion_ = from.use_number_conversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      use_emoticon_conversion_ = from.use_emoticon_conversion_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_calculator_ = from.use_calculator_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_t13n_conversion_ = from.use_t13n_conversion_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_zip_code_conversion_ = from.use_zip_code_conversion_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_spelling_correction_ = from.use_spelling_correction_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_history_suggest_ = from.use_history_suggest_;
    }
    if (cached_has_bits & 0x00000040u) {
      use_dictionary_suggest_ = from.use_dictionary_suggest_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_realtime_conversion_ = from.use_realtime_conversion_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      use_mode_indicator_ = from.use_mode_indicator_;
    }
    if (cached_has_bits & 0x00000200u) {
      suggestions_size_ = from.suggestions_size_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::Swap(Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config::InternalSwap(Config* other) {
  using std::swap;
  CastToBase(&character_form_rules_)->InternalSwap(CastToBase(&other->character_form_rules_));
  custom_keymap_table_.Swap(&other->custom_keymap_table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  custom_roman_table_.Swap(&other->custom_roman_table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(general_config_, other->general_config_);
  swap(information_list_config_, other->information_list_config_);
  swap(verbose_level_, other->verbose_level_);
  swap(incognito_mode_, other->incognito_mode_);
  swap(presentation_mode_, other->presentation_mode_);
  swap(use_keyboard_to_change_preedit_method_, other->use_keyboard_to_change_preedit_method_);
  swap(use_auto_conversion_, other->use_auto_conversion_);
  swap(preedit_method_, other->preedit_method_);
  swap(punctuation_method_, other->punctuation_method_);
  swap(symbol_method_, other->symbol_method_);
  swap(space_character_form_, other->space_character_form_);
  swap(history_learning_level_, other->history_learning_level_);
  swap(yen_sign_character_, other->yen_sign_character_);
  swap(use_japanese_layout_, other->use_japanese_layout_);
  swap(use_kana_modifier_insensitive_conversion_, other->use_kana_modifier_insensitive_conversion_);
  swap(use_typing_correction_, other->use_typing_correction_);
  swap(use_emoji_conversion_, other->use_emoji_conversion_);
  swap(allow_cloud_handwriting_, other->allow_cloud_handwriting_);
  swap(session_keymap_, other->session_keymap_);
  swap(selection_shortcut_, other->selection_shortcut_);
  swap(check_default_, other->check_default_);
  swap(use_auto_ime_turn_off_, other->use_auto_ime_turn_off_);
  swap(use_cascading_window_, other->use_cascading_window_);
  swap(use_date_conversion_, other->use_date_conversion_);
  swap(shift_key_mode_switch_, other->shift_key_mode_switch_);
  swap(numpad_character_form_, other->numpad_character_form_);
  swap(auto_conversion_key_, other->auto_conversion_key_);
  swap(use_single_kanji_conversion_, other->use_single_kanji_conversion_);
  swap(use_symbol_conversion_, other->use_symbol_conversion_);
  swap(use_number_conversion_, other->use_number_conversion_);
  swap(use_emoticon_conversion_, other->use_emoticon_conversion_);
  swap(use_calculator_, other->use_calculator_);
  swap(use_t13n_conversion_, other->use_t13n_conversion_);
  swap(use_zip_code_conversion_, other->use_zip_code_conversion_);
  swap(use_spelling_correction_, other->use_spelling_correction_);
  swap(use_history_suggest_, other->use_history_suggest_);
  swap(use_dictionary_suggest_, other->use_dictionary_suggest_);
  swap(use_realtime_conversion_, other->use_realtime_conversion_);
  swap(use_mode_indicator_, other->use_mode_indicator_);
  swap(suggestions_size_, other->suggestions_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_protocol_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace mozc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::config::GeneralConfig* Arena::CreateMaybeMessage< ::mozc::config::GeneralConfig >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::config::GeneralConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::config::Config_CharacterFormRule* Arena::CreateMaybeMessage< ::mozc::config::Config_CharacterFormRule >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::config::Config_CharacterFormRule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::config::Config_InformationListConfig* Arena::CreateMaybeMessage< ::mozc::config::Config_InformationListConfig >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::config::Config_InformationListConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::config::Config* Arena::CreateMaybeMessage< ::mozc::config::Config >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::config::Config >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
