// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/renderer_style.proto

#ifndef PROTOBUF_INCLUDED_protocol_2frenderer_5fstyle_2eproto
#define PROTOBUF_INCLUDED_protocol_2frenderer_5fstyle_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2frenderer_5fstyle_2eproto 

namespace protobuf_protocol_2frenderer_5fstyle_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protocol_2frenderer_5fstyle_2eproto
namespace mozc {
namespace renderer {
class RendererStyle;
class RendererStyleDefaultTypeInternal;
extern RendererStyleDefaultTypeInternal _RendererStyle_default_instance_;
class RendererStyle_InfolistStyle;
class RendererStyle_InfolistStyleDefaultTypeInternal;
extern RendererStyle_InfolistStyleDefaultTypeInternal _RendererStyle_InfolistStyle_default_instance_;
class RendererStyle_RGBAColor;
class RendererStyle_RGBAColorDefaultTypeInternal;
extern RendererStyle_RGBAColorDefaultTypeInternal _RendererStyle_RGBAColor_default_instance_;
class RendererStyle_TextStyle;
class RendererStyle_TextStyleDefaultTypeInternal;
extern RendererStyle_TextStyleDefaultTypeInternal _RendererStyle_TextStyle_default_instance_;
}  // namespace renderer
}  // namespace mozc
namespace google {
namespace protobuf {
template<> ::mozc::renderer::RendererStyle* Arena::CreateMaybeMessage<::mozc::renderer::RendererStyle>(Arena*);
template<> ::mozc::renderer::RendererStyle_InfolistStyle* Arena::CreateMaybeMessage<::mozc::renderer::RendererStyle_InfolistStyle>(Arena*);
template<> ::mozc::renderer::RendererStyle_RGBAColor* Arena::CreateMaybeMessage<::mozc::renderer::RendererStyle_RGBAColor>(Arena*);
template<> ::mozc::renderer::RendererStyle_TextStyle* Arena::CreateMaybeMessage<::mozc::renderer::RendererStyle_TextStyle>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mozc {
namespace renderer {

// ===================================================================

class RendererStyle_RGBAColor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mozc.renderer.RendererStyle.RGBAColor) */ {
 public:
  RendererStyle_RGBAColor();
  virtual ~RendererStyle_RGBAColor();

  RendererStyle_RGBAColor(const RendererStyle_RGBAColor& from);

  inline RendererStyle_RGBAColor& operator=(const RendererStyle_RGBAColor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RendererStyle_RGBAColor(RendererStyle_RGBAColor&& from) noexcept
    : RendererStyle_RGBAColor() {
    *this = ::std::move(from);
  }

  inline RendererStyle_RGBAColor& operator=(RendererStyle_RGBAColor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RendererStyle_RGBAColor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RendererStyle_RGBAColor* internal_default_instance() {
    return reinterpret_cast<const RendererStyle_RGBAColor*>(
               &_RendererStyle_RGBAColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RendererStyle_RGBAColor* other);
  friend void swap(RendererStyle_RGBAColor& a, RendererStyle_RGBAColor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RendererStyle_RGBAColor* New() const final {
    return CreateMaybeMessage<RendererStyle_RGBAColor>(NULL);
  }

  RendererStyle_RGBAColor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RendererStyle_RGBAColor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RendererStyle_RGBAColor& from);
  void MergeFrom(const RendererStyle_RGBAColor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RendererStyle_RGBAColor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double r = 1 [default = 0];
  bool has_r() const;
  void clear_r();
  static const int kRFieldNumber = 1;
  double r() const;
  void set_r(double value);

  // required double g = 2 [default = 0];
  bool has_g() const;
  void clear_g();
  static const int kGFieldNumber = 2;
  double g() const;
  void set_g(double value);

  // required double b = 3 [default = 0];
  bool has_b() const;
  void clear_b();
  static const int kBFieldNumber = 3;
  double b() const;
  void set_b(double value);

  // optional double a = 4 [default = 1];
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 4;
  double a() const;
  void set_a(double value);

  // @@protoc_insertion_point(class_scope:mozc.renderer.RendererStyle.RGBAColor)
 private:
  void set_has_r();
  void clear_has_r();
  void set_has_g();
  void clear_has_g();
  void set_has_b();
  void clear_has_b();
  void set_has_a();
  void clear_has_a();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double r_;
  double g_;
  double b_;
  double a_;
  friend struct ::protobuf_protocol_2frenderer_5fstyle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RendererStyle_TextStyle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mozc.renderer.RendererStyle.TextStyle) */ {
 public:
  RendererStyle_TextStyle();
  virtual ~RendererStyle_TextStyle();

  RendererStyle_TextStyle(const RendererStyle_TextStyle& from);

  inline RendererStyle_TextStyle& operator=(const RendererStyle_TextStyle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RendererStyle_TextStyle(RendererStyle_TextStyle&& from) noexcept
    : RendererStyle_TextStyle() {
    *this = ::std::move(from);
  }

  inline RendererStyle_TextStyle& operator=(RendererStyle_TextStyle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RendererStyle_TextStyle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RendererStyle_TextStyle* internal_default_instance() {
    return reinterpret_cast<const RendererStyle_TextStyle*>(
               &_RendererStyle_TextStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RendererStyle_TextStyle* other);
  friend void swap(RendererStyle_TextStyle& a, RendererStyle_TextStyle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RendererStyle_TextStyle* New() const final {
    return CreateMaybeMessage<RendererStyle_TextStyle>(NULL);
  }

  RendererStyle_TextStyle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RendererStyle_TextStyle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RendererStyle_TextStyle& from);
  void MergeFrom(const RendererStyle_TextStyle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RendererStyle_TextStyle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string font_name = 6;
  bool has_font_name() const;
  void clear_font_name();
  static const int kFontNameFieldNumber = 6;
  const ::std::string& font_name() const;
  void set_font_name(const ::std::string& value);
  #if LANG_CXX11
  void set_font_name(::std::string&& value);
  #endif
  void set_font_name(const char* value);
  void set_font_name(const char* value, size_t size);
  ::std::string* mutable_font_name();
  ::std::string* release_font_name();
  void set_allocated_font_name(::std::string* font_name);

  // optional .mozc.renderer.RendererStyle.RGBAColor foreground_color = 2;
  bool has_foreground_color() const;
  void clear_foreground_color();
  static const int kForegroundColorFieldNumber = 2;
  private:
  const ::mozc::renderer::RendererStyle_RGBAColor& _internal_foreground_color() const;
  public:
  const ::mozc::renderer::RendererStyle_RGBAColor& foreground_color() const;
  ::mozc::renderer::RendererStyle_RGBAColor* release_foreground_color();
  ::mozc::renderer::RendererStyle_RGBAColor* mutable_foreground_color();
  void set_allocated_foreground_color(::mozc::renderer::RendererStyle_RGBAColor* foreground_color);

  // optional .mozc.renderer.RendererStyle.RGBAColor background_color = 3;
  bool has_background_color() const;
  void clear_background_color();
  static const int kBackgroundColorFieldNumber = 3;
  private:
  const ::mozc::renderer::RendererStyle_RGBAColor& _internal_background_color() const;
  public:
  const ::mozc::renderer::RendererStyle_RGBAColor& background_color() const;
  ::mozc::renderer::RendererStyle_RGBAColor* release_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* mutable_background_color();
  void set_allocated_background_color(::mozc::renderer::RendererStyle_RGBAColor* background_color);

  // optional double font_size = 1;
  bool has_font_size() const;
  void clear_font_size();
  static const int kFontSizeFieldNumber = 1;
  double font_size() const;
  void set_font_size(double value);

  // optional int32 left_padding = 4 [default = 0];
  bool has_left_padding() const;
  void clear_left_padding();
  static const int kLeftPaddingFieldNumber = 4;
  ::google::protobuf::int32 left_padding() const;
  void set_left_padding(::google::protobuf::int32 value);

  // optional int32 right_padding = 5 [default = 0];
  bool has_right_padding() const;
  void clear_right_padding();
  static const int kRightPaddingFieldNumber = 5;
  ::google::protobuf::int32 right_padding() const;
  void set_right_padding(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mozc.renderer.RendererStyle.TextStyle)
 private:
  void set_has_font_size();
  void clear_has_font_size();
  void set_has_foreground_color();
  void clear_has_foreground_color();
  void set_has_background_color();
  void clear_has_background_color();
  void set_has_left_padding();
  void clear_has_left_padding();
  void set_has_right_padding();
  void clear_has_right_padding();
  void set_has_font_name();
  void clear_has_font_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr font_name_;
  ::mozc::renderer::RendererStyle_RGBAColor* foreground_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* background_color_;
  double font_size_;
  ::google::protobuf::int32 left_padding_;
  ::google::protobuf::int32 right_padding_;
  friend struct ::protobuf_protocol_2frenderer_5fstyle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RendererStyle_InfolistStyle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mozc.renderer.RendererStyle.InfolistStyle) */ {
 public:
  RendererStyle_InfolistStyle();
  virtual ~RendererStyle_InfolistStyle();

  RendererStyle_InfolistStyle(const RendererStyle_InfolistStyle& from);

  inline RendererStyle_InfolistStyle& operator=(const RendererStyle_InfolistStyle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RendererStyle_InfolistStyle(RendererStyle_InfolistStyle&& from) noexcept
    : RendererStyle_InfolistStyle() {
    *this = ::std::move(from);
  }

  inline RendererStyle_InfolistStyle& operator=(RendererStyle_InfolistStyle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RendererStyle_InfolistStyle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RendererStyle_InfolistStyle* internal_default_instance() {
    return reinterpret_cast<const RendererStyle_InfolistStyle*>(
               &_RendererStyle_InfolistStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RendererStyle_InfolistStyle* other);
  friend void swap(RendererStyle_InfolistStyle& a, RendererStyle_InfolistStyle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RendererStyle_InfolistStyle* New() const final {
    return CreateMaybeMessage<RendererStyle_InfolistStyle>(NULL);
  }

  RendererStyle_InfolistStyle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RendererStyle_InfolistStyle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RendererStyle_InfolistStyle& from);
  void MergeFrom(const RendererStyle_InfolistStyle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RendererStyle_InfolistStyle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string caption_string = 1;
  bool has_caption_string() const;
  void clear_caption_string();
  static const int kCaptionStringFieldNumber = 1;
  const ::std::string& caption_string() const;
  void set_caption_string(const ::std::string& value);
  #if LANG_CXX11
  void set_caption_string(::std::string&& value);
  #endif
  void set_caption_string(const char* value);
  void set_caption_string(const char* value, size_t size);
  ::std::string* mutable_caption_string();
  ::std::string* release_caption_string();
  void set_allocated_caption_string(::std::string* caption_string);

  // optional .mozc.renderer.RendererStyle.TextStyle caption_style = 7;
  bool has_caption_style() const;
  void clear_caption_style();
  static const int kCaptionStyleFieldNumber = 7;
  private:
  const ::mozc::renderer::RendererStyle_TextStyle& _internal_caption_style() const;
  public:
  const ::mozc::renderer::RendererStyle_TextStyle& caption_style() const;
  ::mozc::renderer::RendererStyle_TextStyle* release_caption_style();
  ::mozc::renderer::RendererStyle_TextStyle* mutable_caption_style();
  void set_allocated_caption_style(::mozc::renderer::RendererStyle_TextStyle* caption_style);

  // optional .mozc.renderer.RendererStyle.TextStyle title_style = 8;
  bool has_title_style() const;
  void clear_title_style();
  static const int kTitleStyleFieldNumber = 8;
  private:
  const ::mozc::renderer::RendererStyle_TextStyle& _internal_title_style() const;
  public:
  const ::mozc::renderer::RendererStyle_TextStyle& title_style() const;
  ::mozc::renderer::RendererStyle_TextStyle* release_title_style();
  ::mozc::renderer::RendererStyle_TextStyle* mutable_title_style();
  void set_allocated_title_style(::mozc::renderer::RendererStyle_TextStyle* title_style);

  // optional .mozc.renderer.RendererStyle.TextStyle description_style = 9;
  bool has_description_style() const;
  void clear_description_style();
  static const int kDescriptionStyleFieldNumber = 9;
  private:
  const ::mozc::renderer::RendererStyle_TextStyle& _internal_description_style() const;
  public:
  const ::mozc::renderer::RendererStyle_TextStyle& description_style() const;
  ::mozc::renderer::RendererStyle_TextStyle* release_description_style();
  ::mozc::renderer::RendererStyle_TextStyle* mutable_description_style();
  void set_allocated_description_style(::mozc::renderer::RendererStyle_TextStyle* description_style);

  // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 10;
  bool has_border_color() const;
  void clear_border_color();
  static const int kBorderColorFieldNumber = 10;
  private:
  const ::mozc::renderer::RendererStyle_RGBAColor& _internal_border_color() const;
  public:
  const ::mozc::renderer::RendererStyle_RGBAColor& border_color() const;
  ::mozc::renderer::RendererStyle_RGBAColor* release_border_color();
  ::mozc::renderer::RendererStyle_RGBAColor* mutable_border_color();
  void set_allocated_border_color(::mozc::renderer::RendererStyle_RGBAColor* border_color);

  // optional .mozc.renderer.RendererStyle.RGBAColor caption_background_color = 11;
  bool has_caption_background_color() const;
  void clear_caption_background_color();
  static const int kCaptionBackgroundColorFieldNumber = 11;
  private:
  const ::mozc::renderer::RendererStyle_RGBAColor& _internal_caption_background_color() const;
  public:
  const ::mozc::renderer::RendererStyle_RGBAColor& caption_background_color() const;
  ::mozc::renderer::RendererStyle_RGBAColor* release_caption_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* mutable_caption_background_color();
  void set_allocated_caption_background_color(::mozc::renderer::RendererStyle_RGBAColor* caption_background_color);

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 12;
  bool has_focused_background_color() const;
  void clear_focused_background_color();
  static const int kFocusedBackgroundColorFieldNumber = 12;
  private:
  const ::mozc::renderer::RendererStyle_RGBAColor& _internal_focused_background_color() const;
  public:
  const ::mozc::renderer::RendererStyle_RGBAColor& focused_background_color() const;
  ::mozc::renderer::RendererStyle_RGBAColor* release_focused_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* mutable_focused_background_color();
  void set_allocated_focused_background_color(::mozc::renderer::RendererStyle_RGBAColor* focused_background_color);

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 13;
  bool has_focused_border_color() const;
  void clear_focused_border_color();
  static const int kFocusedBorderColorFieldNumber = 13;
  private:
  const ::mozc::renderer::RendererStyle_RGBAColor& _internal_focused_border_color() const;
  public:
  const ::mozc::renderer::RendererStyle_RGBAColor& focused_border_color() const;
  ::mozc::renderer::RendererStyle_RGBAColor* release_focused_border_color();
  ::mozc::renderer::RendererStyle_RGBAColor* mutable_focused_border_color();
  void set_allocated_focused_border_color(::mozc::renderer::RendererStyle_RGBAColor* focused_border_color);

  // optional int32 caption_height = 2;
  bool has_caption_height() const;
  void clear_caption_height();
  static const int kCaptionHeightFieldNumber = 2;
  ::google::protobuf::int32 caption_height() const;
  void set_caption_height(::google::protobuf::int32 value);

  // optional int32 caption_padding = 3;
  bool has_caption_padding() const;
  void clear_caption_padding();
  static const int kCaptionPaddingFieldNumber = 3;
  ::google::protobuf::int32 caption_padding() const;
  void set_caption_padding(::google::protobuf::int32 value);

  // optional int32 window_border = 4;
  bool has_window_border() const;
  void clear_window_border();
  static const int kWindowBorderFieldNumber = 4;
  ::google::protobuf::int32 window_border() const;
  void set_window_border(::google::protobuf::int32 value);

  // optional int32 row_rect_padding = 5;
  bool has_row_rect_padding() const;
  void clear_row_rect_padding();
  static const int kRowRectPaddingFieldNumber = 5;
  ::google::protobuf::int32 row_rect_padding() const;
  void set_row_rect_padding(::google::protobuf::int32 value);

  // optional int32 window_width = 6;
  bool has_window_width() const;
  void clear_window_width();
  static const int kWindowWidthFieldNumber = 6;
  ::google::protobuf::int32 window_width() const;
  void set_window_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mozc.renderer.RendererStyle.InfolistStyle)
 private:
  void set_has_caption_string();
  void clear_has_caption_string();
  void set_has_caption_height();
  void clear_has_caption_height();
  void set_has_caption_padding();
  void clear_has_caption_padding();
  void set_has_window_border();
  void clear_has_window_border();
  void set_has_row_rect_padding();
  void clear_has_row_rect_padding();
  void set_has_window_width();
  void clear_has_window_width();
  void set_has_caption_style();
  void clear_has_caption_style();
  void set_has_title_style();
  void clear_has_title_style();
  void set_has_description_style();
  void clear_has_description_style();
  void set_has_border_color();
  void clear_has_border_color();
  void set_has_caption_background_color();
  void clear_has_caption_background_color();
  void set_has_focused_background_color();
  void clear_has_focused_background_color();
  void set_has_focused_border_color();
  void clear_has_focused_border_color();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr caption_string_;
  ::mozc::renderer::RendererStyle_TextStyle* caption_style_;
  ::mozc::renderer::RendererStyle_TextStyle* title_style_;
  ::mozc::renderer::RendererStyle_TextStyle* description_style_;
  ::mozc::renderer::RendererStyle_RGBAColor* border_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* caption_background_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* focused_background_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* focused_border_color_;
  ::google::protobuf::int32 caption_height_;
  ::google::protobuf::int32 caption_padding_;
  ::google::protobuf::int32 window_border_;
  ::google::protobuf::int32 row_rect_padding_;
  ::google::protobuf::int32 window_width_;
  friend struct ::protobuf_protocol_2frenderer_5fstyle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RendererStyle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mozc.renderer.RendererStyle) */ {
 public:
  RendererStyle();
  virtual ~RendererStyle();

  RendererStyle(const RendererStyle& from);

  inline RendererStyle& operator=(const RendererStyle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RendererStyle(RendererStyle&& from) noexcept
    : RendererStyle() {
    *this = ::std::move(from);
  }

  inline RendererStyle& operator=(RendererStyle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RendererStyle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RendererStyle* internal_default_instance() {
    return reinterpret_cast<const RendererStyle*>(
               &_RendererStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RendererStyle* other);
  friend void swap(RendererStyle& a, RendererStyle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RendererStyle* New() const final {
    return CreateMaybeMessage<RendererStyle>(NULL);
  }

  RendererStyle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RendererStyle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RendererStyle& from);
  void MergeFrom(const RendererStyle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RendererStyle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RendererStyle_RGBAColor RGBAColor;
  typedef RendererStyle_TextStyle TextStyle;
  typedef RendererStyle_InfolistStyle InfolistStyle;

  // accessors -------------------------------------------------------

  // repeated .mozc.renderer.RendererStyle.TextStyle text_styles = 6;
  int text_styles_size() const;
  void clear_text_styles();
  static const int kTextStylesFieldNumber = 6;
  ::mozc::renderer::RendererStyle_TextStyle* mutable_text_styles(int index);
  ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_TextStyle >*
      mutable_text_styles();
  const ::mozc::renderer::RendererStyle_TextStyle& text_styles(int index) const;
  ::mozc::renderer::RendererStyle_TextStyle* add_text_styles();
  const ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_TextStyle >&
      text_styles() const;

  // repeated .mozc.renderer.RendererStyle.RGBAColor footer_border_colors = 7;
  int footer_border_colors_size() const;
  void clear_footer_border_colors();
  static const int kFooterBorderColorsFieldNumber = 7;
  ::mozc::renderer::RendererStyle_RGBAColor* mutable_footer_border_colors(int index);
  ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_RGBAColor >*
      mutable_footer_border_colors();
  const ::mozc::renderer::RendererStyle_RGBAColor& footer_border_colors(int index) const;
  ::mozc::renderer::RendererStyle_RGBAColor* add_footer_border_colors();
  const ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_RGBAColor >&
      footer_border_colors() const;

  // optional string column_minimum_width_string = 5;
  bool has_column_minimum_width_string() const;
  void clear_column_minimum_width_string();
  static const int kColumnMinimumWidthStringFieldNumber = 5;
  const ::std::string& column_minimum_width_string() const;
  void set_column_minimum_width_string(const ::std::string& value);
  #if LANG_CXX11
  void set_column_minimum_width_string(::std::string&& value);
  #endif
  void set_column_minimum_width_string(const char* value);
  void set_column_minimum_width_string(const char* value, size_t size);
  ::std::string* mutable_column_minimum_width_string();
  ::std::string* release_column_minimum_width_string();
  void set_allocated_column_minimum_width_string(::std::string* column_minimum_width_string);

  // optional string logo_file_name = 17;
  bool has_logo_file_name() const;
  void clear_logo_file_name();
  static const int kLogoFileNameFieldNumber = 17;
  const ::std::string& logo_file_name() const;
  void set_logo_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_logo_file_name(::std::string&& value);
  #endif
  void set_logo_file_name(const char* value);
  void set_logo_file_name(const char* value, size_t size);
  ::std::string* mutable_logo_file_name();
  ::std::string* release_logo_file_name();
  void set_allocated_logo_file_name(::std::string* logo_file_name);

  // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 4;
  bool has_border_color() const;
  void clear_border_color();
  static const int kBorderColorFieldNumber = 4;
  private:
  const ::mozc::renderer::RendererStyle_RGBAColor& _internal_border_color() const;
  public:
  const ::mozc::renderer::RendererStyle_RGBAColor& border_color() const;
  ::mozc::renderer::RendererStyle_RGBAColor* release_border_color();
  ::mozc::renderer::RendererStyle_RGBAColor* mutable_border_color();
  void set_allocated_border_color(::mozc::renderer::RendererStyle_RGBAColor* border_color);

  // optional .mozc.renderer.RendererStyle.TextStyle footer_style = 8;
  bool has_footer_style() const;
  void clear_footer_style();
  static const int kFooterStyleFieldNumber = 8;
  private:
  const ::mozc::renderer::RendererStyle_TextStyle& _internal_footer_style() const;
  public:
  const ::mozc::renderer::RendererStyle_TextStyle& footer_style() const;
  ::mozc::renderer::RendererStyle_TextStyle* release_footer_style();
  ::mozc::renderer::RendererStyle_TextStyle* mutable_footer_style();
  void set_allocated_footer_style(::mozc::renderer::RendererStyle_TextStyle* footer_style);

  // optional .mozc.renderer.RendererStyle.TextStyle footer_sub_label_style = 9;
  bool has_footer_sub_label_style() const;
  void clear_footer_sub_label_style();
  static const int kFooterSubLabelStyleFieldNumber = 9;
  private:
  const ::mozc::renderer::RendererStyle_TextStyle& _internal_footer_sub_label_style() const;
  public:
  const ::mozc::renderer::RendererStyle_TextStyle& footer_sub_label_style() const;
  ::mozc::renderer::RendererStyle_TextStyle* release_footer_sub_label_style();
  ::mozc::renderer::RendererStyle_TextStyle* mutable_footer_sub_label_style();
  void set_allocated_footer_sub_label_style(::mozc::renderer::RendererStyle_TextStyle* footer_sub_label_style);

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 10;
  bool has_focused_background_color() const;
  void clear_focused_background_color();
  static const int kFocusedBackgroundColorFieldNumber = 10;
  private:
  const ::mozc::renderer::RendererStyle_RGBAColor& _internal_focused_background_color() const;
  public:
  const ::mozc::renderer::RendererStyle_RGBAColor& focused_background_color() const;
  ::mozc::renderer::RendererStyle_RGBAColor* release_focused_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* mutable_focused_background_color();
  void set_allocated_focused_background_color(::mozc::renderer::RendererStyle_RGBAColor* focused_background_color);

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 11;
  bool has_focused_border_color() const;
  void clear_focused_border_color();
  static const int kFocusedBorderColorFieldNumber = 11;
  private:
  const ::mozc::renderer::RendererStyle_RGBAColor& _internal_focused_border_color() const;
  public:
  const ::mozc::renderer::RendererStyle_RGBAColor& focused_border_color() const;
  ::mozc::renderer::RendererStyle_RGBAColor* release_focused_border_color();
  ::mozc::renderer::RendererStyle_RGBAColor* mutable_focused_border_color();
  void set_allocated_focused_border_color(::mozc::renderer::RendererStyle_RGBAColor* focused_border_color);

  // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_background_color = 12;
  bool has_scrollbar_background_color() const;
  void clear_scrollbar_background_color();
  static const int kScrollbarBackgroundColorFieldNumber = 12;
  private:
  const ::mozc::renderer::RendererStyle_RGBAColor& _internal_scrollbar_background_color() const;
  public:
  const ::mozc::renderer::RendererStyle_RGBAColor& scrollbar_background_color() const;
  ::mozc::renderer::RendererStyle_RGBAColor* release_scrollbar_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* mutable_scrollbar_background_color();
  void set_allocated_scrollbar_background_color(::mozc::renderer::RendererStyle_RGBAColor* scrollbar_background_color);

  // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_indicator_color = 13;
  bool has_scrollbar_indicator_color() const;
  void clear_scrollbar_indicator_color();
  static const int kScrollbarIndicatorColorFieldNumber = 13;
  private:
  const ::mozc::renderer::RendererStyle_RGBAColor& _internal_scrollbar_indicator_color() const;
  public:
  const ::mozc::renderer::RendererStyle_RGBAColor& scrollbar_indicator_color() const;
  ::mozc::renderer::RendererStyle_RGBAColor* release_scrollbar_indicator_color();
  ::mozc::renderer::RendererStyle_RGBAColor* mutable_scrollbar_indicator_color();
  void set_allocated_scrollbar_indicator_color(::mozc::renderer::RendererStyle_RGBAColor* scrollbar_indicator_color);

  // optional .mozc.renderer.RendererStyle.RGBAColor footer_top_color = 15;
  bool has_footer_top_color() const;
  void clear_footer_top_color();
  static const int kFooterTopColorFieldNumber = 15;
  private:
  const ::mozc::renderer::RendererStyle_RGBAColor& _internal_footer_top_color() const;
  public:
  const ::mozc::renderer::RendererStyle_RGBAColor& footer_top_color() const;
  ::mozc::renderer::RendererStyle_RGBAColor* release_footer_top_color();
  ::mozc::renderer::RendererStyle_RGBAColor* mutable_footer_top_color();
  void set_allocated_footer_top_color(::mozc::renderer::RendererStyle_RGBAColor* footer_top_color);

  // optional .mozc.renderer.RendererStyle.RGBAColor footer_bottom_color = 16;
  bool has_footer_bottom_color() const;
  void clear_footer_bottom_color();
  static const int kFooterBottomColorFieldNumber = 16;
  private:
  const ::mozc::renderer::RendererStyle_RGBAColor& _internal_footer_bottom_color() const;
  public:
  const ::mozc::renderer::RendererStyle_RGBAColor& footer_bottom_color() const;
  ::mozc::renderer::RendererStyle_RGBAColor* release_footer_bottom_color();
  ::mozc::renderer::RendererStyle_RGBAColor* mutable_footer_bottom_color();
  void set_allocated_footer_bottom_color(::mozc::renderer::RendererStyle_RGBAColor* footer_bottom_color);

  // optional .mozc.renderer.RendererStyle.InfolistStyle infolist_style = 18;
  bool has_infolist_style() const;
  void clear_infolist_style();
  static const int kInfolistStyleFieldNumber = 18;
  private:
  const ::mozc::renderer::RendererStyle_InfolistStyle& _internal_infolist_style() const;
  public:
  const ::mozc::renderer::RendererStyle_InfolistStyle& infolist_style() const;
  ::mozc::renderer::RendererStyle_InfolistStyle* release_infolist_style();
  ::mozc::renderer::RendererStyle_InfolistStyle* mutable_infolist_style();
  void set_allocated_infolist_style(::mozc::renderer::RendererStyle_InfolistStyle* infolist_style);

  // optional int32 window_border = 1;
  bool has_window_border() const;
  void clear_window_border();
  static const int kWindowBorderFieldNumber = 1;
  ::google::protobuf::int32 window_border() const;
  void set_window_border(::google::protobuf::int32 value);

  // optional int32 footer_height = 2;
  bool has_footer_height() const;
  void clear_footer_height();
  static const int kFooterHeightFieldNumber = 2;
  ::google::protobuf::int32 footer_height() const;
  void set_footer_height(::google::protobuf::int32 value);

  // optional int32 row_rect_padding = 3;
  bool has_row_rect_padding() const;
  void clear_row_rect_padding();
  static const int kRowRectPaddingFieldNumber = 3;
  ::google::protobuf::int32 row_rect_padding() const;
  void set_row_rect_padding(::google::protobuf::int32 value);

  // optional int32 scrollbar_width = 14;
  bool has_scrollbar_width() const;
  void clear_scrollbar_width();
  static const int kScrollbarWidthFieldNumber = 14;
  ::google::protobuf::int32 scrollbar_width() const;
  void set_scrollbar_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mozc.renderer.RendererStyle)
 private:
  void set_has_window_border();
  void clear_has_window_border();
  void set_has_footer_height();
  void clear_has_footer_height();
  void set_has_row_rect_padding();
  void clear_has_row_rect_padding();
  void set_has_border_color();
  void clear_has_border_color();
  void set_has_column_minimum_width_string();
  void clear_has_column_minimum_width_string();
  void set_has_footer_style();
  void clear_has_footer_style();
  void set_has_footer_sub_label_style();
  void clear_has_footer_sub_label_style();
  void set_has_focused_background_color();
  void clear_has_focused_background_color();
  void set_has_focused_border_color();
  void clear_has_focused_border_color();
  void set_has_scrollbar_background_color();
  void clear_has_scrollbar_background_color();
  void set_has_scrollbar_indicator_color();
  void clear_has_scrollbar_indicator_color();
  void set_has_scrollbar_width();
  void clear_has_scrollbar_width();
  void set_has_footer_top_color();
  void clear_has_footer_top_color();
  void set_has_footer_bottom_color();
  void clear_has_footer_bottom_color();
  void set_has_logo_file_name();
  void clear_has_logo_file_name();
  void set_has_infolist_style();
  void clear_has_infolist_style();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_TextStyle > text_styles_;
  ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_RGBAColor > footer_border_colors_;
  ::google::protobuf::internal::ArenaStringPtr column_minimum_width_string_;
  ::google::protobuf::internal::ArenaStringPtr logo_file_name_;
  ::mozc::renderer::RendererStyle_RGBAColor* border_color_;
  ::mozc::renderer::RendererStyle_TextStyle* footer_style_;
  ::mozc::renderer::RendererStyle_TextStyle* footer_sub_label_style_;
  ::mozc::renderer::RendererStyle_RGBAColor* focused_background_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* focused_border_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* scrollbar_background_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* scrollbar_indicator_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* footer_top_color_;
  ::mozc::renderer::RendererStyle_RGBAColor* footer_bottom_color_;
  ::mozc::renderer::RendererStyle_InfolistStyle* infolist_style_;
  ::google::protobuf::int32 window_border_;
  ::google::protobuf::int32 footer_height_;
  ::google::protobuf::int32 row_rect_padding_;
  ::google::protobuf::int32 scrollbar_width_;
  friend struct ::protobuf_protocol_2frenderer_5fstyle_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RendererStyle_RGBAColor

// required double r = 1 [default = 0];
inline bool RendererStyle_RGBAColor::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RendererStyle_RGBAColor::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RendererStyle_RGBAColor::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RendererStyle_RGBAColor::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline double RendererStyle_RGBAColor::r() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.RGBAColor.r)
  return r_;
}
inline void RendererStyle_RGBAColor::set_r(double value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.RGBAColor.r)
}

// required double g = 2 [default = 0];
inline bool RendererStyle_RGBAColor::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RendererStyle_RGBAColor::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RendererStyle_RGBAColor::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RendererStyle_RGBAColor::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline double RendererStyle_RGBAColor::g() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.RGBAColor.g)
  return g_;
}
inline void RendererStyle_RGBAColor::set_g(double value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.RGBAColor.g)
}

// required double b = 3 [default = 0];
inline bool RendererStyle_RGBAColor::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RendererStyle_RGBAColor::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RendererStyle_RGBAColor::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RendererStyle_RGBAColor::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline double RendererStyle_RGBAColor::b() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.RGBAColor.b)
  return b_;
}
inline void RendererStyle_RGBAColor::set_b(double value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.RGBAColor.b)
}

// optional double a = 4 [default = 1];
inline bool RendererStyle_RGBAColor::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RendererStyle_RGBAColor::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RendererStyle_RGBAColor::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RendererStyle_RGBAColor::clear_a() {
  a_ = 1;
  clear_has_a();
}
inline double RendererStyle_RGBAColor::a() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.RGBAColor.a)
  return a_;
}
inline void RendererStyle_RGBAColor::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.RGBAColor.a)
}

// -------------------------------------------------------------------

// RendererStyle_TextStyle

// optional double font_size = 1;
inline bool RendererStyle_TextStyle::has_font_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RendererStyle_TextStyle::set_has_font_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RendererStyle_TextStyle::clear_has_font_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RendererStyle_TextStyle::clear_font_size() {
  font_size_ = 0;
  clear_has_font_size();
}
inline double RendererStyle_TextStyle::font_size() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.TextStyle.font_size)
  return font_size_;
}
inline void RendererStyle_TextStyle::set_font_size(double value) {
  set_has_font_size();
  font_size_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.TextStyle.font_size)
}

// optional .mozc.renderer.RendererStyle.RGBAColor foreground_color = 2;
inline bool RendererStyle_TextStyle::has_foreground_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RendererStyle_TextStyle::set_has_foreground_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RendererStyle_TextStyle::clear_has_foreground_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RendererStyle_TextStyle::clear_foreground_color() {
  if (foreground_color_ != NULL) foreground_color_->Clear();
  clear_has_foreground_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_TextStyle::_internal_foreground_color() const {
  return *foreground_color_;
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_TextStyle::foreground_color() const {
  const ::mozc::renderer::RendererStyle_RGBAColor* p = foreground_color_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.TextStyle.foreground_color)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_RGBAColor*>(
      &::mozc::renderer::_RendererStyle_RGBAColor_default_instance_);
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_TextStyle::release_foreground_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.TextStyle.foreground_color)
  clear_has_foreground_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = foreground_color_;
  foreground_color_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_TextStyle::mutable_foreground_color() {
  set_has_foreground_color();
  if (foreground_color_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_RGBAColor>(GetArenaNoVirtual());
    foreground_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.TextStyle.foreground_color)
  return foreground_color_;
}
inline void RendererStyle_TextStyle::set_allocated_foreground_color(::mozc::renderer::RendererStyle_RGBAColor* foreground_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete foreground_color_;
  }
  if (foreground_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      foreground_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, foreground_color, submessage_arena);
    }
    set_has_foreground_color();
  } else {
    clear_has_foreground_color();
  }
  foreground_color_ = foreground_color;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.TextStyle.foreground_color)
}

// optional .mozc.renderer.RendererStyle.RGBAColor background_color = 3;
inline bool RendererStyle_TextStyle::has_background_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RendererStyle_TextStyle::set_has_background_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RendererStyle_TextStyle::clear_has_background_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RendererStyle_TextStyle::clear_background_color() {
  if (background_color_ != NULL) background_color_->Clear();
  clear_has_background_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_TextStyle::_internal_background_color() const {
  return *background_color_;
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_TextStyle::background_color() const {
  const ::mozc::renderer::RendererStyle_RGBAColor* p = background_color_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.TextStyle.background_color)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_RGBAColor*>(
      &::mozc::renderer::_RendererStyle_RGBAColor_default_instance_);
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_TextStyle::release_background_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.TextStyle.background_color)
  clear_has_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = background_color_;
  background_color_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_TextStyle::mutable_background_color() {
  set_has_background_color();
  if (background_color_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_RGBAColor>(GetArenaNoVirtual());
    background_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.TextStyle.background_color)
  return background_color_;
}
inline void RendererStyle_TextStyle::set_allocated_background_color(::mozc::renderer::RendererStyle_RGBAColor* background_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete background_color_;
  }
  if (background_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      background_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, background_color, submessage_arena);
    }
    set_has_background_color();
  } else {
    clear_has_background_color();
  }
  background_color_ = background_color;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.TextStyle.background_color)
}

// optional int32 left_padding = 4 [default = 0];
inline bool RendererStyle_TextStyle::has_left_padding() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RendererStyle_TextStyle::set_has_left_padding() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RendererStyle_TextStyle::clear_has_left_padding() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RendererStyle_TextStyle::clear_left_padding() {
  left_padding_ = 0;
  clear_has_left_padding();
}
inline ::google::protobuf::int32 RendererStyle_TextStyle::left_padding() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.TextStyle.left_padding)
  return left_padding_;
}
inline void RendererStyle_TextStyle::set_left_padding(::google::protobuf::int32 value) {
  set_has_left_padding();
  left_padding_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.TextStyle.left_padding)
}

// optional int32 right_padding = 5 [default = 0];
inline bool RendererStyle_TextStyle::has_right_padding() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RendererStyle_TextStyle::set_has_right_padding() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RendererStyle_TextStyle::clear_has_right_padding() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RendererStyle_TextStyle::clear_right_padding() {
  right_padding_ = 0;
  clear_has_right_padding();
}
inline ::google::protobuf::int32 RendererStyle_TextStyle::right_padding() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.TextStyle.right_padding)
  return right_padding_;
}
inline void RendererStyle_TextStyle::set_right_padding(::google::protobuf::int32 value) {
  set_has_right_padding();
  right_padding_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.TextStyle.right_padding)
}

// optional string font_name = 6;
inline bool RendererStyle_TextStyle::has_font_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RendererStyle_TextStyle::set_has_font_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RendererStyle_TextStyle::clear_has_font_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RendererStyle_TextStyle::clear_font_name() {
  font_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_font_name();
}
inline const ::std::string& RendererStyle_TextStyle::font_name() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.TextStyle.font_name)
  return font_name_.GetNoArena();
}
inline void RendererStyle_TextStyle::set_font_name(const ::std::string& value) {
  set_has_font_name();
  font_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.TextStyle.font_name)
}
#if LANG_CXX11
inline void RendererStyle_TextStyle::set_font_name(::std::string&& value) {
  set_has_font_name();
  font_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mozc.renderer.RendererStyle.TextStyle.font_name)
}
#endif
inline void RendererStyle_TextStyle::set_font_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_font_name();
  font_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.renderer.RendererStyle.TextStyle.font_name)
}
inline void RendererStyle_TextStyle::set_font_name(const char* value, size_t size) {
  set_has_font_name();
  font_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.renderer.RendererStyle.TextStyle.font_name)
}
inline ::std::string* RendererStyle_TextStyle::mutable_font_name() {
  set_has_font_name();
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.TextStyle.font_name)
  return font_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RendererStyle_TextStyle::release_font_name() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.TextStyle.font_name)
  if (!has_font_name()) {
    return NULL;
  }
  clear_has_font_name();
  return font_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RendererStyle_TextStyle::set_allocated_font_name(::std::string* font_name) {
  if (font_name != NULL) {
    set_has_font_name();
  } else {
    clear_has_font_name();
  }
  font_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), font_name);
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.TextStyle.font_name)
}

// -------------------------------------------------------------------

// RendererStyle_InfolistStyle

// optional string caption_string = 1;
inline bool RendererStyle_InfolistStyle::has_caption_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_caption_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RendererStyle_InfolistStyle::clear_has_caption_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RendererStyle_InfolistStyle::clear_caption_string() {
  caption_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caption_string();
}
inline const ::std::string& RendererStyle_InfolistStyle::caption_string() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.caption_string)
  return caption_string_.GetNoArena();
}
inline void RendererStyle_InfolistStyle::set_caption_string(const ::std::string& value) {
  set_has_caption_string();
  caption_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.InfolistStyle.caption_string)
}
#if LANG_CXX11
inline void RendererStyle_InfolistStyle::set_caption_string(::std::string&& value) {
  set_has_caption_string();
  caption_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mozc.renderer.RendererStyle.InfolistStyle.caption_string)
}
#endif
inline void RendererStyle_InfolistStyle::set_caption_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_caption_string();
  caption_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.renderer.RendererStyle.InfolistStyle.caption_string)
}
inline void RendererStyle_InfolistStyle::set_caption_string(const char* value, size_t size) {
  set_has_caption_string();
  caption_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.renderer.RendererStyle.InfolistStyle.caption_string)
}
inline ::std::string* RendererStyle_InfolistStyle::mutable_caption_string() {
  set_has_caption_string();
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.InfolistStyle.caption_string)
  return caption_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RendererStyle_InfolistStyle::release_caption_string() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.InfolistStyle.caption_string)
  if (!has_caption_string()) {
    return NULL;
  }
  clear_has_caption_string();
  return caption_string_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RendererStyle_InfolistStyle::set_allocated_caption_string(::std::string* caption_string) {
  if (caption_string != NULL) {
    set_has_caption_string();
  } else {
    clear_has_caption_string();
  }
  caption_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caption_string);
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.InfolistStyle.caption_string)
}

// optional int32 caption_height = 2;
inline bool RendererStyle_InfolistStyle::has_caption_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_caption_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RendererStyle_InfolistStyle::clear_has_caption_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RendererStyle_InfolistStyle::clear_caption_height() {
  caption_height_ = 0;
  clear_has_caption_height();
}
inline ::google::protobuf::int32 RendererStyle_InfolistStyle::caption_height() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.caption_height)
  return caption_height_;
}
inline void RendererStyle_InfolistStyle::set_caption_height(::google::protobuf::int32 value) {
  set_has_caption_height();
  caption_height_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.InfolistStyle.caption_height)
}

// optional int32 caption_padding = 3;
inline bool RendererStyle_InfolistStyle::has_caption_padding() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_caption_padding() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RendererStyle_InfolistStyle::clear_has_caption_padding() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RendererStyle_InfolistStyle::clear_caption_padding() {
  caption_padding_ = 0;
  clear_has_caption_padding();
}
inline ::google::protobuf::int32 RendererStyle_InfolistStyle::caption_padding() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.caption_padding)
  return caption_padding_;
}
inline void RendererStyle_InfolistStyle::set_caption_padding(::google::protobuf::int32 value) {
  set_has_caption_padding();
  caption_padding_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.InfolistStyle.caption_padding)
}

// optional int32 window_border = 4;
inline bool RendererStyle_InfolistStyle::has_window_border() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_window_border() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RendererStyle_InfolistStyle::clear_has_window_border() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RendererStyle_InfolistStyle::clear_window_border() {
  window_border_ = 0;
  clear_has_window_border();
}
inline ::google::protobuf::int32 RendererStyle_InfolistStyle::window_border() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.window_border)
  return window_border_;
}
inline void RendererStyle_InfolistStyle::set_window_border(::google::protobuf::int32 value) {
  set_has_window_border();
  window_border_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.InfolistStyle.window_border)
}

// optional int32 row_rect_padding = 5;
inline bool RendererStyle_InfolistStyle::has_row_rect_padding() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_row_rect_padding() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RendererStyle_InfolistStyle::clear_has_row_rect_padding() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RendererStyle_InfolistStyle::clear_row_rect_padding() {
  row_rect_padding_ = 0;
  clear_has_row_rect_padding();
}
inline ::google::protobuf::int32 RendererStyle_InfolistStyle::row_rect_padding() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.row_rect_padding)
  return row_rect_padding_;
}
inline void RendererStyle_InfolistStyle::set_row_rect_padding(::google::protobuf::int32 value) {
  set_has_row_rect_padding();
  row_rect_padding_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.InfolistStyle.row_rect_padding)
}

// optional int32 window_width = 6;
inline bool RendererStyle_InfolistStyle::has_window_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_window_width() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RendererStyle_InfolistStyle::clear_has_window_width() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RendererStyle_InfolistStyle::clear_window_width() {
  window_width_ = 0;
  clear_has_window_width();
}
inline ::google::protobuf::int32 RendererStyle_InfolistStyle::window_width() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.window_width)
  return window_width_;
}
inline void RendererStyle_InfolistStyle::set_window_width(::google::protobuf::int32 value) {
  set_has_window_width();
  window_width_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.InfolistStyle.window_width)
}

// optional .mozc.renderer.RendererStyle.TextStyle caption_style = 7;
inline bool RendererStyle_InfolistStyle::has_caption_style() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_caption_style() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RendererStyle_InfolistStyle::clear_has_caption_style() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RendererStyle_InfolistStyle::clear_caption_style() {
  if (caption_style_ != NULL) caption_style_->Clear();
  clear_has_caption_style();
}
inline const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle_InfolistStyle::_internal_caption_style() const {
  return *caption_style_;
}
inline const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle_InfolistStyle::caption_style() const {
  const ::mozc::renderer::RendererStyle_TextStyle* p = caption_style_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.caption_style)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_TextStyle*>(
      &::mozc::renderer::_RendererStyle_TextStyle_default_instance_);
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::release_caption_style() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.InfolistStyle.caption_style)
  clear_has_caption_style();
  ::mozc::renderer::RendererStyle_TextStyle* temp = caption_style_;
  caption_style_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::mutable_caption_style() {
  set_has_caption_style();
  if (caption_style_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_TextStyle>(GetArenaNoVirtual());
    caption_style_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.InfolistStyle.caption_style)
  return caption_style_;
}
inline void RendererStyle_InfolistStyle::set_allocated_caption_style(::mozc::renderer::RendererStyle_TextStyle* caption_style) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete caption_style_;
  }
  if (caption_style) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      caption_style = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, caption_style, submessage_arena);
    }
    set_has_caption_style();
  } else {
    clear_has_caption_style();
  }
  caption_style_ = caption_style;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.InfolistStyle.caption_style)
}

// optional .mozc.renderer.RendererStyle.TextStyle title_style = 8;
inline bool RendererStyle_InfolistStyle::has_title_style() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_title_style() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RendererStyle_InfolistStyle::clear_has_title_style() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RendererStyle_InfolistStyle::clear_title_style() {
  if (title_style_ != NULL) title_style_->Clear();
  clear_has_title_style();
}
inline const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle_InfolistStyle::_internal_title_style() const {
  return *title_style_;
}
inline const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle_InfolistStyle::title_style() const {
  const ::mozc::renderer::RendererStyle_TextStyle* p = title_style_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.title_style)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_TextStyle*>(
      &::mozc::renderer::_RendererStyle_TextStyle_default_instance_);
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::release_title_style() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.InfolistStyle.title_style)
  clear_has_title_style();
  ::mozc::renderer::RendererStyle_TextStyle* temp = title_style_;
  title_style_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::mutable_title_style() {
  set_has_title_style();
  if (title_style_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_TextStyle>(GetArenaNoVirtual());
    title_style_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.InfolistStyle.title_style)
  return title_style_;
}
inline void RendererStyle_InfolistStyle::set_allocated_title_style(::mozc::renderer::RendererStyle_TextStyle* title_style) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete title_style_;
  }
  if (title_style) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      title_style = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, title_style, submessage_arena);
    }
    set_has_title_style();
  } else {
    clear_has_title_style();
  }
  title_style_ = title_style;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.InfolistStyle.title_style)
}

// optional .mozc.renderer.RendererStyle.TextStyle description_style = 9;
inline bool RendererStyle_InfolistStyle::has_description_style() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_description_style() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RendererStyle_InfolistStyle::clear_has_description_style() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RendererStyle_InfolistStyle::clear_description_style() {
  if (description_style_ != NULL) description_style_->Clear();
  clear_has_description_style();
}
inline const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle_InfolistStyle::_internal_description_style() const {
  return *description_style_;
}
inline const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle_InfolistStyle::description_style() const {
  const ::mozc::renderer::RendererStyle_TextStyle* p = description_style_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.description_style)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_TextStyle*>(
      &::mozc::renderer::_RendererStyle_TextStyle_default_instance_);
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::release_description_style() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.InfolistStyle.description_style)
  clear_has_description_style();
  ::mozc::renderer::RendererStyle_TextStyle* temp = description_style_;
  description_style_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::mutable_description_style() {
  set_has_description_style();
  if (description_style_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_TextStyle>(GetArenaNoVirtual());
    description_style_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.InfolistStyle.description_style)
  return description_style_;
}
inline void RendererStyle_InfolistStyle::set_allocated_description_style(::mozc::renderer::RendererStyle_TextStyle* description_style) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete description_style_;
  }
  if (description_style) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      description_style = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, description_style, submessage_arena);
    }
    set_has_description_style();
  } else {
    clear_has_description_style();
  }
  description_style_ = description_style;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.InfolistStyle.description_style)
}

// optional .mozc.renderer.RendererStyle.RGBAColor border_color = 10;
inline bool RendererStyle_InfolistStyle::has_border_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_border_color() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RendererStyle_InfolistStyle::clear_has_border_color() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RendererStyle_InfolistStyle::clear_border_color() {
  if (border_color_ != NULL) border_color_->Clear();
  clear_has_border_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_InfolistStyle::_internal_border_color() const {
  return *border_color_;
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_InfolistStyle::border_color() const {
  const ::mozc::renderer::RendererStyle_RGBAColor* p = border_color_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.border_color)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_RGBAColor*>(
      &::mozc::renderer::_RendererStyle_RGBAColor_default_instance_);
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::release_border_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.InfolistStyle.border_color)
  clear_has_border_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = border_color_;
  border_color_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::mutable_border_color() {
  set_has_border_color();
  if (border_color_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_RGBAColor>(GetArenaNoVirtual());
    border_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.InfolistStyle.border_color)
  return border_color_;
}
inline void RendererStyle_InfolistStyle::set_allocated_border_color(::mozc::renderer::RendererStyle_RGBAColor* border_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete border_color_;
  }
  if (border_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      border_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, border_color, submessage_arena);
    }
    set_has_border_color();
  } else {
    clear_has_border_color();
  }
  border_color_ = border_color;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.InfolistStyle.border_color)
}

// optional .mozc.renderer.RendererStyle.RGBAColor caption_background_color = 11;
inline bool RendererStyle_InfolistStyle::has_caption_background_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_caption_background_color() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RendererStyle_InfolistStyle::clear_has_caption_background_color() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RendererStyle_InfolistStyle::clear_caption_background_color() {
  if (caption_background_color_ != NULL) caption_background_color_->Clear();
  clear_has_caption_background_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_InfolistStyle::_internal_caption_background_color() const {
  return *caption_background_color_;
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_InfolistStyle::caption_background_color() const {
  const ::mozc::renderer::RendererStyle_RGBAColor* p = caption_background_color_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.caption_background_color)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_RGBAColor*>(
      &::mozc::renderer::_RendererStyle_RGBAColor_default_instance_);
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::release_caption_background_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.InfolistStyle.caption_background_color)
  clear_has_caption_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = caption_background_color_;
  caption_background_color_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::mutable_caption_background_color() {
  set_has_caption_background_color();
  if (caption_background_color_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_RGBAColor>(GetArenaNoVirtual());
    caption_background_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.InfolistStyle.caption_background_color)
  return caption_background_color_;
}
inline void RendererStyle_InfolistStyle::set_allocated_caption_background_color(::mozc::renderer::RendererStyle_RGBAColor* caption_background_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete caption_background_color_;
  }
  if (caption_background_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      caption_background_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, caption_background_color, submessage_arena);
    }
    set_has_caption_background_color();
  } else {
    clear_has_caption_background_color();
  }
  caption_background_color_ = caption_background_color;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.InfolistStyle.caption_background_color)
}

// optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 12;
inline bool RendererStyle_InfolistStyle::has_focused_background_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_focused_background_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RendererStyle_InfolistStyle::clear_has_focused_background_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RendererStyle_InfolistStyle::clear_focused_background_color() {
  if (focused_background_color_ != NULL) focused_background_color_->Clear();
  clear_has_focused_background_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_InfolistStyle::_internal_focused_background_color() const {
  return *focused_background_color_;
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_InfolistStyle::focused_background_color() const {
  const ::mozc::renderer::RendererStyle_RGBAColor* p = focused_background_color_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.focused_background_color)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_RGBAColor*>(
      &::mozc::renderer::_RendererStyle_RGBAColor_default_instance_);
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::release_focused_background_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.InfolistStyle.focused_background_color)
  clear_has_focused_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = focused_background_color_;
  focused_background_color_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::mutable_focused_background_color() {
  set_has_focused_background_color();
  if (focused_background_color_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_RGBAColor>(GetArenaNoVirtual());
    focused_background_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.InfolistStyle.focused_background_color)
  return focused_background_color_;
}
inline void RendererStyle_InfolistStyle::set_allocated_focused_background_color(::mozc::renderer::RendererStyle_RGBAColor* focused_background_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete focused_background_color_;
  }
  if (focused_background_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      focused_background_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, focused_background_color, submessage_arena);
    }
    set_has_focused_background_color();
  } else {
    clear_has_focused_background_color();
  }
  focused_background_color_ = focused_background_color;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.InfolistStyle.focused_background_color)
}

// optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 13;
inline bool RendererStyle_InfolistStyle::has_focused_border_color() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RendererStyle_InfolistStyle::set_has_focused_border_color() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RendererStyle_InfolistStyle::clear_has_focused_border_color() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RendererStyle_InfolistStyle::clear_focused_border_color() {
  if (focused_border_color_ != NULL) focused_border_color_->Clear();
  clear_has_focused_border_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_InfolistStyle::_internal_focused_border_color() const {
  return *focused_border_color_;
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_InfolistStyle::focused_border_color() const {
  const ::mozc::renderer::RendererStyle_RGBAColor* p = focused_border_color_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.focused_border_color)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_RGBAColor*>(
      &::mozc::renderer::_RendererStyle_RGBAColor_default_instance_);
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::release_focused_border_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.InfolistStyle.focused_border_color)
  clear_has_focused_border_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = focused_border_color_;
  focused_border_color_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::mutable_focused_border_color() {
  set_has_focused_border_color();
  if (focused_border_color_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_RGBAColor>(GetArenaNoVirtual());
    focused_border_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.InfolistStyle.focused_border_color)
  return focused_border_color_;
}
inline void RendererStyle_InfolistStyle::set_allocated_focused_border_color(::mozc::renderer::RendererStyle_RGBAColor* focused_border_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete focused_border_color_;
  }
  if (focused_border_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      focused_border_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, focused_border_color, submessage_arena);
    }
    set_has_focused_border_color();
  } else {
    clear_has_focused_border_color();
  }
  focused_border_color_ = focused_border_color;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.InfolistStyle.focused_border_color)
}

// -------------------------------------------------------------------

// RendererStyle

// optional int32 window_border = 1;
inline bool RendererStyle::has_window_border() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RendererStyle::set_has_window_border() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RendererStyle::clear_has_window_border() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RendererStyle::clear_window_border() {
  window_border_ = 0;
  clear_has_window_border();
}
inline ::google::protobuf::int32 RendererStyle::window_border() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.window_border)
  return window_border_;
}
inline void RendererStyle::set_window_border(::google::protobuf::int32 value) {
  set_has_window_border();
  window_border_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.window_border)
}

// optional int32 footer_height = 2;
inline bool RendererStyle::has_footer_height() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RendererStyle::set_has_footer_height() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RendererStyle::clear_has_footer_height() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RendererStyle::clear_footer_height() {
  footer_height_ = 0;
  clear_has_footer_height();
}
inline ::google::protobuf::int32 RendererStyle::footer_height() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.footer_height)
  return footer_height_;
}
inline void RendererStyle::set_footer_height(::google::protobuf::int32 value) {
  set_has_footer_height();
  footer_height_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.footer_height)
}

// optional int32 row_rect_padding = 3;
inline bool RendererStyle::has_row_rect_padding() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RendererStyle::set_has_row_rect_padding() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RendererStyle::clear_has_row_rect_padding() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RendererStyle::clear_row_rect_padding() {
  row_rect_padding_ = 0;
  clear_has_row_rect_padding();
}
inline ::google::protobuf::int32 RendererStyle::row_rect_padding() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.row_rect_padding)
  return row_rect_padding_;
}
inline void RendererStyle::set_row_rect_padding(::google::protobuf::int32 value) {
  set_has_row_rect_padding();
  row_rect_padding_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.row_rect_padding)
}

// optional .mozc.renderer.RendererStyle.RGBAColor border_color = 4;
inline bool RendererStyle::has_border_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RendererStyle::set_has_border_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RendererStyle::clear_has_border_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RendererStyle::clear_border_color() {
  if (border_color_ != NULL) border_color_->Clear();
  clear_has_border_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::_internal_border_color() const {
  return *border_color_;
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::border_color() const {
  const ::mozc::renderer::RendererStyle_RGBAColor* p = border_color_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.border_color)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_RGBAColor*>(
      &::mozc::renderer::_RendererStyle_RGBAColor_default_instance_);
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_border_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.border_color)
  clear_has_border_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = border_color_;
  border_color_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_border_color() {
  set_has_border_color();
  if (border_color_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_RGBAColor>(GetArenaNoVirtual());
    border_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.border_color)
  return border_color_;
}
inline void RendererStyle::set_allocated_border_color(::mozc::renderer::RendererStyle_RGBAColor* border_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete border_color_;
  }
  if (border_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      border_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, border_color, submessage_arena);
    }
    set_has_border_color();
  } else {
    clear_has_border_color();
  }
  border_color_ = border_color;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.border_color)
}

// optional string column_minimum_width_string = 5;
inline bool RendererStyle::has_column_minimum_width_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RendererStyle::set_has_column_minimum_width_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RendererStyle::clear_has_column_minimum_width_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RendererStyle::clear_column_minimum_width_string() {
  column_minimum_width_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_column_minimum_width_string();
}
inline const ::std::string& RendererStyle::column_minimum_width_string() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.column_minimum_width_string)
  return column_minimum_width_string_.GetNoArena();
}
inline void RendererStyle::set_column_minimum_width_string(const ::std::string& value) {
  set_has_column_minimum_width_string();
  column_minimum_width_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.column_minimum_width_string)
}
#if LANG_CXX11
inline void RendererStyle::set_column_minimum_width_string(::std::string&& value) {
  set_has_column_minimum_width_string();
  column_minimum_width_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mozc.renderer.RendererStyle.column_minimum_width_string)
}
#endif
inline void RendererStyle::set_column_minimum_width_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_column_minimum_width_string();
  column_minimum_width_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.renderer.RendererStyle.column_minimum_width_string)
}
inline void RendererStyle::set_column_minimum_width_string(const char* value, size_t size) {
  set_has_column_minimum_width_string();
  column_minimum_width_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.renderer.RendererStyle.column_minimum_width_string)
}
inline ::std::string* RendererStyle::mutable_column_minimum_width_string() {
  set_has_column_minimum_width_string();
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.column_minimum_width_string)
  return column_minimum_width_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RendererStyle::release_column_minimum_width_string() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.column_minimum_width_string)
  if (!has_column_minimum_width_string()) {
    return NULL;
  }
  clear_has_column_minimum_width_string();
  return column_minimum_width_string_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RendererStyle::set_allocated_column_minimum_width_string(::std::string* column_minimum_width_string) {
  if (column_minimum_width_string != NULL) {
    set_has_column_minimum_width_string();
  } else {
    clear_has_column_minimum_width_string();
  }
  column_minimum_width_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column_minimum_width_string);
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.column_minimum_width_string)
}

// repeated .mozc.renderer.RendererStyle.TextStyle text_styles = 6;
inline int RendererStyle::text_styles_size() const {
  return text_styles_.size();
}
inline void RendererStyle::clear_text_styles() {
  text_styles_.Clear();
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle::mutable_text_styles(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.text_styles)
  return text_styles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_TextStyle >*
RendererStyle::mutable_text_styles() {
  // @@protoc_insertion_point(field_mutable_list:mozc.renderer.RendererStyle.text_styles)
  return &text_styles_;
}
inline const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle::text_styles(int index) const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.text_styles)
  return text_styles_.Get(index);
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle::add_text_styles() {
  // @@protoc_insertion_point(field_add:mozc.renderer.RendererStyle.text_styles)
  return text_styles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_TextStyle >&
RendererStyle::text_styles() const {
  // @@protoc_insertion_point(field_list:mozc.renderer.RendererStyle.text_styles)
  return text_styles_;
}

// repeated .mozc.renderer.RendererStyle.RGBAColor footer_border_colors = 7;
inline int RendererStyle::footer_border_colors_size() const {
  return footer_border_colors_.size();
}
inline void RendererStyle::clear_footer_border_colors() {
  footer_border_colors_.Clear();
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_footer_border_colors(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.footer_border_colors)
  return footer_border_colors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_RGBAColor >*
RendererStyle::mutable_footer_border_colors() {
  // @@protoc_insertion_point(field_mutable_list:mozc.renderer.RendererStyle.footer_border_colors)
  return &footer_border_colors_;
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::footer_border_colors(int index) const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.footer_border_colors)
  return footer_border_colors_.Get(index);
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::add_footer_border_colors() {
  // @@protoc_insertion_point(field_add:mozc.renderer.RendererStyle.footer_border_colors)
  return footer_border_colors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_RGBAColor >&
RendererStyle::footer_border_colors() const {
  // @@protoc_insertion_point(field_list:mozc.renderer.RendererStyle.footer_border_colors)
  return footer_border_colors_;
}

// optional .mozc.renderer.RendererStyle.TextStyle footer_style = 8;
inline bool RendererStyle::has_footer_style() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RendererStyle::set_has_footer_style() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RendererStyle::clear_has_footer_style() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RendererStyle::clear_footer_style() {
  if (footer_style_ != NULL) footer_style_->Clear();
  clear_has_footer_style();
}
inline const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle::_internal_footer_style() const {
  return *footer_style_;
}
inline const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle::footer_style() const {
  const ::mozc::renderer::RendererStyle_TextStyle* p = footer_style_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.footer_style)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_TextStyle*>(
      &::mozc::renderer::_RendererStyle_TextStyle_default_instance_);
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle::release_footer_style() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.footer_style)
  clear_has_footer_style();
  ::mozc::renderer::RendererStyle_TextStyle* temp = footer_style_;
  footer_style_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle::mutable_footer_style() {
  set_has_footer_style();
  if (footer_style_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_TextStyle>(GetArenaNoVirtual());
    footer_style_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.footer_style)
  return footer_style_;
}
inline void RendererStyle::set_allocated_footer_style(::mozc::renderer::RendererStyle_TextStyle* footer_style) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete footer_style_;
  }
  if (footer_style) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      footer_style = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, footer_style, submessage_arena);
    }
    set_has_footer_style();
  } else {
    clear_has_footer_style();
  }
  footer_style_ = footer_style;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.footer_style)
}

// optional .mozc.renderer.RendererStyle.TextStyle footer_sub_label_style = 9;
inline bool RendererStyle::has_footer_sub_label_style() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RendererStyle::set_has_footer_sub_label_style() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RendererStyle::clear_has_footer_sub_label_style() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RendererStyle::clear_footer_sub_label_style() {
  if (footer_sub_label_style_ != NULL) footer_sub_label_style_->Clear();
  clear_has_footer_sub_label_style();
}
inline const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle::_internal_footer_sub_label_style() const {
  return *footer_sub_label_style_;
}
inline const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle::footer_sub_label_style() const {
  const ::mozc::renderer::RendererStyle_TextStyle* p = footer_sub_label_style_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.footer_sub_label_style)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_TextStyle*>(
      &::mozc::renderer::_RendererStyle_TextStyle_default_instance_);
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle::release_footer_sub_label_style() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.footer_sub_label_style)
  clear_has_footer_sub_label_style();
  ::mozc::renderer::RendererStyle_TextStyle* temp = footer_sub_label_style_;
  footer_sub_label_style_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_TextStyle* RendererStyle::mutable_footer_sub_label_style() {
  set_has_footer_sub_label_style();
  if (footer_sub_label_style_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_TextStyle>(GetArenaNoVirtual());
    footer_sub_label_style_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.footer_sub_label_style)
  return footer_sub_label_style_;
}
inline void RendererStyle::set_allocated_footer_sub_label_style(::mozc::renderer::RendererStyle_TextStyle* footer_sub_label_style) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete footer_sub_label_style_;
  }
  if (footer_sub_label_style) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      footer_sub_label_style = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, footer_sub_label_style, submessage_arena);
    }
    set_has_footer_sub_label_style();
  } else {
    clear_has_footer_sub_label_style();
  }
  footer_sub_label_style_ = footer_sub_label_style;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.footer_sub_label_style)
}

// optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 10;
inline bool RendererStyle::has_focused_background_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RendererStyle::set_has_focused_background_color() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RendererStyle::clear_has_focused_background_color() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RendererStyle::clear_focused_background_color() {
  if (focused_background_color_ != NULL) focused_background_color_->Clear();
  clear_has_focused_background_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::_internal_focused_background_color() const {
  return *focused_background_color_;
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::focused_background_color() const {
  const ::mozc::renderer::RendererStyle_RGBAColor* p = focused_background_color_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.focused_background_color)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_RGBAColor*>(
      &::mozc::renderer::_RendererStyle_RGBAColor_default_instance_);
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_focused_background_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.focused_background_color)
  clear_has_focused_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = focused_background_color_;
  focused_background_color_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_focused_background_color() {
  set_has_focused_background_color();
  if (focused_background_color_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_RGBAColor>(GetArenaNoVirtual());
    focused_background_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.focused_background_color)
  return focused_background_color_;
}
inline void RendererStyle::set_allocated_focused_background_color(::mozc::renderer::RendererStyle_RGBAColor* focused_background_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete focused_background_color_;
  }
  if (focused_background_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      focused_background_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, focused_background_color, submessage_arena);
    }
    set_has_focused_background_color();
  } else {
    clear_has_focused_background_color();
  }
  focused_background_color_ = focused_background_color;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.focused_background_color)
}

// optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 11;
inline bool RendererStyle::has_focused_border_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RendererStyle::set_has_focused_border_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RendererStyle::clear_has_focused_border_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RendererStyle::clear_focused_border_color() {
  if (focused_border_color_ != NULL) focused_border_color_->Clear();
  clear_has_focused_border_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::_internal_focused_border_color() const {
  return *focused_border_color_;
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::focused_border_color() const {
  const ::mozc::renderer::RendererStyle_RGBAColor* p = focused_border_color_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.focused_border_color)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_RGBAColor*>(
      &::mozc::renderer::_RendererStyle_RGBAColor_default_instance_);
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_focused_border_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.focused_border_color)
  clear_has_focused_border_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = focused_border_color_;
  focused_border_color_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_focused_border_color() {
  set_has_focused_border_color();
  if (focused_border_color_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_RGBAColor>(GetArenaNoVirtual());
    focused_border_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.focused_border_color)
  return focused_border_color_;
}
inline void RendererStyle::set_allocated_focused_border_color(::mozc::renderer::RendererStyle_RGBAColor* focused_border_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete focused_border_color_;
  }
  if (focused_border_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      focused_border_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, focused_border_color, submessage_arena);
    }
    set_has_focused_border_color();
  } else {
    clear_has_focused_border_color();
  }
  focused_border_color_ = focused_border_color;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.focused_border_color)
}

// optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_background_color = 12;
inline bool RendererStyle::has_scrollbar_background_color() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RendererStyle::set_has_scrollbar_background_color() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RendererStyle::clear_has_scrollbar_background_color() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RendererStyle::clear_scrollbar_background_color() {
  if (scrollbar_background_color_ != NULL) scrollbar_background_color_->Clear();
  clear_has_scrollbar_background_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::_internal_scrollbar_background_color() const {
  return *scrollbar_background_color_;
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::scrollbar_background_color() const {
  const ::mozc::renderer::RendererStyle_RGBAColor* p = scrollbar_background_color_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.scrollbar_background_color)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_RGBAColor*>(
      &::mozc::renderer::_RendererStyle_RGBAColor_default_instance_);
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_scrollbar_background_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.scrollbar_background_color)
  clear_has_scrollbar_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = scrollbar_background_color_;
  scrollbar_background_color_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_scrollbar_background_color() {
  set_has_scrollbar_background_color();
  if (scrollbar_background_color_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_RGBAColor>(GetArenaNoVirtual());
    scrollbar_background_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.scrollbar_background_color)
  return scrollbar_background_color_;
}
inline void RendererStyle::set_allocated_scrollbar_background_color(::mozc::renderer::RendererStyle_RGBAColor* scrollbar_background_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scrollbar_background_color_;
  }
  if (scrollbar_background_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scrollbar_background_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scrollbar_background_color, submessage_arena);
    }
    set_has_scrollbar_background_color();
  } else {
    clear_has_scrollbar_background_color();
  }
  scrollbar_background_color_ = scrollbar_background_color;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.scrollbar_background_color)
}

// optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_indicator_color = 13;
inline bool RendererStyle::has_scrollbar_indicator_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RendererStyle::set_has_scrollbar_indicator_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RendererStyle::clear_has_scrollbar_indicator_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RendererStyle::clear_scrollbar_indicator_color() {
  if (scrollbar_indicator_color_ != NULL) scrollbar_indicator_color_->Clear();
  clear_has_scrollbar_indicator_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::_internal_scrollbar_indicator_color() const {
  return *scrollbar_indicator_color_;
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::scrollbar_indicator_color() const {
  const ::mozc::renderer::RendererStyle_RGBAColor* p = scrollbar_indicator_color_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.scrollbar_indicator_color)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_RGBAColor*>(
      &::mozc::renderer::_RendererStyle_RGBAColor_default_instance_);
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_scrollbar_indicator_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.scrollbar_indicator_color)
  clear_has_scrollbar_indicator_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = scrollbar_indicator_color_;
  scrollbar_indicator_color_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_scrollbar_indicator_color() {
  set_has_scrollbar_indicator_color();
  if (scrollbar_indicator_color_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_RGBAColor>(GetArenaNoVirtual());
    scrollbar_indicator_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.scrollbar_indicator_color)
  return scrollbar_indicator_color_;
}
inline void RendererStyle::set_allocated_scrollbar_indicator_color(::mozc::renderer::RendererStyle_RGBAColor* scrollbar_indicator_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scrollbar_indicator_color_;
  }
  if (scrollbar_indicator_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scrollbar_indicator_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scrollbar_indicator_color, submessage_arena);
    }
    set_has_scrollbar_indicator_color();
  } else {
    clear_has_scrollbar_indicator_color();
  }
  scrollbar_indicator_color_ = scrollbar_indicator_color;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.scrollbar_indicator_color)
}

// optional int32 scrollbar_width = 14;
inline bool RendererStyle::has_scrollbar_width() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RendererStyle::set_has_scrollbar_width() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RendererStyle::clear_has_scrollbar_width() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RendererStyle::clear_scrollbar_width() {
  scrollbar_width_ = 0;
  clear_has_scrollbar_width();
}
inline ::google::protobuf::int32 RendererStyle::scrollbar_width() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.scrollbar_width)
  return scrollbar_width_;
}
inline void RendererStyle::set_scrollbar_width(::google::protobuf::int32 value) {
  set_has_scrollbar_width();
  scrollbar_width_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.scrollbar_width)
}

// optional .mozc.renderer.RendererStyle.RGBAColor footer_top_color = 15;
inline bool RendererStyle::has_footer_top_color() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RendererStyle::set_has_footer_top_color() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RendererStyle::clear_has_footer_top_color() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RendererStyle::clear_footer_top_color() {
  if (footer_top_color_ != NULL) footer_top_color_->Clear();
  clear_has_footer_top_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::_internal_footer_top_color() const {
  return *footer_top_color_;
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::footer_top_color() const {
  const ::mozc::renderer::RendererStyle_RGBAColor* p = footer_top_color_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.footer_top_color)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_RGBAColor*>(
      &::mozc::renderer::_RendererStyle_RGBAColor_default_instance_);
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_footer_top_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.footer_top_color)
  clear_has_footer_top_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = footer_top_color_;
  footer_top_color_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_footer_top_color() {
  set_has_footer_top_color();
  if (footer_top_color_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_RGBAColor>(GetArenaNoVirtual());
    footer_top_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.footer_top_color)
  return footer_top_color_;
}
inline void RendererStyle::set_allocated_footer_top_color(::mozc::renderer::RendererStyle_RGBAColor* footer_top_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete footer_top_color_;
  }
  if (footer_top_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      footer_top_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, footer_top_color, submessage_arena);
    }
    set_has_footer_top_color();
  } else {
    clear_has_footer_top_color();
  }
  footer_top_color_ = footer_top_color;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.footer_top_color)
}

// optional .mozc.renderer.RendererStyle.RGBAColor footer_bottom_color = 16;
inline bool RendererStyle::has_footer_bottom_color() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RendererStyle::set_has_footer_bottom_color() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RendererStyle::clear_has_footer_bottom_color() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RendererStyle::clear_footer_bottom_color() {
  if (footer_bottom_color_ != NULL) footer_bottom_color_->Clear();
  clear_has_footer_bottom_color();
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::_internal_footer_bottom_color() const {
  return *footer_bottom_color_;
}
inline const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::footer_bottom_color() const {
  const ::mozc::renderer::RendererStyle_RGBAColor* p = footer_bottom_color_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.footer_bottom_color)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_RGBAColor*>(
      &::mozc::renderer::_RendererStyle_RGBAColor_default_instance_);
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_footer_bottom_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.footer_bottom_color)
  clear_has_footer_bottom_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = footer_bottom_color_;
  footer_bottom_color_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_footer_bottom_color() {
  set_has_footer_bottom_color();
  if (footer_bottom_color_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_RGBAColor>(GetArenaNoVirtual());
    footer_bottom_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.footer_bottom_color)
  return footer_bottom_color_;
}
inline void RendererStyle::set_allocated_footer_bottom_color(::mozc::renderer::RendererStyle_RGBAColor* footer_bottom_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete footer_bottom_color_;
  }
  if (footer_bottom_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      footer_bottom_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, footer_bottom_color, submessage_arena);
    }
    set_has_footer_bottom_color();
  } else {
    clear_has_footer_bottom_color();
  }
  footer_bottom_color_ = footer_bottom_color;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.footer_bottom_color)
}

// optional string logo_file_name = 17;
inline bool RendererStyle::has_logo_file_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RendererStyle::set_has_logo_file_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RendererStyle::clear_has_logo_file_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RendererStyle::clear_logo_file_name() {
  logo_file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_logo_file_name();
}
inline const ::std::string& RendererStyle::logo_file_name() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.logo_file_name)
  return logo_file_name_.GetNoArena();
}
inline void RendererStyle::set_logo_file_name(const ::std::string& value) {
  set_has_logo_file_name();
  logo_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.logo_file_name)
}
#if LANG_CXX11
inline void RendererStyle::set_logo_file_name(::std::string&& value) {
  set_has_logo_file_name();
  logo_file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mozc.renderer.RendererStyle.logo_file_name)
}
#endif
inline void RendererStyle::set_logo_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_logo_file_name();
  logo_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.renderer.RendererStyle.logo_file_name)
}
inline void RendererStyle::set_logo_file_name(const char* value, size_t size) {
  set_has_logo_file_name();
  logo_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.renderer.RendererStyle.logo_file_name)
}
inline ::std::string* RendererStyle::mutable_logo_file_name() {
  set_has_logo_file_name();
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.logo_file_name)
  return logo_file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RendererStyle::release_logo_file_name() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.logo_file_name)
  if (!has_logo_file_name()) {
    return NULL;
  }
  clear_has_logo_file_name();
  return logo_file_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RendererStyle::set_allocated_logo_file_name(::std::string* logo_file_name) {
  if (logo_file_name != NULL) {
    set_has_logo_file_name();
  } else {
    clear_has_logo_file_name();
  }
  logo_file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logo_file_name);
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.logo_file_name)
}

// optional .mozc.renderer.RendererStyle.InfolistStyle infolist_style = 18;
inline bool RendererStyle::has_infolist_style() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RendererStyle::set_has_infolist_style() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RendererStyle::clear_has_infolist_style() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RendererStyle::clear_infolist_style() {
  if (infolist_style_ != NULL) infolist_style_->Clear();
  clear_has_infolist_style();
}
inline const ::mozc::renderer::RendererStyle_InfolistStyle& RendererStyle::_internal_infolist_style() const {
  return *infolist_style_;
}
inline const ::mozc::renderer::RendererStyle_InfolistStyle& RendererStyle::infolist_style() const {
  const ::mozc::renderer::RendererStyle_InfolistStyle* p = infolist_style_;
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.infolist_style)
  return p != NULL ? *p : *reinterpret_cast<const ::mozc::renderer::RendererStyle_InfolistStyle*>(
      &::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_);
}
inline ::mozc::renderer::RendererStyle_InfolistStyle* RendererStyle::release_infolist_style() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.infolist_style)
  clear_has_infolist_style();
  ::mozc::renderer::RendererStyle_InfolistStyle* temp = infolist_style_;
  infolist_style_ = NULL;
  return temp;
}
inline ::mozc::renderer::RendererStyle_InfolistStyle* RendererStyle::mutable_infolist_style() {
  set_has_infolist_style();
  if (infolist_style_ == NULL) {
    auto* p = CreateMaybeMessage<::mozc::renderer::RendererStyle_InfolistStyle>(GetArenaNoVirtual());
    infolist_style_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.infolist_style)
  return infolist_style_;
}
inline void RendererStyle::set_allocated_infolist_style(::mozc::renderer::RendererStyle_InfolistStyle* infolist_style) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete infolist_style_;
  }
  if (infolist_style) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      infolist_style = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, infolist_style, submessage_arena);
    }
    set_has_infolist_style();
  } else {
    clear_has_infolist_style();
  }
  infolist_style_ = infolist_style;
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.infolist_style)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace renderer
}  // namespace mozc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protocol_2frenderer_5fstyle_2eproto
