// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/renderer_style.proto

#include "protocol/renderer_style.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protocol_2frenderer_5fstyle_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2frenderer_5fstyle_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RendererStyle_RGBAColor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2frenderer_5fstyle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RendererStyle_TextStyle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2frenderer_5fstyle_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RendererStyle_InfolistStyle;
}  // namespace protobuf_protocol_2frenderer_5fstyle_2eproto
namespace mozc {
namespace renderer {
class RendererStyle_RGBAColorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RendererStyle_RGBAColor>
      _instance;
} _RendererStyle_RGBAColor_default_instance_;
class RendererStyle_TextStyleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RendererStyle_TextStyle>
      _instance;
} _RendererStyle_TextStyle_default_instance_;
class RendererStyle_InfolistStyleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RendererStyle_InfolistStyle>
      _instance;
} _RendererStyle_InfolistStyle_default_instance_;
class RendererStyleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RendererStyle>
      _instance;
} _RendererStyle_default_instance_;
}  // namespace renderer
}  // namespace mozc
namespace protobuf_protocol_2frenderer_5fstyle_2eproto {
static void InitDefaultsRendererStyle_RGBAColor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::renderer::_RendererStyle_RGBAColor_default_instance_;
    new (ptr) ::mozc::renderer::RendererStyle_RGBAColor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::renderer::RendererStyle_RGBAColor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RendererStyle_RGBAColor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRendererStyle_RGBAColor}, {}};

static void InitDefaultsRendererStyle_TextStyle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::renderer::_RendererStyle_TextStyle_default_instance_;
    new (ptr) ::mozc::renderer::RendererStyle_TextStyle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::renderer::RendererStyle_TextStyle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RendererStyle_TextStyle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRendererStyle_TextStyle}, {
      &protobuf_protocol_2frenderer_5fstyle_2eproto::scc_info_RendererStyle_RGBAColor.base,}};

static void InitDefaultsRendererStyle_InfolistStyle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_;
    new (ptr) ::mozc::renderer::RendererStyle_InfolistStyle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::renderer::RendererStyle_InfolistStyle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RendererStyle_InfolistStyle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRendererStyle_InfolistStyle}, {
      &protobuf_protocol_2frenderer_5fstyle_2eproto::scc_info_RendererStyle_TextStyle.base,
      &protobuf_protocol_2frenderer_5fstyle_2eproto::scc_info_RendererStyle_RGBAColor.base,}};

static void InitDefaultsRendererStyle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::renderer::_RendererStyle_default_instance_;
    new (ptr) ::mozc::renderer::RendererStyle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::renderer::RendererStyle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RendererStyle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRendererStyle}, {
      &protobuf_protocol_2frenderer_5fstyle_2eproto::scc_info_RendererStyle_RGBAColor.base,
      &protobuf_protocol_2frenderer_5fstyle_2eproto::scc_info_RendererStyle_TextStyle.base,
      &protobuf_protocol_2frenderer_5fstyle_2eproto::scc_info_RendererStyle_InfolistStyle.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RendererStyle_RGBAColor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RendererStyle_TextStyle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RendererStyle_InfolistStyle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RendererStyle.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_RGBAColor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_RGBAColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_RGBAColor, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_RGBAColor, g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_RGBAColor, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_RGBAColor, a_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_TextStyle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_TextStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_TextStyle, font_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_TextStyle, foreground_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_TextStyle, background_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_TextStyle, left_padding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_TextStyle, right_padding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_TextStyle, font_name_),
  3,
  1,
  2,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, caption_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, caption_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, caption_padding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, window_border_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, row_rect_padding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, window_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, caption_style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, title_style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, description_style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, border_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, caption_background_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, focused_background_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, focused_border_color_),
  0,
  8,
  9,
  10,
  11,
  12,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, window_border_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, footer_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, row_rect_padding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, border_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, column_minimum_width_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, text_styles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, footer_border_colors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, footer_style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, footer_sub_label_style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, focused_background_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, focused_border_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, scrollbar_background_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, scrollbar_indicator_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, scrollbar_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, footer_top_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, footer_bottom_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, logo_file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::renderer::RendererStyle, infolist_style_),
  12,
  13,
  14,
  2,
  0,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  15,
  9,
  10,
  1,
  11,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::mozc::renderer::RendererStyle_RGBAColor)},
  { 13, 24, sizeof(::mozc::renderer::RendererStyle_TextStyle)},
  { 30, 48, sizeof(::mozc::renderer::RendererStyle_InfolistStyle)},
  { 61, 84, sizeof(::mozc::renderer::RendererStyle)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::renderer::_RendererStyle_RGBAColor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::renderer::_RendererStyle_TextStyle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::renderer::_RendererStyle_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protocol/renderer_style.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035protocol/renderer_style.proto\022\rmozc.re"
      "nderer\"\217\017\n\rRendererStyle\022\025\n\rwindow_borde"
      "r\030\001 \001(\005\022\025\n\rfooter_height\030\002 \001(\005\022\030\n\020row_re"
      "ct_padding\030\003 \001(\005\022<\n\014border_color\030\004 \001(\0132&"
      ".mozc.renderer.RendererStyle.RGBAColor\022#"
      "\n\033column_minimum_width_string\030\005 \001(\t\022;\n\013t"
      "ext_styles\030\006 \003(\0132&.mozc.renderer.Rendere"
      "rStyle.TextStyle\022D\n\024footer_border_colors"
      "\030\007 \003(\0132&.mozc.renderer.RendererStyle.RGB"
      "AColor\022<\n\014footer_style\030\010 \001(\0132&.mozc.rend"
      "erer.RendererStyle.TextStyle\022F\n\026footer_s"
      "ub_label_style\030\t \001(\0132&.mozc.renderer.Ren"
      "dererStyle.TextStyle\022H\n\030focused_backgrou"
      "nd_color\030\n \001(\0132&.mozc.renderer.RendererS"
      "tyle.RGBAColor\022D\n\024focused_border_color\030\013"
      " \001(\0132&.mozc.renderer.RendererStyle.RGBAC"
      "olor\022J\n\032scrollbar_background_color\030\014 \001(\013"
      "2&.mozc.renderer.RendererStyle.RGBAColor"
      "\022I\n\031scrollbar_indicator_color\030\r \001(\0132&.mo"
      "zc.renderer.RendererStyle.RGBAColor\022\027\n\017s"
      "crollbar_width\030\016 \001(\005\022@\n\020footer_top_color"
      "\030\017 \001(\0132&.mozc.renderer.RendererStyle.RGB"
      "AColor\022C\n\023footer_bottom_color\030\020 \001(\0132&.mo"
      "zc.renderer.RendererStyle.RGBAColor\022\026\n\016l"
      "ogo_file_name\030\021 \001(\t\022B\n\016infolist_style\030\022 "
      "\001(\0132*.mozc.renderer.RendererStyle.Infoli"
      "stStyle\032C\n\tRGBAColor\022\014\n\001r\030\001 \002(\001:\0010\022\014\n\001g\030"
      "\002 \002(\001:\0010\022\014\n\001b\030\003 \002(\001:\0010\022\014\n\001a\030\004 \001(\001:\0011\032\350\001\n"
      "\tTextStyle\022\021\n\tfont_size\030\001 \001(\001\022@\n\020foregro"
      "und_color\030\002 \001(\0132&.mozc.renderer.Renderer"
      "Style.RGBAColor\022@\n\020background_color\030\003 \001("
      "\0132&.mozc.renderer.RendererStyle.RGBAColo"
      "r\022\027\n\014left_padding\030\004 \001(\005:\0010\022\030\n\rright_padd"
      "ing\030\005 \001(\005:\0010\022\021\n\tfont_name\030\006 \001(\t\032\366\004\n\rInfo"
      "listStyle\022\026\n\016caption_string\030\001 \001(\t\022\026\n\016cap"
      "tion_height\030\002 \001(\005\022\027\n\017caption_padding\030\003 \001"
      "(\005\022\025\n\rwindow_border\030\004 \001(\005\022\030\n\020row_rect_pa"
      "dding\030\005 \001(\005\022\024\n\014window_width\030\006 \001(\005\022=\n\rcap"
      "tion_style\030\007 \001(\0132&.mozc.renderer.Rendere"
      "rStyle.TextStyle\022;\n\013title_style\030\010 \001(\0132&."
      "mozc.renderer.RendererStyle.TextStyle\022A\n"
      "\021description_style\030\t \001(\0132&.mozc.renderer"
      ".RendererStyle.TextStyle\022<\n\014border_color"
      "\030\n \001(\0132&.mozc.renderer.RendererStyle.RGB"
      "AColor\022H\n\030caption_background_color\030\013 \001(\013"
      "2&.mozc.renderer.RendererStyle.RGBAColor"
      "\022H\n\030focused_background_color\030\014 \001(\0132&.moz"
      "c.renderer.RendererStyle.RGBAColor\022D\n\024fo"
      "cused_border_color\030\r \001(\0132&.mozc.renderer"
      ".RendererStyle.RGBAColor"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1984);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/renderer_style.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protocol_2frenderer_5fstyle_2eproto
namespace mozc {
namespace renderer {

// ===================================================================

void RendererStyle_RGBAColor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererStyle_RGBAColor::kRFieldNumber;
const int RendererStyle_RGBAColor::kGFieldNumber;
const int RendererStyle_RGBAColor::kBFieldNumber;
const int RendererStyle_RGBAColor::kAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererStyle_RGBAColor::RendererStyle_RGBAColor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2frenderer_5fstyle_2eproto::scc_info_RendererStyle_RGBAColor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.renderer.RendererStyle.RGBAColor)
}
RendererStyle_RGBAColor::RendererStyle_RGBAColor(const RendererStyle_RGBAColor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:mozc.renderer.RendererStyle.RGBAColor)
}

void RendererStyle_RGBAColor::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
  a_ = 1;
}

RendererStyle_RGBAColor::~RendererStyle_RGBAColor() {
  // @@protoc_insertion_point(destructor:mozc.renderer.RendererStyle.RGBAColor)
  SharedDtor();
}

void RendererStyle_RGBAColor::SharedDtor() {
}

void RendererStyle_RGBAColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RendererStyle_RGBAColor::descriptor() {
  ::protobuf_protocol_2frenderer_5fstyle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2frenderer_5fstyle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RendererStyle_RGBAColor& RendererStyle_RGBAColor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2frenderer_5fstyle_2eproto::scc_info_RendererStyle_RGBAColor.base);
  return *internal_default_instance();
}


void RendererStyle_RGBAColor::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.renderer.RendererStyle.RGBAColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&r_)) + sizeof(b_));
    a_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RendererStyle_RGBAColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.renderer.RendererStyle.RGBAColor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double r = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double g = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double b = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.renderer.RendererStyle.RGBAColor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.renderer.RendererStyle.RGBAColor)
  return false;
#undef DO_
}

void RendererStyle_RGBAColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.renderer.RendererStyle.RGBAColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double r = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->r(), output);
  }

  // required double g = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->g(), output);
  }

  // required double b = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->b(), output);
  }

  // optional double a = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->a(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.renderer.RendererStyle.RGBAColor)
}

::google::protobuf::uint8* RendererStyle_RGBAColor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.renderer.RendererStyle.RGBAColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double r = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->r(), target);
  }

  // required double g = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->g(), target);
  }

  // required double b = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->b(), target);
  }

  // optional double a = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->a(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.renderer.RendererStyle.RGBAColor)
  return target;
}

size_t RendererStyle_RGBAColor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.renderer.RendererStyle.RGBAColor)
  size_t total_size = 0;

  if (has_r()) {
    // required double r = 1 [default = 0];
    total_size += 1 + 8;
  }

  if (has_g()) {
    // required double g = 2 [default = 0];
    total_size += 1 + 8;
  }

  if (has_b()) {
    // required double b = 3 [default = 0];
    total_size += 1 + 8;
  }

  return total_size;
}
size_t RendererStyle_RGBAColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.renderer.RendererStyle.RGBAColor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double r = 1 [default = 0];
    total_size += 1 + 8;

    // required double g = 2 [default = 0];
    total_size += 1 + 8;

    // required double b = 3 [default = 0];
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional double a = 4 [default = 1];
  if (has_a()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RendererStyle_RGBAColor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.renderer.RendererStyle.RGBAColor)
  GOOGLE_DCHECK_NE(&from, this);
  const RendererStyle_RGBAColor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererStyle_RGBAColor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.renderer.RendererStyle.RGBAColor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.renderer.RendererStyle.RGBAColor)
    MergeFrom(*source);
  }
}

void RendererStyle_RGBAColor::MergeFrom(const RendererStyle_RGBAColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.renderer.RendererStyle.RGBAColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000002u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RendererStyle_RGBAColor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.renderer.RendererStyle.RGBAColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererStyle_RGBAColor::CopyFrom(const RendererStyle_RGBAColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.renderer.RendererStyle.RGBAColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererStyle_RGBAColor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RendererStyle_RGBAColor::Swap(RendererStyle_RGBAColor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererStyle_RGBAColor::InternalSwap(RendererStyle_RGBAColor* other) {
  using std::swap;
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
  swap(a_, other->a_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RendererStyle_RGBAColor::GetMetadata() const {
  protobuf_protocol_2frenderer_5fstyle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2frenderer_5fstyle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RendererStyle_TextStyle::InitAsDefaultInstance() {
  ::mozc::renderer::_RendererStyle_TextStyle_default_instance_._instance.get_mutable()->foreground_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_TextStyle_default_instance_._instance.get_mutable()->background_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererStyle_TextStyle::kFontSizeFieldNumber;
const int RendererStyle_TextStyle::kForegroundColorFieldNumber;
const int RendererStyle_TextStyle::kBackgroundColorFieldNumber;
const int RendererStyle_TextStyle::kLeftPaddingFieldNumber;
const int RendererStyle_TextStyle::kRightPaddingFieldNumber;
const int RendererStyle_TextStyle::kFontNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererStyle_TextStyle::RendererStyle_TextStyle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2frenderer_5fstyle_2eproto::scc_info_RendererStyle_TextStyle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.renderer.RendererStyle.TextStyle)
}
RendererStyle_TextStyle::RendererStyle_TextStyle(const RendererStyle_TextStyle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  font_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_font_name()) {
    font_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.font_name_);
  }
  if (from.has_foreground_color()) {
    foreground_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.foreground_color_);
  } else {
    foreground_color_ = NULL;
  }
  if (from.has_background_color()) {
    background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.background_color_);
  } else {
    background_color_ = NULL;
  }
  ::memcpy(&font_size_, &from.font_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_padding_) -
    reinterpret_cast<char*>(&font_size_)) + sizeof(right_padding_));
  // @@protoc_insertion_point(copy_constructor:mozc.renderer.RendererStyle.TextStyle)
}

void RendererStyle_TextStyle::SharedCtor() {
  font_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&foreground_color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_padding_) -
      reinterpret_cast<char*>(&foreground_color_)) + sizeof(right_padding_));
}

RendererStyle_TextStyle::~RendererStyle_TextStyle() {
  // @@protoc_insertion_point(destructor:mozc.renderer.RendererStyle.TextStyle)
  SharedDtor();
}

void RendererStyle_TextStyle::SharedDtor() {
  font_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete foreground_color_;
  if (this != internal_default_instance()) delete background_color_;
}

void RendererStyle_TextStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RendererStyle_TextStyle::descriptor() {
  ::protobuf_protocol_2frenderer_5fstyle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2frenderer_5fstyle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RendererStyle_TextStyle& RendererStyle_TextStyle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2frenderer_5fstyle_2eproto::scc_info_RendererStyle_TextStyle.base);
  return *internal_default_instance();
}


void RendererStyle_TextStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.renderer.RendererStyle.TextStyle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      font_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(foreground_color_ != NULL);
      foreground_color_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(background_color_ != NULL);
      background_color_->Clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&font_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_padding_) -
        reinterpret_cast<char*>(&font_size_)) + sizeof(right_padding_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RendererStyle_TextStyle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.renderer.RendererStyle.TextStyle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double font_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_font_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &font_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor foreground_color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_foreground_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor background_color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_background_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 left_padding = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_left_padding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_padding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 right_padding = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_right_padding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_padding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string font_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_font_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->font_name().data(), static_cast<int>(this->font_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.renderer.RendererStyle.TextStyle.font_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.renderer.RendererStyle.TextStyle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.renderer.RendererStyle.TextStyle)
  return false;
#undef DO_
}

void RendererStyle_TextStyle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.renderer.RendererStyle.TextStyle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double font_size = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->font_size(), output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor foreground_color = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_foreground_color(), output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor background_color = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_background_color(), output);
  }

  // optional int32 left_padding = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left_padding(), output);
  }

  // optional int32 right_padding = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->right_padding(), output);
  }

  // optional string font_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->font_name().data(), static_cast<int>(this->font_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.TextStyle.font_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->font_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.renderer.RendererStyle.TextStyle)
}

::google::protobuf::uint8* RendererStyle_TextStyle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.renderer.RendererStyle.TextStyle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double font_size = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->font_size(), target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor foreground_color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_foreground_color(), deterministic, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor background_color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_background_color(), deterministic, target);
  }

  // optional int32 left_padding = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left_padding(), target);
  }

  // optional int32 right_padding = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->right_padding(), target);
  }

  // optional string font_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->font_name().data(), static_cast<int>(this->font_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.TextStyle.font_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->font_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.renderer.RendererStyle.TextStyle)
  return target;
}

size_t RendererStyle_TextStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.renderer.RendererStyle.TextStyle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string font_name = 6;
    if (has_font_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->font_name());
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor foreground_color = 2;
    if (has_foreground_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *foreground_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor background_color = 3;
    if (has_background_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *background_color_);
    }

    // optional double font_size = 1;
    if (has_font_size()) {
      total_size += 1 + 8;
    }

    // optional int32 left_padding = 4 [default = 0];
    if (has_left_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_padding());
    }

    // optional int32 right_padding = 5 [default = 0];
    if (has_right_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right_padding());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RendererStyle_TextStyle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.renderer.RendererStyle.TextStyle)
  GOOGLE_DCHECK_NE(&from, this);
  const RendererStyle_TextStyle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererStyle_TextStyle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.renderer.RendererStyle.TextStyle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.renderer.RendererStyle.TextStyle)
    MergeFrom(*source);
  }
}

void RendererStyle_TextStyle::MergeFrom(const RendererStyle_TextStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.renderer.RendererStyle.TextStyle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_font_name();
      font_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.font_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_foreground_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.foreground_color());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_background_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.background_color());
    }
    if (cached_has_bits & 0x00000008u) {
      font_size_ = from.font_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      left_padding_ = from.left_padding_;
    }
    if (cached_has_bits & 0x00000020u) {
      right_padding_ = from.right_padding_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RendererStyle_TextStyle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.renderer.RendererStyle.TextStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererStyle_TextStyle::CopyFrom(const RendererStyle_TextStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.renderer.RendererStyle.TextStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererStyle_TextStyle::IsInitialized() const {
  if (has_foreground_color()) {
    if (!this->foreground_color_->IsInitialized()) return false;
  }
  if (has_background_color()) {
    if (!this->background_color_->IsInitialized()) return false;
  }
  return true;
}

void RendererStyle_TextStyle::Swap(RendererStyle_TextStyle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererStyle_TextStyle::InternalSwap(RendererStyle_TextStyle* other) {
  using std::swap;
  font_name_.Swap(&other->font_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(foreground_color_, other->foreground_color_);
  swap(background_color_, other->background_color_);
  swap(font_size_, other->font_size_);
  swap(left_padding_, other->left_padding_);
  swap(right_padding_, other->right_padding_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RendererStyle_TextStyle::GetMetadata() const {
  protobuf_protocol_2frenderer_5fstyle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2frenderer_5fstyle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RendererStyle_InfolistStyle::InitAsDefaultInstance() {
  ::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_._instance.get_mutable()->caption_style_ = const_cast< ::mozc::renderer::RendererStyle_TextStyle*>(
      ::mozc::renderer::RendererStyle_TextStyle::internal_default_instance());
  ::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_._instance.get_mutable()->title_style_ = const_cast< ::mozc::renderer::RendererStyle_TextStyle*>(
      ::mozc::renderer::RendererStyle_TextStyle::internal_default_instance());
  ::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_._instance.get_mutable()->description_style_ = const_cast< ::mozc::renderer::RendererStyle_TextStyle*>(
      ::mozc::renderer::RendererStyle_TextStyle::internal_default_instance());
  ::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_._instance.get_mutable()->border_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_._instance.get_mutable()->caption_background_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_._instance.get_mutable()->focused_background_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_._instance.get_mutable()->focused_border_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererStyle_InfolistStyle::kCaptionStringFieldNumber;
const int RendererStyle_InfolistStyle::kCaptionHeightFieldNumber;
const int RendererStyle_InfolistStyle::kCaptionPaddingFieldNumber;
const int RendererStyle_InfolistStyle::kWindowBorderFieldNumber;
const int RendererStyle_InfolistStyle::kRowRectPaddingFieldNumber;
const int RendererStyle_InfolistStyle::kWindowWidthFieldNumber;
const int RendererStyle_InfolistStyle::kCaptionStyleFieldNumber;
const int RendererStyle_InfolistStyle::kTitleStyleFieldNumber;
const int RendererStyle_InfolistStyle::kDescriptionStyleFieldNumber;
const int RendererStyle_InfolistStyle::kBorderColorFieldNumber;
const int RendererStyle_InfolistStyle::kCaptionBackgroundColorFieldNumber;
const int RendererStyle_InfolistStyle::kFocusedBackgroundColorFieldNumber;
const int RendererStyle_InfolistStyle::kFocusedBorderColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererStyle_InfolistStyle::RendererStyle_InfolistStyle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2frenderer_5fstyle_2eproto::scc_info_RendererStyle_InfolistStyle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.renderer.RendererStyle.InfolistStyle)
}
RendererStyle_InfolistStyle::RendererStyle_InfolistStyle(const RendererStyle_InfolistStyle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  caption_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_caption_string()) {
    caption_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caption_string_);
  }
  if (from.has_caption_style()) {
    caption_style_ = new ::mozc::renderer::RendererStyle_TextStyle(*from.caption_style_);
  } else {
    caption_style_ = NULL;
  }
  if (from.has_title_style()) {
    title_style_ = new ::mozc::renderer::RendererStyle_TextStyle(*from.title_style_);
  } else {
    title_style_ = NULL;
  }
  if (from.has_description_style()) {
    description_style_ = new ::mozc::renderer::RendererStyle_TextStyle(*from.description_style_);
  } else {
    description_style_ = NULL;
  }
  if (from.has_border_color()) {
    border_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.border_color_);
  } else {
    border_color_ = NULL;
  }
  if (from.has_caption_background_color()) {
    caption_background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.caption_background_color_);
  } else {
    caption_background_color_ = NULL;
  }
  if (from.has_focused_background_color()) {
    focused_background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.focused_background_color_);
  } else {
    focused_background_color_ = NULL;
  }
  if (from.has_focused_border_color()) {
    focused_border_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.focused_border_color_);
  } else {
    focused_border_color_ = NULL;
  }
  ::memcpy(&caption_height_, &from.caption_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&window_width_) -
    reinterpret_cast<char*>(&caption_height_)) + sizeof(window_width_));
  // @@protoc_insertion_point(copy_constructor:mozc.renderer.RendererStyle.InfolistStyle)
}

void RendererStyle_InfolistStyle::SharedCtor() {
  caption_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&caption_style_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_width_) -
      reinterpret_cast<char*>(&caption_style_)) + sizeof(window_width_));
}

RendererStyle_InfolistStyle::~RendererStyle_InfolistStyle() {
  // @@protoc_insertion_point(destructor:mozc.renderer.RendererStyle.InfolistStyle)
  SharedDtor();
}

void RendererStyle_InfolistStyle::SharedDtor() {
  caption_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete caption_style_;
  if (this != internal_default_instance()) delete title_style_;
  if (this != internal_default_instance()) delete description_style_;
  if (this != internal_default_instance()) delete border_color_;
  if (this != internal_default_instance()) delete caption_background_color_;
  if (this != internal_default_instance()) delete focused_background_color_;
  if (this != internal_default_instance()) delete focused_border_color_;
}

void RendererStyle_InfolistStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RendererStyle_InfolistStyle::descriptor() {
  ::protobuf_protocol_2frenderer_5fstyle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2frenderer_5fstyle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RendererStyle_InfolistStyle& RendererStyle_InfolistStyle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2frenderer_5fstyle_2eproto::scc_info_RendererStyle_InfolistStyle.base);
  return *internal_default_instance();
}


void RendererStyle_InfolistStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.renderer.RendererStyle.InfolistStyle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      caption_string_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(caption_style_ != NULL);
      caption_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(title_style_ != NULL);
      title_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(description_style_ != NULL);
      description_style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(border_color_ != NULL);
      border_color_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(caption_background_color_ != NULL);
      caption_background_color_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(focused_background_color_ != NULL);
      focused_background_color_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(focused_border_color_ != NULL);
      focused_border_color_->Clear();
    }
  }
  if (cached_has_bits & 7936u) {
    ::memset(&caption_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&window_width_) -
        reinterpret_cast<char*>(&caption_height_)) + sizeof(window_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RendererStyle_InfolistStyle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.renderer.RendererStyle.InfolistStyle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string caption_string = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->caption_string().data(), static_cast<int>(this->caption_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.renderer.RendererStyle.InfolistStyle.caption_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 caption_height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_caption_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caption_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 caption_padding = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_caption_padding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caption_padding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 window_border = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_window_border();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_border_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 row_rect_padding = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_row_rect_padding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_rect_padding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 window_width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_window_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.TextStyle caption_style = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_caption_style()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.TextStyle title_style = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_title_style()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.TextStyle description_style = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_description_style()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_border_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor caption_background_color = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_caption_background_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_focused_background_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_focused_border_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.renderer.RendererStyle.InfolistStyle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.renderer.RendererStyle.InfolistStyle)
  return false;
#undef DO_
}

void RendererStyle_InfolistStyle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.renderer.RendererStyle.InfolistStyle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string caption_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caption_string().data(), static_cast<int>(this->caption_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.InfolistStyle.caption_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->caption_string(), output);
  }

  // optional int32 caption_height = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->caption_height(), output);
  }

  // optional int32 caption_padding = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->caption_padding(), output);
  }

  // optional int32 window_border = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->window_border(), output);
  }

  // optional int32 row_rect_padding = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->row_rect_padding(), output);
  }

  // optional int32 window_width = 6;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->window_width(), output);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle caption_style = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_caption_style(), output);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle title_style = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_title_style(), output);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle description_style = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_description_style(), output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_border_color(), output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor caption_background_color = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_caption_background_color(), output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_focused_background_color(), output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_focused_border_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.renderer.RendererStyle.InfolistStyle)
}

::google::protobuf::uint8* RendererStyle_InfolistStyle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.renderer.RendererStyle.InfolistStyle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string caption_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caption_string().data(), static_cast<int>(this->caption_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.InfolistStyle.caption_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->caption_string(), target);
  }

  // optional int32 caption_height = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->caption_height(), target);
  }

  // optional int32 caption_padding = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->caption_padding(), target);
  }

  // optional int32 window_border = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->window_border(), target);
  }

  // optional int32 row_rect_padding = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->row_rect_padding(), target);
  }

  // optional int32 window_width = 6;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->window_width(), target);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle caption_style = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_caption_style(), deterministic, target);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle title_style = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_title_style(), deterministic, target);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle description_style = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_description_style(), deterministic, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_border_color(), deterministic, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor caption_background_color = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_caption_background_color(), deterministic, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_focused_background_color(), deterministic, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_focused_border_color(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.renderer.RendererStyle.InfolistStyle)
  return target;
}

size_t RendererStyle_InfolistStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.renderer.RendererStyle.InfolistStyle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string caption_string = 1;
    if (has_caption_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption_string());
    }

    // optional .mozc.renderer.RendererStyle.TextStyle caption_style = 7;
    if (has_caption_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *caption_style_);
    }

    // optional .mozc.renderer.RendererStyle.TextStyle title_style = 8;
    if (has_title_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *title_style_);
    }

    // optional .mozc.renderer.RendererStyle.TextStyle description_style = 9;
    if (has_description_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *description_style_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 10;
    if (has_border_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *border_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor caption_background_color = 11;
    if (has_caption_background_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *caption_background_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 12;
    if (has_focused_background_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *focused_background_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 13;
    if (has_focused_border_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *focused_border_color_);
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int32 caption_height = 2;
    if (has_caption_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caption_height());
    }

    // optional int32 caption_padding = 3;
    if (has_caption_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caption_padding());
    }

    // optional int32 window_border = 4;
    if (has_window_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window_border());
    }

    // optional int32 row_rect_padding = 5;
    if (has_row_rect_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row_rect_padding());
    }

    // optional int32 window_width = 6;
    if (has_window_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window_width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RendererStyle_InfolistStyle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.renderer.RendererStyle.InfolistStyle)
  GOOGLE_DCHECK_NE(&from, this);
  const RendererStyle_InfolistStyle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererStyle_InfolistStyle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.renderer.RendererStyle.InfolistStyle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.renderer.RendererStyle.InfolistStyle)
    MergeFrom(*source);
  }
}

void RendererStyle_InfolistStyle::MergeFrom(const RendererStyle_InfolistStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.renderer.RendererStyle.InfolistStyle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_caption_string();
      caption_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caption_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_caption_style()->::mozc::renderer::RendererStyle_TextStyle::MergeFrom(from.caption_style());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_title_style()->::mozc::renderer::RendererStyle_TextStyle::MergeFrom(from.title_style());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_description_style()->::mozc::renderer::RendererStyle_TextStyle::MergeFrom(from.description_style());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_border_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.border_color());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_caption_background_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.caption_background_color());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_focused_background_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.focused_background_color());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_focused_border_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.focused_border_color());
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      caption_height_ = from.caption_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      caption_padding_ = from.caption_padding_;
    }
    if (cached_has_bits & 0x00000400u) {
      window_border_ = from.window_border_;
    }
    if (cached_has_bits & 0x00000800u) {
      row_rect_padding_ = from.row_rect_padding_;
    }
    if (cached_has_bits & 0x00001000u) {
      window_width_ = from.window_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RendererStyle_InfolistStyle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.renderer.RendererStyle.InfolistStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererStyle_InfolistStyle::CopyFrom(const RendererStyle_InfolistStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.renderer.RendererStyle.InfolistStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererStyle_InfolistStyle::IsInitialized() const {
  if (has_caption_style()) {
    if (!this->caption_style_->IsInitialized()) return false;
  }
  if (has_title_style()) {
    if (!this->title_style_->IsInitialized()) return false;
  }
  if (has_description_style()) {
    if (!this->description_style_->IsInitialized()) return false;
  }
  if (has_border_color()) {
    if (!this->border_color_->IsInitialized()) return false;
  }
  if (has_caption_background_color()) {
    if (!this->caption_background_color_->IsInitialized()) return false;
  }
  if (has_focused_background_color()) {
    if (!this->focused_background_color_->IsInitialized()) return false;
  }
  if (has_focused_border_color()) {
    if (!this->focused_border_color_->IsInitialized()) return false;
  }
  return true;
}

void RendererStyle_InfolistStyle::Swap(RendererStyle_InfolistStyle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererStyle_InfolistStyle::InternalSwap(RendererStyle_InfolistStyle* other) {
  using std::swap;
  caption_string_.Swap(&other->caption_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(caption_style_, other->caption_style_);
  swap(title_style_, other->title_style_);
  swap(description_style_, other->description_style_);
  swap(border_color_, other->border_color_);
  swap(caption_background_color_, other->caption_background_color_);
  swap(focused_background_color_, other->focused_background_color_);
  swap(focused_border_color_, other->focused_border_color_);
  swap(caption_height_, other->caption_height_);
  swap(caption_padding_, other->caption_padding_);
  swap(window_border_, other->window_border_);
  swap(row_rect_padding_, other->row_rect_padding_);
  swap(window_width_, other->window_width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RendererStyle_InfolistStyle::GetMetadata() const {
  protobuf_protocol_2frenderer_5fstyle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2frenderer_5fstyle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RendererStyle::InitAsDefaultInstance() {
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->border_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->footer_style_ = const_cast< ::mozc::renderer::RendererStyle_TextStyle*>(
      ::mozc::renderer::RendererStyle_TextStyle::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->footer_sub_label_style_ = const_cast< ::mozc::renderer::RendererStyle_TextStyle*>(
      ::mozc::renderer::RendererStyle_TextStyle::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->focused_background_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->focused_border_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->scrollbar_background_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->scrollbar_indicator_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->footer_top_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->footer_bottom_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->infolist_style_ = const_cast< ::mozc::renderer::RendererStyle_InfolistStyle*>(
      ::mozc::renderer::RendererStyle_InfolistStyle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererStyle::kWindowBorderFieldNumber;
const int RendererStyle::kFooterHeightFieldNumber;
const int RendererStyle::kRowRectPaddingFieldNumber;
const int RendererStyle::kBorderColorFieldNumber;
const int RendererStyle::kColumnMinimumWidthStringFieldNumber;
const int RendererStyle::kTextStylesFieldNumber;
const int RendererStyle::kFooterBorderColorsFieldNumber;
const int RendererStyle::kFooterStyleFieldNumber;
const int RendererStyle::kFooterSubLabelStyleFieldNumber;
const int RendererStyle::kFocusedBackgroundColorFieldNumber;
const int RendererStyle::kFocusedBorderColorFieldNumber;
const int RendererStyle::kScrollbarBackgroundColorFieldNumber;
const int RendererStyle::kScrollbarIndicatorColorFieldNumber;
const int RendererStyle::kScrollbarWidthFieldNumber;
const int RendererStyle::kFooterTopColorFieldNumber;
const int RendererStyle::kFooterBottomColorFieldNumber;
const int RendererStyle::kLogoFileNameFieldNumber;
const int RendererStyle::kInfolistStyleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererStyle::RendererStyle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2frenderer_5fstyle_2eproto::scc_info_RendererStyle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.renderer.RendererStyle)
}
RendererStyle::RendererStyle(const RendererStyle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      text_styles_(from.text_styles_),
      footer_border_colors_(from.footer_border_colors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  column_minimum_width_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_column_minimum_width_string()) {
    column_minimum_width_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_minimum_width_string_);
  }
  logo_file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_logo_file_name()) {
    logo_file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logo_file_name_);
  }
  if (from.has_border_color()) {
    border_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.border_color_);
  } else {
    border_color_ = NULL;
  }
  if (from.has_footer_style()) {
    footer_style_ = new ::mozc::renderer::RendererStyle_TextStyle(*from.footer_style_);
  } else {
    footer_style_ = NULL;
  }
  if (from.has_footer_sub_label_style()) {
    footer_sub_label_style_ = new ::mozc::renderer::RendererStyle_TextStyle(*from.footer_sub_label_style_);
  } else {
    footer_sub_label_style_ = NULL;
  }
  if (from.has_focused_background_color()) {
    focused_background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.focused_background_color_);
  } else {
    focused_background_color_ = NULL;
  }
  if (from.has_focused_border_color()) {
    focused_border_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.focused_border_color_);
  } else {
    focused_border_color_ = NULL;
  }
  if (from.has_scrollbar_background_color()) {
    scrollbar_background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.scrollbar_background_color_);
  } else {
    scrollbar_background_color_ = NULL;
  }
  if (from.has_scrollbar_indicator_color()) {
    scrollbar_indicator_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.scrollbar_indicator_color_);
  } else {
    scrollbar_indicator_color_ = NULL;
  }
  if (from.has_footer_top_color()) {
    footer_top_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.footer_top_color_);
  } else {
    footer_top_color_ = NULL;
  }
  if (from.has_footer_bottom_color()) {
    footer_bottom_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.footer_bottom_color_);
  } else {
    footer_bottom_color_ = NULL;
  }
  if (from.has_infolist_style()) {
    infolist_style_ = new ::mozc::renderer::RendererStyle_InfolistStyle(*from.infolist_style_);
  } else {
    infolist_style_ = NULL;
  }
  ::memcpy(&window_border_, &from.window_border_,
    static_cast<size_t>(reinterpret_cast<char*>(&scrollbar_width_) -
    reinterpret_cast<char*>(&window_border_)) + sizeof(scrollbar_width_));
  // @@protoc_insertion_point(copy_constructor:mozc.renderer.RendererStyle)
}

void RendererStyle::SharedCtor() {
  column_minimum_width_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&border_color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scrollbar_width_) -
      reinterpret_cast<char*>(&border_color_)) + sizeof(scrollbar_width_));
}

RendererStyle::~RendererStyle() {
  // @@protoc_insertion_point(destructor:mozc.renderer.RendererStyle)
  SharedDtor();
}

void RendererStyle::SharedDtor() {
  column_minimum_width_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete border_color_;
  if (this != internal_default_instance()) delete footer_style_;
  if (this != internal_default_instance()) delete footer_sub_label_style_;
  if (this != internal_default_instance()) delete focused_background_color_;
  if (this != internal_default_instance()) delete focused_border_color_;
  if (this != internal_default_instance()) delete scrollbar_background_color_;
  if (this != internal_default_instance()) delete scrollbar_indicator_color_;
  if (this != internal_default_instance()) delete footer_top_color_;
  if (this != internal_default_instance()) delete footer_bottom_color_;
  if (this != internal_default_instance()) delete infolist_style_;
}

void RendererStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RendererStyle::descriptor() {
  ::protobuf_protocol_2frenderer_5fstyle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2frenderer_5fstyle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RendererStyle& RendererStyle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2frenderer_5fstyle_2eproto::scc_info_RendererStyle.base);
  return *internal_default_instance();
}


void RendererStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.renderer.RendererStyle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_styles_.Clear();
  footer_border_colors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      column_minimum_width_string_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      logo_file_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(border_color_ != NULL);
      border_color_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(footer_style_ != NULL);
      footer_style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(footer_sub_label_style_ != NULL);
      footer_sub_label_style_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(focused_background_color_ != NULL);
      focused_background_color_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(focused_border_color_ != NULL);
      focused_border_color_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(scrollbar_background_color_ != NULL);
      scrollbar_background_color_->Clear();
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(scrollbar_indicator_color_ != NULL);
      scrollbar_indicator_color_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(footer_top_color_ != NULL);
      footer_top_color_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(footer_bottom_color_ != NULL);
      footer_bottom_color_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(infolist_style_ != NULL);
      infolist_style_->Clear();
    }
  }
  if (cached_has_bits & 61440u) {
    ::memset(&window_border_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scrollbar_width_) -
        reinterpret_cast<char*>(&window_border_)) + sizeof(scrollbar_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RendererStyle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.renderer.RendererStyle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 window_border = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_window_border();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_border_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 footer_height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_footer_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &footer_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 row_rect_padding = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_row_rect_padding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_rect_padding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_border_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string column_minimum_width_string = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column_minimum_width_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->column_minimum_width_string().data(), static_cast<int>(this->column_minimum_width_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.renderer.RendererStyle.column_minimum_width_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mozc.renderer.RendererStyle.TextStyle text_styles = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_text_styles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mozc.renderer.RendererStyle.RGBAColor footer_border_colors = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_footer_border_colors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.TextStyle footer_style = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_footer_style()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.TextStyle footer_sub_label_style = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_footer_sub_label_style()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_focused_background_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_focused_border_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_background_color = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scrollbar_background_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_indicator_color = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scrollbar_indicator_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 scrollbar_width = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_scrollbar_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scrollbar_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor footer_top_color = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_footer_top_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor footer_bottom_color = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_footer_bottom_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string logo_file_name = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logo_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logo_file_name().data(), static_cast<int>(this->logo_file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.renderer.RendererStyle.logo_file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.renderer.RendererStyle.InfolistStyle infolist_style = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_infolist_style()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.renderer.RendererStyle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.renderer.RendererStyle)
  return false;
#undef DO_
}

void RendererStyle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.renderer.RendererStyle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 window_border = 1;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->window_border(), output);
  }

  // optional int32 footer_height = 2;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->footer_height(), output);
  }

  // optional int32 row_rect_padding = 3;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->row_rect_padding(), output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_border_color(), output);
  }

  // optional string column_minimum_width_string = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->column_minimum_width_string().data(), static_cast<int>(this->column_minimum_width_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.column_minimum_width_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->column_minimum_width_string(), output);
  }

  // repeated .mozc.renderer.RendererStyle.TextStyle text_styles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->text_styles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->text_styles(static_cast<int>(i)),
      output);
  }

  // repeated .mozc.renderer.RendererStyle.RGBAColor footer_border_colors = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->footer_border_colors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->footer_border_colors(static_cast<int>(i)),
      output);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle footer_style = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_footer_style(), output);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle footer_sub_label_style = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_footer_sub_label_style(), output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_focused_background_color(), output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_focused_border_color(), output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_background_color = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_scrollbar_background_color(), output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_indicator_color = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_scrollbar_indicator_color(), output);
  }

  // optional int32 scrollbar_width = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->scrollbar_width(), output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor footer_top_color = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_footer_top_color(), output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor footer_bottom_color = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_footer_bottom_color(), output);
  }

  // optional string logo_file_name = 17;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo_file_name().data(), static_cast<int>(this->logo_file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.logo_file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->logo_file_name(), output);
  }

  // optional .mozc.renderer.RendererStyle.InfolistStyle infolist_style = 18;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_infolist_style(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.renderer.RendererStyle)
}

::google::protobuf::uint8* RendererStyle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.renderer.RendererStyle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 window_border = 1;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->window_border(), target);
  }

  // optional int32 footer_height = 2;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->footer_height(), target);
  }

  // optional int32 row_rect_padding = 3;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->row_rect_padding(), target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_border_color(), deterministic, target);
  }

  // optional string column_minimum_width_string = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->column_minimum_width_string().data(), static_cast<int>(this->column_minimum_width_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.column_minimum_width_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->column_minimum_width_string(), target);
  }

  // repeated .mozc.renderer.RendererStyle.TextStyle text_styles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->text_styles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->text_styles(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mozc.renderer.RendererStyle.RGBAColor footer_border_colors = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->footer_border_colors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->footer_border_colors(static_cast<int>(i)), deterministic, target);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle footer_style = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_footer_style(), deterministic, target);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle footer_sub_label_style = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_footer_sub_label_style(), deterministic, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_focused_background_color(), deterministic, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_focused_border_color(), deterministic, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_background_color = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_scrollbar_background_color(), deterministic, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_indicator_color = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_scrollbar_indicator_color(), deterministic, target);
  }

  // optional int32 scrollbar_width = 14;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->scrollbar_width(), target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor footer_top_color = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_footer_top_color(), deterministic, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor footer_bottom_color = 16;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_footer_bottom_color(), deterministic, target);
  }

  // optional string logo_file_name = 17;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo_file_name().data(), static_cast<int>(this->logo_file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.logo_file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->logo_file_name(), target);
  }

  // optional .mozc.renderer.RendererStyle.InfolistStyle infolist_style = 18;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_infolist_style(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.renderer.RendererStyle)
  return target;
}

size_t RendererStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.renderer.RendererStyle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mozc.renderer.RendererStyle.TextStyle text_styles = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->text_styles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->text_styles(static_cast<int>(i)));
    }
  }

  // repeated .mozc.renderer.RendererStyle.RGBAColor footer_border_colors = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->footer_border_colors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->footer_border_colors(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string column_minimum_width_string = 5;
    if (has_column_minimum_width_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->column_minimum_width_string());
    }

    // optional string logo_file_name = 17;
    if (has_logo_file_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logo_file_name());
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 4;
    if (has_border_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *border_color_);
    }

    // optional .mozc.renderer.RendererStyle.TextStyle footer_style = 8;
    if (has_footer_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *footer_style_);
    }

    // optional .mozc.renderer.RendererStyle.TextStyle footer_sub_label_style = 9;
    if (has_footer_sub_label_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *footer_sub_label_style_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 10;
    if (has_focused_background_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *focused_background_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 11;
    if (has_focused_border_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *focused_border_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_background_color = 12;
    if (has_scrollbar_background_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scrollbar_background_color_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_indicator_color = 13;
    if (has_scrollbar_indicator_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scrollbar_indicator_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor footer_top_color = 15;
    if (has_footer_top_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *footer_top_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor footer_bottom_color = 16;
    if (has_footer_bottom_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *footer_bottom_color_);
    }

    // optional .mozc.renderer.RendererStyle.InfolistStyle infolist_style = 18;
    if (has_infolist_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *infolist_style_);
    }

    // optional int32 window_border = 1;
    if (has_window_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window_border());
    }

    // optional int32 footer_height = 2;
    if (has_footer_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->footer_height());
    }

    // optional int32 row_rect_padding = 3;
    if (has_row_rect_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row_rect_padding());
    }

    // optional int32 scrollbar_width = 14;
    if (has_scrollbar_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scrollbar_width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RendererStyle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.renderer.RendererStyle)
  GOOGLE_DCHECK_NE(&from, this);
  const RendererStyle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererStyle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.renderer.RendererStyle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.renderer.RendererStyle)
    MergeFrom(*source);
  }
}

void RendererStyle::MergeFrom(const RendererStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.renderer.RendererStyle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  text_styles_.MergeFrom(from.text_styles_);
  footer_border_colors_.MergeFrom(from.footer_border_colors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_column_minimum_width_string();
      column_minimum_width_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_minimum_width_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_logo_file_name();
      logo_file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logo_file_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_border_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.border_color());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_footer_style()->::mozc::renderer::RendererStyle_TextStyle::MergeFrom(from.footer_style());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_footer_sub_label_style()->::mozc::renderer::RendererStyle_TextStyle::MergeFrom(from.footer_sub_label_style());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_focused_background_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.focused_background_color());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_focused_border_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.focused_border_color());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_scrollbar_background_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.scrollbar_background_color());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_scrollbar_indicator_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.scrollbar_indicator_color());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_footer_top_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.footer_top_color());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_footer_bottom_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.footer_bottom_color());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_infolist_style()->::mozc::renderer::RendererStyle_InfolistStyle::MergeFrom(from.infolist_style());
    }
    if (cached_has_bits & 0x00001000u) {
      window_border_ = from.window_border_;
    }
    if (cached_has_bits & 0x00002000u) {
      footer_height_ = from.footer_height_;
    }
    if (cached_has_bits & 0x00004000u) {
      row_rect_padding_ = from.row_rect_padding_;
    }
    if (cached_has_bits & 0x00008000u) {
      scrollbar_width_ = from.scrollbar_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RendererStyle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.renderer.RendererStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererStyle::CopyFrom(const RendererStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.renderer.RendererStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererStyle::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->text_styles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->footer_border_colors())) return false;
  if (has_border_color()) {
    if (!this->border_color_->IsInitialized()) return false;
  }
  if (has_footer_style()) {
    if (!this->footer_style_->IsInitialized()) return false;
  }
  if (has_footer_sub_label_style()) {
    if (!this->footer_sub_label_style_->IsInitialized()) return false;
  }
  if (has_focused_background_color()) {
    if (!this->focused_background_color_->IsInitialized()) return false;
  }
  if (has_focused_border_color()) {
    if (!this->focused_border_color_->IsInitialized()) return false;
  }
  if (has_scrollbar_background_color()) {
    if (!this->scrollbar_background_color_->IsInitialized()) return false;
  }
  if (has_scrollbar_indicator_color()) {
    if (!this->scrollbar_indicator_color_->IsInitialized()) return false;
  }
  if (has_footer_top_color()) {
    if (!this->footer_top_color_->IsInitialized()) return false;
  }
  if (has_footer_bottom_color()) {
    if (!this->footer_bottom_color_->IsInitialized()) return false;
  }
  if (has_infolist_style()) {
    if (!this->infolist_style_->IsInitialized()) return false;
  }
  return true;
}

void RendererStyle::Swap(RendererStyle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererStyle::InternalSwap(RendererStyle* other) {
  using std::swap;
  CastToBase(&text_styles_)->InternalSwap(CastToBase(&other->text_styles_));
  CastToBase(&footer_border_colors_)->InternalSwap(CastToBase(&other->footer_border_colors_));
  column_minimum_width_string_.Swap(&other->column_minimum_width_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  logo_file_name_.Swap(&other->logo_file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(border_color_, other->border_color_);
  swap(footer_style_, other->footer_style_);
  swap(footer_sub_label_style_, other->footer_sub_label_style_);
  swap(focused_background_color_, other->focused_background_color_);
  swap(focused_border_color_, other->focused_border_color_);
  swap(scrollbar_background_color_, other->scrollbar_background_color_);
  swap(scrollbar_indicator_color_, other->scrollbar_indicator_color_);
  swap(footer_top_color_, other->footer_top_color_);
  swap(footer_bottom_color_, other->footer_bottom_color_);
  swap(infolist_style_, other->infolist_style_);
  swap(window_border_, other->window_border_);
  swap(footer_height_, other->footer_height_);
  swap(row_rect_padding_, other->row_rect_padding_);
  swap(scrollbar_width_, other->scrollbar_width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RendererStyle::GetMetadata() const {
  protobuf_protocol_2frenderer_5fstyle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2frenderer_5fstyle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace renderer
}  // namespace mozc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::renderer::RendererStyle_RGBAColor* Arena::CreateMaybeMessage< ::mozc::renderer::RendererStyle_RGBAColor >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::renderer::RendererStyle_RGBAColor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::renderer::RendererStyle_TextStyle* Arena::CreateMaybeMessage< ::mozc::renderer::RendererStyle_TextStyle >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::renderer::RendererStyle_TextStyle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::renderer::RendererStyle_InfolistStyle* Arena::CreateMaybeMessage< ::mozc::renderer::RendererStyle_InfolistStyle >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::renderer::RendererStyle_InfolistStyle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::renderer::RendererStyle* Arena::CreateMaybeMessage< ::mozc::renderer::RendererStyle >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::renderer::RendererStyle >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
