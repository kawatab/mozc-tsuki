// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/user_dictionary_storage.proto

#include "protocol/user_dictionary_storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserDictionary_Entry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UserDictionary;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UserDictionaryStorage;
}  // namespace protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto
namespace mozc {
namespace user_dictionary {
class UserDictionary_EntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserDictionary_Entry>
      _instance;
} _UserDictionary_Entry_default_instance_;
class UserDictionaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserDictionary>
      _instance;
} _UserDictionary_default_instance_;
class UserDictionaryStorageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserDictionaryStorage>
      _instance;
} _UserDictionaryStorage_default_instance_;
class UserDictionaryCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserDictionaryCommand>
      _instance;
} _UserDictionaryCommand_default_instance_;
class UserDictionaryCommandStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserDictionaryCommandStatus>
      _instance;
} _UserDictionaryCommandStatus_default_instance_;
}  // namespace user_dictionary
}  // namespace mozc
namespace protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto {
static void InitDefaultsUserDictionary_Entry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::user_dictionary::_UserDictionary_Entry_default_instance_;
    new (ptr) ::mozc::user_dictionary::UserDictionary_Entry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::user_dictionary::UserDictionary_Entry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserDictionary_Entry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserDictionary_Entry}, {}};

static void InitDefaultsUserDictionary() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::user_dictionary::_UserDictionary_default_instance_;
    new (ptr) ::mozc::user_dictionary::UserDictionary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::user_dictionary::UserDictionary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserDictionary =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserDictionary}, {
      &protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::scc_info_UserDictionary_Entry.base,}};

static void InitDefaultsUserDictionaryStorage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::user_dictionary::_UserDictionaryStorage_default_instance_;
    new (ptr) ::mozc::user_dictionary::UserDictionaryStorage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::user_dictionary::UserDictionaryStorage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserDictionaryStorage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserDictionaryStorage}, {
      &protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::scc_info_UserDictionary.base,}};

static void InitDefaultsUserDictionaryCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::user_dictionary::_UserDictionaryCommand_default_instance_;
    new (ptr) ::mozc::user_dictionary::UserDictionaryCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::user_dictionary::UserDictionaryCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserDictionaryCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserDictionaryCommand}, {
      &protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::scc_info_UserDictionary_Entry.base,}};

static void InitDefaultsUserDictionaryCommandStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::user_dictionary::_UserDictionaryCommandStatus_default_instance_;
    new (ptr) ::mozc::user_dictionary::UserDictionaryCommandStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::user_dictionary::UserDictionaryCommandStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserDictionaryCommandStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserDictionaryCommandStatus}, {
      &protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::scc_info_UserDictionaryStorage.base,
      &protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::scc_info_UserDictionary_Entry.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_UserDictionary_Entry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserDictionary.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserDictionaryStorage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserDictionaryCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserDictionaryCommandStatus.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary_Entry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary_Entry, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary_Entry, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary_Entry, comment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary_Entry, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary_Entry, removed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary_Entry, auto_registered_),
  0,
  1,
  2,
  5,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary, entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary, removed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary, syncable_),
  1,
  4,
  0,
  ~0u,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryStorage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryStorage, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryStorage, dictionaries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryStorage, storage_type_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, dictionary_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, dictionary_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, entry_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, entry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, ensure_non_empty_storage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, ignore_invalid_entries_),
  5,
  3,
  4,
  0,
  ~0u,
  2,
  1,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommandStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommandStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommandStatus, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommandStatus, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommandStatus, storage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommandStatus, dictionary_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommandStatus, entry_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommandStatus, entries_),
  4,
  1,
  0,
  2,
  3,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::mozc::user_dictionary::UserDictionary_Entry)},
  { 17, 28, sizeof(::mozc::user_dictionary::UserDictionary)},
  { 34, 42, sizeof(::mozc::user_dictionary::UserDictionaryStorage)},
  { 45, 59, sizeof(::mozc::user_dictionary::UserDictionaryCommand)},
  { 68, 79, sizeof(::mozc::user_dictionary::UserDictionaryCommandStatus)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::user_dictionary::_UserDictionary_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::user_dictionary::_UserDictionary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::user_dictionary::_UserDictionaryStorage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::user_dictionary::_UserDictionaryCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::user_dictionary::_UserDictionaryCommandStatus_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protocol/user_dictionary_storage.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n&protocol/user_dictionary_storage.proto"
      "\022\024mozc.user_dictionary\"\312\t\n\016UserDictionar"
      "y\022\r\n\002id\030\001 \001(\004:\0010\022\025\n\007enabled\030\002 \001(\010:\004true\022"
      "\016\n\004name\030\003 \001(\t:\000\022;\n\007entries\030\004 \003(\0132*.mozc."
      "user_dictionary.UserDictionary.Entry\022\026\n\007"
      "removed\030\005 \001(\010:\005false\022\027\n\010syncable\030\006 \001(\010:\005"
      "false\032\263\001\n\005Entry\022\r\n\003key\030\001 \001(\t:\000\022\017\n\005value\030"
      "\002 \001(\t:\000\022\021\n\007comment\030\004 \001(\t:\000\0229\n\003pos\030\005 \001(\0162"
      ",.mozc.user_dictionary.UserDictionary.Po"
      "sType\022\026\n\007removed\030\n \001(\010:\005false\022\036\n\017auto_re"
      "gistered\030\013 \001(\010:\005falseJ\004\010\003\020\004\"\335\006\n\007PosType\022"
      "\010\n\004NOUN\020\001\022\020\n\014ABBREVIATION\020\002\022\023\n\017SUGGESTIO"
      "N_ONLY\020\003\022\017\n\013PROPER_NOUN\020\004\022\021\n\rPERSONAL_NA"
      "ME\020\005\022\017\n\013FAMILY_NAME\020\006\022\016\n\nFIRST_NAME\020\007\022\025\n"
      "\021ORGANIZATION_NAME\020\010\022\016\n\nPLACE_NAME\020\t\022!\n\035"
      "SA_IRREGULAR_CONJUGATION_NOUN\020\n\022\031\n\025ADJEC"
      "TIVE_VERBAL_NOUN\020\013\022\n\n\006NUMBER\020\014\022\014\n\010ALPHAB"
      "ET\020\r\022\n\n\006SYMBOL\020\016\022\014\n\010EMOTICON\020\017\022\n\n\006ADVERB"
      "\020\020\022\026\n\022PRENOUN_ADJECTIVAL\020\021\022\017\n\013CONJUNCTIO"
      "N\020\022\022\020\n\014INTERJECTION\020\023\022\n\n\006PREFIX\020\024\022\022\n\016COU"
      "NTER_SUFFIX\020\025\022\022\n\016GENERIC_SUFFIX\020\026\022\026\n\022PER"
      "SON_NAME_SUFFIX\020\027\022\025\n\021PLACE_NAME_SUFFIX\020\030"
      "\022\022\n\016WA_GROUP1_VERB\020\031\022\022\n\016KA_GROUP1_VERB\020\032"
      "\022\022\n\016SA_GROUP1_VERB\020\033\022\022\n\016TA_GROUP1_VERB\020\034"
      "\022\022\n\016NA_GROUP1_VERB\020\035\022\022\n\016MA_GROUP1_VERB\020\036"
      "\022\022\n\016RA_GROUP1_VERB\020\037\022\022\n\016GA_GROUP1_VERB\020 "
      "\022\022\n\016BA_GROUP1_VERB\020!\022\022\n\016HA_GROUP1_VERB\020\""
      "\022\017\n\013GROUP2_VERB\020#\022\024\n\020KURU_GROUP3_VERB\020$\022"
      "\024\n\020SURU_GROUP3_VERB\020%\022\024\n\020ZURU_GROUP3_VER"
      "B\020&\022\022\n\016RU_GROUP3_VERB\020\'\022\r\n\tADJECTIVE\020(\022\034"
      "\n\030SENTENCE_ENDING_PARTICLE\020)\022\017\n\013PUNCTUAT"
      "ION\020*\022\026\n\022FREE_STANDING_WORD\020+\022\024\n\020SUPPRES"
      "SION_WORD\020,\"\351\001\n\025UserDictionaryStorage\022\022\n"
      "\007version\030\001 \001(\005:\0010\022:\n\014dictionaries\030\002 \003(\0132"
      "$.mozc.user_dictionary.UserDictionary\022W\n"
      "\014storage_type\030\n \001(\01627.mozc.user_dictiona"
      "ry.UserDictionaryStorage.StorageType:\010SN"
      "APSHOT\"\'\n\013StorageType\022\014\n\010SNAPSHOT\020\001\022\n\n\006U"
      "PDATE\020\002\"\266\006\n\025UserDictionaryCommand\022E\n\004typ"
      "e\030\001 \002(\01627.mozc.user_dictionary.UserDicti"
      "onaryCommand.CommandType\022\022\n\nsession_id\030\002"
      " \001(\004\022\025\n\rdictionary_id\030\003 \001(\004\022\027\n\017dictionar"
      "y_name\030\004 \001(\t\022\023\n\013entry_index\030\005 \003(\005\0229\n\005ent"
      "ry\030\006 \001(\0132*.mozc.user_dictionary.UserDict"
      "ionary.Entry\022\014\n\004data\030\007 \001(\t\022 \n\030ensure_non"
      "_empty_storage\030\010 \001(\010\022\036\n\026ignore_invalid_e"
      "ntries\030\t \001(\010\"\361\003\n\013CommandType\022\020\n\014NO_OPERA"
      "TION\020\000\022\021\n\rCLEAR_STORAGE\020\001\022\022\n\016CREATE_SESS"
      "ION\020\002\022\022\n\016DELETE_SESSION\020\003\022\037\n\033SET_DEFAULT"
      "_DICTIONARY_NAME\020\004\022\025\n\021CHECK_UNDOABILITY\020"
      "\005\022\010\n\004UNDO\020\006\022\010\n\004LOAD\020\007\022\010\n\004SAVE\020\010\022!\n\035GET_U"
      "SER_DICTIONARY_NAME_LIST\020\t\022\022\n\016GET_ENTRY_"
      "SIZE\020\n\022\026\n\022OBSOLETE_GET_ENTRY\020\013\022%\n!CHECK_"
      "NEW_DICTIONARY_AVAILABILITY\020\014\022\025\n\021CREATE_"
      "DICTIONARY\020\r\022\025\n\021DELETE_DICTIONARY\020\016\022\025\n\021R"
      "ENAME_DICTIONARY\020\017\022 \n\034CHECK_NEW_ENTRY_AV"
      "AILABILITY\020\020\022\r\n\tADD_ENTRY\020\021\022\016\n\nEDIT_ENTR"
      "Y\020\022\022\020\n\014DELETE_ENTRY\020\023\022\017\n\013IMPORT_DATA\020\024\022\017"
      "\n\013GET_STORAGE\020\025\022\017\n\013GET_ENTRIES\020\026\"\266\010\n\033Use"
      "rDictionaryCommandStatus\022H\n\006status\030\001 \002(\016"
      "28.mozc.user_dictionary.UserDictionaryCo"
      "mmandStatus.Status\022\022\n\nsession_id\030\002 \001(\004\022<"
      "\n\007storage\030\003 \001(\0132+.mozc.user_dictionary.U"
      "serDictionaryStorage\022\025\n\rdictionary_id\030\005 "
      "\001(\004\022\022\n\nentry_size\030\006 \001(\r\022;\n\007entries\030\007 \003(\013"
      "2*.mozc.user_dictionary.UserDictionary.E"
      "ntry\"\214\006\n\006Status\022#\n\037USER_DICTIONARY_COMMA"
      "ND_SUCCESS\020\001\022\021\n\rUNKNOWN_ERROR\020\002\022\023\n\017UNKNO"
      "WN_COMMAND\020\003\022\024\n\020INVALID_ARGUMENT\020\004\022\026\n\022UN"
      "KNOWN_SESSION_ID\020\005\022\022\n\016FILE_NOT_FOUND\020\006\022\027"
      "\n\023INVALID_FILE_FORMAT\020\007\022\034\n\030FILE_SIZE_LIM"
      "IT_EXCEEDED\020\010\022\"\n\036DICTIONARY_SIZE_LIMIT_E"
      "XCEEDED\020\t\022\035\n\031ENTRY_SIZE_LIMIT_EXCEEDED\020\n"
      "\022\031\n\025UNKNOWN_DICTIONARY_ID\020\013\022\034\n\030ENTRY_IND"
      "EX_OUT_OF_RANGE\020\014\022\031\n\025DICTIONARY_NAME_EMP"
      "TY\020\r\022\034\n\030DICTIONARY_NAME_TOO_LONG\020\016\022.\n*DI"
      "CTIONARY_NAME_CONTAINS_INVALID_CHARACTER"
      "\020\017\022\036\n\032DICTIONARY_NAME_DUPLICATED\020\020\022\021\n\rRE"
      "ADING_EMPTY\020\021\022\024\n\020READING_TOO_LONG\020\022\022&\n\"R"
      "EADING_CONTAINS_INVALID_CHARACTER\020\023\022\016\n\nW"
      "ORD_EMPTY\020\024\022\021\n\rWORD_TOO_LONG\020\025\022#\n\037WORD_C"
      "ONTAINS_INVALID_CHARACTER\020\026\022\024\n\020INVALID_P"
      "OS_TYPE\020\027\022\024\n\020COMMENT_TOO_LONG\020\030\022&\n\"COMME"
      "NT_CONTAINS_INVALID_CHARACTER\020\031\022\031\n\025IMPOR"
      "T_TOO_MANY_WORDS\020\032\022\032\n\026IMPORT_INVALID_ENT"
      "RIES\020\033\022\023\n\017NO_UNDO_HISTORY\020\034J\004\010\004\020\005BL\n.org"
      ".mozc.android.inputmethod.japanese.proto"
      "bufB\032ProtoUserDictionaryStorage"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3511);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/user_dictionary_storage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto
namespace mozc {
namespace user_dictionary {
const ::google::protobuf::EnumDescriptor* UserDictionary_PosType_descriptor() {
  protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::file_level_enum_descriptors[0];
}
bool UserDictionary_PosType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserDictionary_PosType UserDictionary::NOUN;
const UserDictionary_PosType UserDictionary::ABBREVIATION;
const UserDictionary_PosType UserDictionary::SUGGESTION_ONLY;
const UserDictionary_PosType UserDictionary::PROPER_NOUN;
const UserDictionary_PosType UserDictionary::PERSONAL_NAME;
const UserDictionary_PosType UserDictionary::FAMILY_NAME;
const UserDictionary_PosType UserDictionary::FIRST_NAME;
const UserDictionary_PosType UserDictionary::ORGANIZATION_NAME;
const UserDictionary_PosType UserDictionary::PLACE_NAME;
const UserDictionary_PosType UserDictionary::SA_IRREGULAR_CONJUGATION_NOUN;
const UserDictionary_PosType UserDictionary::ADJECTIVE_VERBAL_NOUN;
const UserDictionary_PosType UserDictionary::NUMBER;
const UserDictionary_PosType UserDictionary::ALPHABET;
const UserDictionary_PosType UserDictionary::SYMBOL;
const UserDictionary_PosType UserDictionary::EMOTICON;
const UserDictionary_PosType UserDictionary::ADVERB;
const UserDictionary_PosType UserDictionary::PRENOUN_ADJECTIVAL;
const UserDictionary_PosType UserDictionary::CONJUNCTION;
const UserDictionary_PosType UserDictionary::INTERJECTION;
const UserDictionary_PosType UserDictionary::PREFIX;
const UserDictionary_PosType UserDictionary::COUNTER_SUFFIX;
const UserDictionary_PosType UserDictionary::GENERIC_SUFFIX;
const UserDictionary_PosType UserDictionary::PERSON_NAME_SUFFIX;
const UserDictionary_PosType UserDictionary::PLACE_NAME_SUFFIX;
const UserDictionary_PosType UserDictionary::WA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::KA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::SA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::TA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::NA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::MA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::RA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::GA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::BA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::HA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::GROUP2_VERB;
const UserDictionary_PosType UserDictionary::KURU_GROUP3_VERB;
const UserDictionary_PosType UserDictionary::SURU_GROUP3_VERB;
const UserDictionary_PosType UserDictionary::ZURU_GROUP3_VERB;
const UserDictionary_PosType UserDictionary::RU_GROUP3_VERB;
const UserDictionary_PosType UserDictionary::ADJECTIVE;
const UserDictionary_PosType UserDictionary::SENTENCE_ENDING_PARTICLE;
const UserDictionary_PosType UserDictionary::PUNCTUATION;
const UserDictionary_PosType UserDictionary::FREE_STANDING_WORD;
const UserDictionary_PosType UserDictionary::SUPPRESSION_WORD;
const UserDictionary_PosType UserDictionary::PosType_MIN;
const UserDictionary_PosType UserDictionary::PosType_MAX;
const int UserDictionary::PosType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UserDictionaryStorage_StorageType_descriptor() {
  protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::file_level_enum_descriptors[1];
}
bool UserDictionaryStorage_StorageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserDictionaryStorage_StorageType UserDictionaryStorage::SNAPSHOT;
const UserDictionaryStorage_StorageType UserDictionaryStorage::UPDATE;
const UserDictionaryStorage_StorageType UserDictionaryStorage::StorageType_MIN;
const UserDictionaryStorage_StorageType UserDictionaryStorage::StorageType_MAX;
const int UserDictionaryStorage::StorageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UserDictionaryCommand_CommandType_descriptor() {
  protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::file_level_enum_descriptors[2];
}
bool UserDictionaryCommand_CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserDictionaryCommand_CommandType UserDictionaryCommand::NO_OPERATION;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CLEAR_STORAGE;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CREATE_SESSION;
const UserDictionaryCommand_CommandType UserDictionaryCommand::DELETE_SESSION;
const UserDictionaryCommand_CommandType UserDictionaryCommand::SET_DEFAULT_DICTIONARY_NAME;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CHECK_UNDOABILITY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::UNDO;
const UserDictionaryCommand_CommandType UserDictionaryCommand::LOAD;
const UserDictionaryCommand_CommandType UserDictionaryCommand::SAVE;
const UserDictionaryCommand_CommandType UserDictionaryCommand::GET_USER_DICTIONARY_NAME_LIST;
const UserDictionaryCommand_CommandType UserDictionaryCommand::GET_ENTRY_SIZE;
const UserDictionaryCommand_CommandType UserDictionaryCommand::OBSOLETE_GET_ENTRY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CHECK_NEW_DICTIONARY_AVAILABILITY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CREATE_DICTIONARY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::DELETE_DICTIONARY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::RENAME_DICTIONARY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CHECK_NEW_ENTRY_AVAILABILITY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::ADD_ENTRY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::EDIT_ENTRY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::DELETE_ENTRY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::IMPORT_DATA;
const UserDictionaryCommand_CommandType UserDictionaryCommand::GET_STORAGE;
const UserDictionaryCommand_CommandType UserDictionaryCommand::GET_ENTRIES;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CommandType_MIN;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CommandType_MAX;
const int UserDictionaryCommand::CommandType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UserDictionaryCommandStatus_Status_descriptor() {
  protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::file_level_enum_descriptors[3];
}
bool UserDictionaryCommandStatus_Status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::USER_DICTIONARY_COMMAND_SUCCESS;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::UNKNOWN_ERROR;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::UNKNOWN_COMMAND;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::INVALID_ARGUMENT;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::UNKNOWN_SESSION_ID;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::FILE_NOT_FOUND;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::INVALID_FILE_FORMAT;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::FILE_SIZE_LIMIT_EXCEEDED;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_SIZE_LIMIT_EXCEEDED;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::ENTRY_SIZE_LIMIT_EXCEEDED;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::UNKNOWN_DICTIONARY_ID;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::ENTRY_INDEX_OUT_OF_RANGE;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_NAME_EMPTY;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_NAME_TOO_LONG;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_NAME_CONTAINS_INVALID_CHARACTER;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_NAME_DUPLICATED;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::READING_EMPTY;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::READING_TOO_LONG;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::READING_CONTAINS_INVALID_CHARACTER;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::WORD_EMPTY;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::WORD_TOO_LONG;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::WORD_CONTAINS_INVALID_CHARACTER;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::INVALID_POS_TYPE;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::COMMENT_TOO_LONG;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::COMMENT_CONTAINS_INVALID_CHARACTER;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::IMPORT_TOO_MANY_WORDS;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::IMPORT_INVALID_ENTRIES;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::NO_UNDO_HISTORY;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::Status_MIN;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::Status_MAX;
const int UserDictionaryCommandStatus::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void UserDictionary_Entry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDictionary_Entry::kKeyFieldNumber;
const int UserDictionary_Entry::kValueFieldNumber;
const int UserDictionary_Entry::kCommentFieldNumber;
const int UserDictionary_Entry::kPosFieldNumber;
const int UserDictionary_Entry::kRemovedFieldNumber;
const int UserDictionary_Entry::kAutoRegisteredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDictionary_Entry::UserDictionary_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::scc_info_UserDictionary_Entry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.user_dictionary.UserDictionary.Entry)
}
UserDictionary_Entry::UserDictionary_Entry(const UserDictionary_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_comment()) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  ::memcpy(&removed_, &from.removed_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&removed_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:mozc.user_dictionary.UserDictionary.Entry)
}

void UserDictionary_Entry::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&removed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_registered_) -
      reinterpret_cast<char*>(&removed_)) + sizeof(auto_registered_));
  pos_ = 1;
}

UserDictionary_Entry::~UserDictionary_Entry() {
  // @@protoc_insertion_point(destructor:mozc.user_dictionary.UserDictionary.Entry)
  SharedDtor();
}

void UserDictionary_Entry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserDictionary_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserDictionary_Entry::descriptor() {
  ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserDictionary_Entry& UserDictionary_Entry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::scc_info_UserDictionary_Entry.base);
  return *internal_default_instance();
}


void UserDictionary_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_dictionary.UserDictionary.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      comment_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ::memset(&removed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_registered_) -
      reinterpret_cast<char*>(&removed_)) + sizeof(auto_registered_));
  pos_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserDictionary_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.user_dictionary.UserDictionary.Entry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1 [default = ""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.user_dictionary.UserDictionary.Entry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.user_dictionary.UserDictionary.Entry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string comment = 4 [default = ""];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.user_dictionary.UserDictionary.Entry.comment");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::user_dictionary::UserDictionary_PosType_IsValid(value)) {
            set_pos(static_cast< ::mozc::user_dictionary::UserDictionary_PosType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool removed = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_removed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool auto_registered = 11 [default = false];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_auto_registered();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_registered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.user_dictionary.UserDictionary.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.user_dictionary.UserDictionary.Entry)
  return false;
#undef DO_
}

void UserDictionary_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.user_dictionary.UserDictionary.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.Entry.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.Entry.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional string comment = 4 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.Entry.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->comment(), output);
  }

  // optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->pos(), output);
  }

  // optional bool removed = 10 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->removed(), output);
  }

  // optional bool auto_registered = 11 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->auto_registered(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.user_dictionary.UserDictionary.Entry)
}

::google::protobuf::uint8* UserDictionary_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_dictionary.UserDictionary.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.Entry.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.Entry.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional string comment = 4 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.Entry.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->comment(), target);
  }

  // optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->pos(), target);
  }

  // optional bool removed = 10 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->removed(), target);
  }

  // optional bool auto_registered = 11 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->auto_registered(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_dictionary.UserDictionary.Entry)
  return target;
}

size_t UserDictionary_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_dictionary.UserDictionary.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string key = 1 [default = ""];
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2 [default = ""];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string comment = 4 [default = ""];
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional bool removed = 10 [default = false];
    if (has_removed()) {
      total_size += 1 + 1;
    }

    // optional bool auto_registered = 11 [default = false];
    if (has_auto_registered()) {
      total_size += 1 + 1;
    }

    // optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDictionary_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_dictionary.UserDictionary.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDictionary_Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDictionary_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_dictionary.UserDictionary.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_dictionary.UserDictionary.Entry)
    MergeFrom(*source);
  }
}

void UserDictionary_Entry::MergeFrom(const UserDictionary_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_dictionary.UserDictionary.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_comment();
      comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
    }
    if (cached_has_bits & 0x00000008u) {
      removed_ = from.removed_;
    }
    if (cached_has_bits & 0x00000010u) {
      auto_registered_ = from.auto_registered_;
    }
    if (cached_has_bits & 0x00000020u) {
      pos_ = from.pos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDictionary_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_dictionary.UserDictionary.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionary_Entry::CopyFrom(const UserDictionary_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_dictionary.UserDictionary.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionary_Entry::IsInitialized() const {
  return true;
}

void UserDictionary_Entry::Swap(UserDictionary_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserDictionary_Entry::InternalSwap(UserDictionary_Entry* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(removed_, other->removed_);
  swap(auto_registered_, other->auto_registered_);
  swap(pos_, other->pos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserDictionary_Entry::GetMetadata() const {
  protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserDictionary::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDictionary::kIdFieldNumber;
const int UserDictionary::kEnabledFieldNumber;
const int UserDictionary::kNameFieldNumber;
const int UserDictionary::kEntriesFieldNumber;
const int UserDictionary::kRemovedFieldNumber;
const int UserDictionary::kSyncableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDictionary::UserDictionary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::scc_info_UserDictionary.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.user_dictionary.UserDictionary)
}
UserDictionary::UserDictionary(const UserDictionary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&id_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:mozc.user_dictionary.UserDictionary)
}

void UserDictionary::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&syncable_) -
      reinterpret_cast<char*>(&id_)) + sizeof(syncable_));
  enabled_ = true;
}

UserDictionary::~UserDictionary() {
  // @@protoc_insertion_point(destructor:mozc.user_dictionary.UserDictionary)
  SharedDtor();
}

void UserDictionary::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserDictionary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserDictionary::descriptor() {
  ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserDictionary& UserDictionary::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::scc_info_UserDictionary.base);
  return *internal_default_instance();
}


void UserDictionary::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_dictionary.UserDictionary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&syncable_) -
        reinterpret_cast<char*>(&id_)) + sizeof(syncable_));
    enabled_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserDictionary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.user_dictionary.UserDictionary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enabled = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3 [default = ""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.user_dictionary.UserDictionary.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool removed = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_removed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool syncable = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_syncable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &syncable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.user_dictionary.UserDictionary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.user_dictionary.UserDictionary)
  return false;
#undef DO_
}

void UserDictionary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.user_dictionary.UserDictionary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional bool enabled = 2 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  // optional string name = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->entries(static_cast<int>(i)),
      output);
  }

  // optional bool removed = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->removed(), output);
  }

  // optional bool syncable = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->syncable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.user_dictionary.UserDictionary)
}

::google::protobuf::uint8* UserDictionary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_dictionary.UserDictionary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional bool enabled = 2 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  // optional string name = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->entries(static_cast<int>(i)), deterministic, target);
  }

  // optional bool removed = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->removed(), target);
  }

  // optional bool syncable = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->syncable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_dictionary.UserDictionary)
  return target;
}

size_t UserDictionary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_dictionary.UserDictionary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 3 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional bool removed = 5 [default = false];
    if (has_removed()) {
      total_size += 1 + 1;
    }

    // optional bool syncable = 6 [default = false];
    if (has_syncable()) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 2 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDictionary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_dictionary.UserDictionary)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDictionary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDictionary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_dictionary.UserDictionary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_dictionary.UserDictionary)
    MergeFrom(*source);
  }
}

void UserDictionary::MergeFrom(const UserDictionary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_dictionary.UserDictionary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      removed_ = from.removed_;
    }
    if (cached_has_bits & 0x00000008u) {
      syncable_ = from.syncable_;
    }
    if (cached_has_bits & 0x00000010u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDictionary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_dictionary.UserDictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionary::CopyFrom(const UserDictionary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_dictionary.UserDictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionary::IsInitialized() const {
  return true;
}

void UserDictionary::Swap(UserDictionary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserDictionary::InternalSwap(UserDictionary* other) {
  using std::swap;
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(removed_, other->removed_);
  swap(syncable_, other->syncable_);
  swap(enabled_, other->enabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserDictionary::GetMetadata() const {
  protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserDictionaryStorage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDictionaryStorage::kVersionFieldNumber;
const int UserDictionaryStorage::kDictionariesFieldNumber;
const int UserDictionaryStorage::kStorageTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDictionaryStorage::UserDictionaryStorage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::scc_info_UserDictionaryStorage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.user_dictionary.UserDictionaryStorage)
}
UserDictionaryStorage::UserDictionaryStorage(const UserDictionaryStorage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      dictionaries_(from.dictionaries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&storage_type_) -
    reinterpret_cast<char*>(&version_)) + sizeof(storage_type_));
  // @@protoc_insertion_point(copy_constructor:mozc.user_dictionary.UserDictionaryStorage)
}

void UserDictionaryStorage::SharedCtor() {
  version_ = 0;
  storage_type_ = 1;
}

UserDictionaryStorage::~UserDictionaryStorage() {
  // @@protoc_insertion_point(destructor:mozc.user_dictionary.UserDictionaryStorage)
  SharedDtor();
}

void UserDictionaryStorage::SharedDtor() {
}

void UserDictionaryStorage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserDictionaryStorage::descriptor() {
  ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserDictionaryStorage& UserDictionaryStorage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::scc_info_UserDictionaryStorage.base);
  return *internal_default_instance();
}


void UserDictionaryStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_dictionary.UserDictionaryStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dictionaries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    version_ = 0;
    storage_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserDictionaryStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.user_dictionary.UserDictionaryStorage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dictionaries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::user_dictionary::UserDictionaryStorage_StorageType_IsValid(value)) {
            set_storage_type(static_cast< ::mozc::user_dictionary::UserDictionaryStorage_StorageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.user_dictionary.UserDictionaryStorage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.user_dictionary.UserDictionaryStorage)
  return false;
#undef DO_
}

void UserDictionaryStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.user_dictionary.UserDictionaryStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dictionaries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->dictionaries(static_cast<int>(i)),
      output);
  }

  // optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->storage_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.user_dictionary.UserDictionaryStorage)
}

::google::protobuf::uint8* UserDictionaryStorage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_dictionary.UserDictionaryStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dictionaries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->dictionaries(static_cast<int>(i)), deterministic, target);
  }

  // optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->storage_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_dictionary.UserDictionaryStorage)
  return target;
}

size_t UserDictionaryStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_dictionary.UserDictionaryStorage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dictionaries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dictionaries(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
    if (has_storage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->storage_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDictionaryStorage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_dictionary.UserDictionaryStorage)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDictionaryStorage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDictionaryStorage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_dictionary.UserDictionaryStorage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_dictionary.UserDictionaryStorage)
    MergeFrom(*source);
  }
}

void UserDictionaryStorage::MergeFrom(const UserDictionaryStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_dictionary.UserDictionaryStorage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dictionaries_.MergeFrom(from.dictionaries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      storage_type_ = from.storage_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDictionaryStorage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_dictionary.UserDictionaryStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionaryStorage::CopyFrom(const UserDictionaryStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_dictionary.UserDictionaryStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionaryStorage::IsInitialized() const {
  return true;
}

void UserDictionaryStorage::Swap(UserDictionaryStorage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserDictionaryStorage::InternalSwap(UserDictionaryStorage* other) {
  using std::swap;
  CastToBase(&dictionaries_)->InternalSwap(CastToBase(&other->dictionaries_));
  swap(version_, other->version_);
  swap(storage_type_, other->storage_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserDictionaryStorage::GetMetadata() const {
  protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserDictionaryCommand::InitAsDefaultInstance() {
  ::mozc::user_dictionary::_UserDictionaryCommand_default_instance_._instance.get_mutable()->entry_ = const_cast< ::mozc::user_dictionary::UserDictionary_Entry*>(
      ::mozc::user_dictionary::UserDictionary_Entry::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDictionaryCommand::kTypeFieldNumber;
const int UserDictionaryCommand::kSessionIdFieldNumber;
const int UserDictionaryCommand::kDictionaryIdFieldNumber;
const int UserDictionaryCommand::kDictionaryNameFieldNumber;
const int UserDictionaryCommand::kEntryIndexFieldNumber;
const int UserDictionaryCommand::kEntryFieldNumber;
const int UserDictionaryCommand::kDataFieldNumber;
const int UserDictionaryCommand::kEnsureNonEmptyStorageFieldNumber;
const int UserDictionaryCommand::kIgnoreInvalidEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDictionaryCommand::UserDictionaryCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::scc_info_UserDictionaryCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.user_dictionary.UserDictionaryCommand)
}
UserDictionaryCommand::UserDictionaryCommand(const UserDictionaryCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      entry_index_(from.entry_index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dictionary_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dictionary_name()) {
    dictionary_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dictionary_name_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_entry()) {
    entry_ = new ::mozc::user_dictionary::UserDictionary_Entry(*from.entry_);
  } else {
    entry_ = NULL;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_invalid_entries_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(ignore_invalid_entries_));
  // @@protoc_insertion_point(copy_constructor:mozc.user_dictionary.UserDictionaryCommand)
}

void UserDictionaryCommand::SharedCtor() {
  dictionary_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&entry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_invalid_entries_) -
      reinterpret_cast<char*>(&entry_)) + sizeof(ignore_invalid_entries_));
}

UserDictionaryCommand::~UserDictionaryCommand() {
  // @@protoc_insertion_point(destructor:mozc.user_dictionary.UserDictionaryCommand)
  SharedDtor();
}

void UserDictionaryCommand::SharedDtor() {
  dictionary_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete entry_;
}

void UserDictionaryCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserDictionaryCommand::descriptor() {
  ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserDictionaryCommand& UserDictionaryCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::scc_info_UserDictionaryCommand.base);
  return *internal_default_instance();
}


void UserDictionaryCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_dictionary.UserDictionaryCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_index_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      dictionary_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(entry_ != NULL);
      entry_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ignore_invalid_entries_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(ignore_invalid_entries_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserDictionaryCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.user_dictionary.UserDictionaryCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::user_dictionary::UserDictionaryCommand_CommandType_IsValid(value)) {
            set_type(static_cast< ::mozc::user_dictionary::UserDictionaryCommand_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dictionary_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_dictionary_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dictionary_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dictionary_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dictionary_name().data(), static_cast<int>(this->dictionary_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.user_dictionary.UserDictionaryCommand.dictionary_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 entry_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40u, input, this->mutable_entry_index())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_entry_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.user_dictionary.UserDictionaryCommand.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ensure_non_empty_storage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_ensure_non_empty_storage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ensure_non_empty_storage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ignore_invalid_entries = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_ignore_invalid_entries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_invalid_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.user_dictionary.UserDictionaryCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.user_dictionary.UserDictionaryCommand)
  return false;
#undef DO_
}

void UserDictionaryCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.user_dictionary.UserDictionaryCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 session_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->session_id(), output);
  }

  // optional uint64 dictionary_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dictionary_id(), output);
  }

  // optional string dictionary_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), static_cast<int>(this->dictionary_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionaryCommand.dictionary_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dictionary_name(), output);
  }

  // repeated int32 entry_index = 5;
  for (int i = 0, n = this->entry_index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->entry_index(i), output);
  }

  // optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_entry(), output);
  }

  // optional string data = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionaryCommand.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->data(), output);
  }

  // optional bool ensure_non_empty_storage = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ensure_non_empty_storage(), output);
  }

  // optional bool ignore_invalid_entries = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ignore_invalid_entries(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.user_dictionary.UserDictionaryCommand)
}

::google::protobuf::uint8* UserDictionaryCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_dictionary.UserDictionaryCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 session_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->session_id(), target);
  }

  // optional uint64 dictionary_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dictionary_id(), target);
  }

  // optional string dictionary_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), static_cast<int>(this->dictionary_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionaryCommand.dictionary_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dictionary_name(), target);
  }

  // repeated int32 entry_index = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(5, this->entry_index_, target);

  // optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_entry(), deterministic, target);
  }

  // optional string data = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionaryCommand.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->data(), target);
  }

  // optional bool ensure_non_empty_storage = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ensure_non_empty_storage(), target);
  }

  // optional bool ignore_invalid_entries = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ignore_invalid_entries(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_dictionary.UserDictionaryCommand)
  return target;
}

size_t UserDictionaryCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_dictionary.UserDictionaryCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated int32 entry_index = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->entry_index_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->entry_index_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string dictionary_name = 4;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

    // optional string data = 7;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *entry_);
    }

    // optional uint64 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session_id());
    }

    // optional uint64 dictionary_id = 3;
    if (has_dictionary_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dictionary_id());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional bool ensure_non_empty_storage = 8;
    if (has_ensure_non_empty_storage()) {
      total_size += 1 + 1;
    }

    // optional bool ignore_invalid_entries = 9;
    if (has_ignore_invalid_entries()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDictionaryCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_dictionary.UserDictionaryCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDictionaryCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDictionaryCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_dictionary.UserDictionaryCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_dictionary.UserDictionaryCommand)
    MergeFrom(*source);
  }
}

void UserDictionaryCommand::MergeFrom(const UserDictionaryCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_dictionary.UserDictionaryCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_index_.MergeFrom(from.entry_index_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_dictionary_name();
      dictionary_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dictionary_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_entry()->::mozc::user_dictionary::UserDictionary_Entry::MergeFrom(from.entry());
    }
    if (cached_has_bits & 0x00000008u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      dictionary_id_ = from.dictionary_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      ensure_non_empty_storage_ = from.ensure_non_empty_storage_;
    }
    if (cached_has_bits & 0x00000080u) {
      ignore_invalid_entries_ = from.ignore_invalid_entries_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDictionaryCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_dictionary.UserDictionaryCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionaryCommand::CopyFrom(const UserDictionaryCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_dictionary.UserDictionaryCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionaryCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  return true;
}

void UserDictionaryCommand::Swap(UserDictionaryCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserDictionaryCommand::InternalSwap(UserDictionaryCommand* other) {
  using std::swap;
  entry_index_.InternalSwap(&other->entry_index_);
  dictionary_name_.Swap(&other->dictionary_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(entry_, other->entry_);
  swap(session_id_, other->session_id_);
  swap(dictionary_id_, other->dictionary_id_);
  swap(type_, other->type_);
  swap(ensure_non_empty_storage_, other->ensure_non_empty_storage_);
  swap(ignore_invalid_entries_, other->ignore_invalid_entries_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserDictionaryCommand::GetMetadata() const {
  protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserDictionaryCommandStatus::InitAsDefaultInstance() {
  ::mozc::user_dictionary::_UserDictionaryCommandStatus_default_instance_._instance.get_mutable()->storage_ = const_cast< ::mozc::user_dictionary::UserDictionaryStorage*>(
      ::mozc::user_dictionary::UserDictionaryStorage::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDictionaryCommandStatus::kStatusFieldNumber;
const int UserDictionaryCommandStatus::kSessionIdFieldNumber;
const int UserDictionaryCommandStatus::kStorageFieldNumber;
const int UserDictionaryCommandStatus::kDictionaryIdFieldNumber;
const int UserDictionaryCommandStatus::kEntrySizeFieldNumber;
const int UserDictionaryCommandStatus::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDictionaryCommandStatus::UserDictionaryCommandStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::scc_info_UserDictionaryCommandStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.user_dictionary.UserDictionaryCommandStatus)
}
UserDictionaryCommandStatus::UserDictionaryCommandStatus(const UserDictionaryCommandStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_storage()) {
    storage_ = new ::mozc::user_dictionary::UserDictionaryStorage(*from.storage_);
  } else {
    storage_ = NULL;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:mozc.user_dictionary.UserDictionaryCommandStatus)
}

void UserDictionaryCommandStatus::SharedCtor() {
  ::memset(&storage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entry_size_) -
      reinterpret_cast<char*>(&storage_)) + sizeof(entry_size_));
  status_ = 1;
}

UserDictionaryCommandStatus::~UserDictionaryCommandStatus() {
  // @@protoc_insertion_point(destructor:mozc.user_dictionary.UserDictionaryCommandStatus)
  SharedDtor();
}

void UserDictionaryCommandStatus::SharedDtor() {
  if (this != internal_default_instance()) delete storage_;
}

void UserDictionaryCommandStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserDictionaryCommandStatus::descriptor() {
  ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserDictionaryCommandStatus& UserDictionaryCommandStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::scc_info_UserDictionaryCommandStatus.base);
  return *internal_default_instance();
}


void UserDictionaryCommandStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(storage_ != NULL);
    storage_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&entry_size_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(entry_size_));
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserDictionaryCommandStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::user_dictionary::UserDictionaryCommandStatus_Status_IsValid(value)) {
            set_status(static_cast< ::mozc::user_dictionary::UserDictionaryCommandStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_storage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dictionary_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_dictionary_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dictionary_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 entry_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_entry_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entry_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.user_dictionary.UserDictionaryCommandStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.user_dictionary.UserDictionaryCommandStatus)
  return false;
#undef DO_
}

void UserDictionaryCommandStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional uint64 session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->session_id(), output);
  }

  // optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_storage(), output);
  }

  // optional uint64 dictionary_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->dictionary_id(), output);
  }

  // optional uint32 entry_size = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->entry_size(), output);
  }

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.user_dictionary.UserDictionaryCommandStatus)
}

::google::protobuf::uint8* UserDictionaryCommandStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional uint64 session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->session_id(), target);
  }

  // optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_storage(), deterministic, target);
  }

  // optional uint64 dictionary_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->dictionary_id(), target);
  }

  // optional uint32 entry_size = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->entry_size(), target);
  }

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->entries(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_dictionary.UserDictionaryCommandStatus)
  return target;
}

size_t UserDictionaryCommandStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }
  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional uint64 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session_id());
    }

    // optional uint64 dictionary_id = 5;
    if (has_dictionary_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dictionary_id());
    }

    // optional uint32 entry_size = 6;
    if (has_entry_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entry_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDictionaryCommandStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDictionaryCommandStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDictionaryCommandStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_dictionary.UserDictionaryCommandStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_dictionary.UserDictionaryCommandStatus)
    MergeFrom(*source);
  }
}

void UserDictionaryCommandStatus::MergeFrom(const UserDictionaryCommandStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_storage()->::mozc::user_dictionary::UserDictionaryStorage::MergeFrom(from.storage());
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      dictionary_id_ = from.dictionary_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      entry_size_ = from.entry_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDictionaryCommandStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionaryCommandStatus::CopyFrom(const UserDictionaryCommandStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionaryCommandStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  return true;
}

void UserDictionaryCommandStatus::Swap(UserDictionaryCommandStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserDictionaryCommandStatus::InternalSwap(UserDictionaryCommandStatus* other) {
  using std::swap;
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  swap(storage_, other->storage_);
  swap(session_id_, other->session_id_);
  swap(dictionary_id_, other->dictionary_id_);
  swap(entry_size_, other->entry_size_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserDictionaryCommandStatus::GetMetadata() const {
  protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fuser_5fdictionary_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace user_dictionary
}  // namespace mozc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::user_dictionary::UserDictionary_Entry* Arena::CreateMaybeMessage< ::mozc::user_dictionary::UserDictionary_Entry >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::user_dictionary::UserDictionary_Entry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::user_dictionary::UserDictionary* Arena::CreateMaybeMessage< ::mozc::user_dictionary::UserDictionary >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::user_dictionary::UserDictionary >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::user_dictionary::UserDictionaryStorage* Arena::CreateMaybeMessage< ::mozc::user_dictionary::UserDictionaryStorage >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::user_dictionary::UserDictionaryStorage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::user_dictionary::UserDictionaryCommand* Arena::CreateMaybeMessage< ::mozc::user_dictionary::UserDictionaryCommand >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::user_dictionary::UserDictionaryCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::user_dictionary::UserDictionaryCommandStatus* Arena::CreateMaybeMessage< ::mozc::user_dictionary::UserDictionaryCommandStatus >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::user_dictionary::UserDictionaryCommandStatus >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
