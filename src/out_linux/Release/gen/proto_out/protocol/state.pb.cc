// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/state.proto

#include "protocol/state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protocol_2fcandidates_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcandidates_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Candidates;
}  // namespace protobuf_protocol_2fcandidates_2eproto
namespace protobuf_protocol_2fcommands_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Request;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Preedit;
}  // namespace protobuf_protocol_2fcommands_2eproto
namespace mozc {
namespace protocol {
class SessionStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SessionState>
      _instance;
} _SessionState_default_instance_;
}  // namespace protocol
}  // namespace mozc
namespace protobuf_protocol_2fstate_2eproto {
static void InitDefaultsSessionState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::protocol::_SessionState_default_instance_;
    new (ptr) ::mozc::protocol::SessionState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::protocol::SessionState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_SessionState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsSessionState}, {
      &protobuf_protocol_2fcommands_2eproto::scc_info_Preedit.base,
      &protobuf_protocol_2fcandidates_2eproto::scc_info_Candidates.base,
      &protobuf_protocol_2fcommands_2eproto::scc_info_Result.base,
      &protobuf_protocol_2fcommands_2eproto::scc_info_Request.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SessionState.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::protocol::SessionState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::protocol::SessionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::protocol::SessionState, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::protocol::SessionState, created_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::protocol::SessionState, committed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::protocol::SessionState, start_preedit_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::protocol::SessionState, start_conversion_window_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::protocol::SessionState, start_prediction_window_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::protocol::SessionState, start_suggestion_window_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::protocol::SessionState, start_infolist_window_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::protocol::SessionState, preedit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::protocol::SessionState, candidates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::protocol::SessionState, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::protocol::SessionState, request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::protocol::SessionState, input_field_type_),
  4,
  5,
  11,
  6,
  7,
  8,
  9,
  10,
  0,
  1,
  2,
  3,
  12,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::mozc::protocol::SessionState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::protocol::_SessionState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protocol/state.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024protocol/state.proto\022\rmozc.protocol\032\031p"
      "rotocol/candidates.proto\032\027protocol/comma"
      "nds.proto\"\367\003\n\014SessionState\022\n\n\002id\030\001 \002(\004\022\024"
      "\n\014created_time\030\002 \001(\004\022\030\n\tcommitted\030\003 \001(\010:"
      "\005false\022\032\n\022start_preedit_time\030\n \001(\004\022$\n\034st"
      "art_conversion_window_time\030\013 \001(\004\022$\n\034star"
      "t_prediction_window_time\030\014 \001(\004\022$\n\034start_"
      "suggestion_window_time\030\r \001(\004\022\"\n\032start_in"
      "folist_window_time\030\016 \001(\004\022\'\n\007preedit\030\024 \001("
      "\0132\026.mozc.commands.Preedit\022-\n\ncandidates\030"
      "\025 \001(\0132\031.mozc.commands.Candidates\022%\n\006resu"
      "lt\030\027 \001(\0132\025.mozc.commands.Result\022\'\n\007reque"
      "st\030\030 \001(\0132\026.mozc.commands.Request\022\?\n\020inpu"
      "t_field_type\030\031 \001(\0162%.mozc.commands.Conte"
      "xt.InputFieldTypeJ\004\010\004\020\005J\004\010\005\020\006J\004\010\026\020\027"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 595);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/state.proto", &protobuf_RegisterTypes);
  ::protobuf_protocol_2fcandidates_2eproto::AddDescriptors();
  ::protobuf_protocol_2fcommands_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protocol_2fstate_2eproto
namespace mozc {
namespace protocol {

// ===================================================================

void SessionState::InitAsDefaultInstance() {
  ::mozc::protocol::_SessionState_default_instance_._instance.get_mutable()->preedit_ = const_cast< ::mozc::commands::Preedit*>(
      ::mozc::commands::Preedit::internal_default_instance());
  ::mozc::protocol::_SessionState_default_instance_._instance.get_mutable()->candidates_ = const_cast< ::mozc::commands::Candidates*>(
      ::mozc::commands::Candidates::internal_default_instance());
  ::mozc::protocol::_SessionState_default_instance_._instance.get_mutable()->result_ = const_cast< ::mozc::commands::Result*>(
      ::mozc::commands::Result::internal_default_instance());
  ::mozc::protocol::_SessionState_default_instance_._instance.get_mutable()->request_ = const_cast< ::mozc::commands::Request*>(
      ::mozc::commands::Request::internal_default_instance());
}
void SessionState::clear_preedit() {
  if (preedit_ != NULL) preedit_->Clear();
  clear_has_preedit();
}
void SessionState::clear_candidates() {
  if (candidates_ != NULL) candidates_->Clear();
  clear_has_candidates();
}
void SessionState::clear_result() {
  if (result_ != NULL) result_->Clear();
  clear_has_result();
}
void SessionState::clear_request() {
  if (request_ != NULL) request_->Clear();
  clear_has_request();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionState::kIdFieldNumber;
const int SessionState::kCreatedTimeFieldNumber;
const int SessionState::kCommittedFieldNumber;
const int SessionState::kStartPreeditTimeFieldNumber;
const int SessionState::kStartConversionWindowTimeFieldNumber;
const int SessionState::kStartPredictionWindowTimeFieldNumber;
const int SessionState::kStartSuggestionWindowTimeFieldNumber;
const int SessionState::kStartInfolistWindowTimeFieldNumber;
const int SessionState::kPreeditFieldNumber;
const int SessionState::kCandidatesFieldNumber;
const int SessionState::kResultFieldNumber;
const int SessionState::kRequestFieldNumber;
const int SessionState::kInputFieldTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionState::SessionState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fstate_2eproto::scc_info_SessionState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.protocol.SessionState)
}
SessionState::SessionState(const SessionState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_preedit()) {
    preedit_ = new ::mozc::commands::Preedit(*from.preedit_);
  } else {
    preedit_ = NULL;
  }
  if (from.has_candidates()) {
    candidates_ = new ::mozc::commands::Candidates(*from.candidates_);
  } else {
    candidates_ = NULL;
  }
  if (from.has_result()) {
    result_ = new ::mozc::commands::Result(*from.result_);
  } else {
    result_ = NULL;
  }
  if (from.has_request()) {
    request_ = new ::mozc::commands::Request(*from.request_);
  } else {
    request_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_field_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(input_field_type_));
  // @@protoc_insertion_point(copy_constructor:mozc.protocol.SessionState)
}

void SessionState::SharedCtor() {
  ::memset(&preedit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&committed_) -
      reinterpret_cast<char*>(&preedit_)) + sizeof(committed_));
  input_field_type_ = 1;
}

SessionState::~SessionState() {
  // @@protoc_insertion_point(destructor:mozc.protocol.SessionState)
  SharedDtor();
}

void SessionState::SharedDtor() {
  if (this != internal_default_instance()) delete preedit_;
  if (this != internal_default_instance()) delete candidates_;
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete request_;
}

void SessionState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SessionState::descriptor() {
  ::protobuf_protocol_2fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SessionState& SessionState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fstate_2eproto::scc_info_SessionState.base);
  return *internal_default_instance();
}


void SessionState::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.protocol.SessionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(preedit_ != NULL);
      preedit_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(candidates_ != NULL);
      candidates_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(result_ != NULL);
      result_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(request_ != NULL);
      request_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_conversion_window_time_) -
        reinterpret_cast<char*>(&id_)) + sizeof(start_conversion_window_time_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&start_prediction_window_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&committed_) -
        reinterpret_cast<char*>(&start_prediction_window_time_)) + sizeof(committed_));
    input_field_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.protocol.SessionState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 created_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_created_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &created_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool committed = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_committed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &committed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 start_preedit_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_start_preedit_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_preedit_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 start_conversion_window_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_start_conversion_window_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_conversion_window_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 start_prediction_window_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_start_prediction_window_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_prediction_window_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 start_suggestion_window_time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_start_suggestion_window_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_suggestion_window_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 start_infolist_window_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_start_infolist_window_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_infolist_window_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Preedit preedit = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_preedit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Candidates candidates = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_candidates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Result result = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Request request = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Context.InputFieldType input_field_type = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Context_InputFieldType_IsValid(value)) {
            set_input_field_type(static_cast< ::mozc::commands::Context_InputFieldType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                25, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.protocol.SessionState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.protocol.SessionState)
  return false;
#undef DO_
}

void SessionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.protocol.SessionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 created_time = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->created_time(), output);
  }

  // optional bool committed = 3 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->committed(), output);
  }

  // optional uint64 start_preedit_time = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->start_preedit_time(), output);
  }

  // optional uint64 start_conversion_window_time = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->start_conversion_window_time(), output);
  }

  // optional uint64 start_prediction_window_time = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->start_prediction_window_time(), output);
  }

  // optional uint64 start_suggestion_window_time = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->start_suggestion_window_time(), output);
  }

  // optional uint64 start_infolist_window_time = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->start_infolist_window_time(), output);
  }

  // optional .mozc.commands.Preedit preedit = 20;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_preedit(), output);
  }

  // optional .mozc.commands.Candidates candidates = 21;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_candidates(), output);
  }

  // optional .mozc.commands.Result result = 23;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->_internal_result(), output);
  }

  // optional .mozc.commands.Request request = 24;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->_internal_request(), output);
  }

  // optional .mozc.commands.Context.InputFieldType input_field_type = 25;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->input_field_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.protocol.SessionState)
}

::google::protobuf::uint8* SessionState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.protocol.SessionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 created_time = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->created_time(), target);
  }

  // optional bool committed = 3 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->committed(), target);
  }

  // optional uint64 start_preedit_time = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->start_preedit_time(), target);
  }

  // optional uint64 start_conversion_window_time = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->start_conversion_window_time(), target);
  }

  // optional uint64 start_prediction_window_time = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->start_prediction_window_time(), target);
  }

  // optional uint64 start_suggestion_window_time = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->start_suggestion_window_time(), target);
  }

  // optional uint64 start_infolist_window_time = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->start_infolist_window_time(), target);
  }

  // optional .mozc.commands.Preedit preedit = 20;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_preedit(), deterministic, target);
  }

  // optional .mozc.commands.Candidates candidates = 21;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_candidates(), deterministic, target);
  }

  // optional .mozc.commands.Result result = 23;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->_internal_result(), deterministic, target);
  }

  // optional .mozc.commands.Request request = 24;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->_internal_request(), deterministic, target);
  }

  // optional .mozc.commands.Context.InputFieldType input_field_type = 25;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->input_field_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.protocol.SessionState)
  return target;
}

size_t SessionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.protocol.SessionState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .mozc.commands.Preedit preedit = 20;
    if (has_preedit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *preedit_);
    }

    // optional .mozc.commands.Candidates candidates = 21;
    if (has_candidates()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *candidates_);
    }

    // optional .mozc.commands.Result result = 23;
    if (has_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *result_);
    }

    // optional .mozc.commands.Request request = 24;
    if (has_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_);
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional uint64 created_time = 2;
    if (has_created_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->created_time());
    }

    // optional uint64 start_preedit_time = 10;
    if (has_start_preedit_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_preedit_time());
    }

    // optional uint64 start_conversion_window_time = 11;
    if (has_start_conversion_window_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_conversion_window_time());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint64 start_prediction_window_time = 12;
    if (has_start_prediction_window_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_prediction_window_time());
    }

    // optional uint64 start_suggestion_window_time = 13;
    if (has_start_suggestion_window_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_suggestion_window_time());
    }

    // optional uint64 start_infolist_window_time = 14;
    if (has_start_infolist_window_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_infolist_window_time());
    }

    // optional bool committed = 3 [default = false];
    if (has_committed()) {
      total_size += 1 + 1;
    }

    // optional .mozc.commands.Context.InputFieldType input_field_type = 25;
    if (has_input_field_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_field_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.protocol.SessionState)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.protocol.SessionState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.protocol.SessionState)
    MergeFrom(*source);
  }
}

void SessionState::MergeFrom(const SessionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.protocol.SessionState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_preedit()->::mozc::commands::Preedit::MergeFrom(from.preedit());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_candidates()->::mozc::commands::Candidates::MergeFrom(from.candidates());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_result()->::mozc::commands::Result::MergeFrom(from.result());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_request()->::mozc::commands::Request::MergeFrom(from.request());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      created_time_ = from.created_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      start_preedit_time_ = from.start_preedit_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      start_conversion_window_time_ = from.start_conversion_window_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      start_prediction_window_time_ = from.start_prediction_window_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      start_suggestion_window_time_ = from.start_suggestion_window_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      start_infolist_window_time_ = from.start_infolist_window_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      committed_ = from.committed_;
    }
    if (cached_has_bits & 0x00001000u) {
      input_field_type_ = from.input_field_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SessionState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.protocol.SessionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionState::CopyFrom(const SessionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.protocol.SessionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (has_preedit()) {
    if (!this->preedit_->IsInitialized()) return false;
  }
  if (has_candidates()) {
    if (!this->candidates_->IsInitialized()) return false;
  }
  if (has_result()) {
    if (!this->result_->IsInitialized()) return false;
  }
  return true;
}

void SessionState::Swap(SessionState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionState::InternalSwap(SessionState* other) {
  using std::swap;
  swap(preedit_, other->preedit_);
  swap(candidates_, other->candidates_);
  swap(result_, other->result_);
  swap(request_, other->request_);
  swap(id_, other->id_);
  swap(created_time_, other->created_time_);
  swap(start_preedit_time_, other->start_preedit_time_);
  swap(start_conversion_window_time_, other->start_conversion_window_time_);
  swap(start_prediction_window_time_, other->start_prediction_window_time_);
  swap(start_suggestion_window_time_, other->start_suggestion_window_time_);
  swap(start_infolist_window_time_, other->start_infolist_window_time_);
  swap(committed_, other->committed_);
  swap(input_field_type_, other->input_field_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SessionState::GetMetadata() const {
  protobuf_protocol_2fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace mozc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::protocol::SessionState* Arena::CreateMaybeMessage< ::mozc::protocol::SessionState >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::protocol::SessionState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
