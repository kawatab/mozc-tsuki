// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/candidates.proto

#include "protocol/candidates.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protocol_2fcandidates_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcandidates_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Annotation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcandidates_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Footer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcandidates_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Information;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcandidates_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CandidateWord;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcandidates_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Candidates_Candidate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcandidates_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_InformationList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2fcandidates_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Candidates;
}  // namespace protobuf_protocol_2fcandidates_2eproto
namespace mozc {
namespace commands {
class AnnotationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Annotation>
      _instance;
} _Annotation_default_instance_;
class InformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Information>
      _instance;
} _Information_default_instance_;
class InformationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InformationList>
      _instance;
} _InformationList_default_instance_;
class FooterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Footer>
      _instance;
} _Footer_default_instance_;
class CandidateWordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CandidateWord>
      _instance;
} _CandidateWord_default_instance_;
class CandidateListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CandidateList>
      _instance;
} _CandidateList_default_instance_;
class Candidates_CandidateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Candidates_Candidate>
      _instance;
} _Candidates_Candidate_default_instance_;
class CandidatesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Candidates>
      _instance;
} _Candidates_default_instance_;
}  // namespace commands
}  // namespace mozc
namespace protobuf_protocol_2fcandidates_2eproto {
static void InitDefaultsAnnotation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Annotation_default_instance_;
    new (ptr) ::mozc::commands::Annotation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Annotation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Annotation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAnnotation}, {}};

static void InitDefaultsInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Information_default_instance_;
    new (ptr) ::mozc::commands::Information();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Information::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Information =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInformation}, {}};

static void InitDefaultsInformationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_InformationList_default_instance_;
    new (ptr) ::mozc::commands::InformationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::InformationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InformationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInformationList}, {
      &protobuf_protocol_2fcandidates_2eproto::scc_info_Information.base,}};

static void InitDefaultsFooter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Footer_default_instance_;
    new (ptr) ::mozc::commands::Footer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Footer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Footer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFooter}, {}};

static void InitDefaultsCandidateWord() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_CandidateWord_default_instance_;
    new (ptr) ::mozc::commands::CandidateWord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::CandidateWord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CandidateWord =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCandidateWord}, {
      &protobuf_protocol_2fcandidates_2eproto::scc_info_Annotation.base,}};

static void InitDefaultsCandidateList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_CandidateList_default_instance_;
    new (ptr) ::mozc::commands::CandidateList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::CandidateList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CandidateList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCandidateList}, {
      &protobuf_protocol_2fcandidates_2eproto::scc_info_CandidateWord.base,}};

static void InitDefaultsCandidates_Candidate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Candidates_Candidate_default_instance_;
    new (ptr) ::mozc::commands::Candidates_Candidate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Candidates_Candidate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Candidates_Candidate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCandidates_Candidate}, {
      &protobuf_protocol_2fcandidates_2eproto::scc_info_Annotation.base,}};

static void InitDefaultsCandidates() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Candidates_default_instance_;
    new (ptr) ::mozc::commands::Candidates();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Candidates::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Candidates =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCandidates}, {
      &protobuf_protocol_2fcandidates_2eproto::scc_info_Candidates_Candidate.base,
      &protobuf_protocol_2fcandidates_2eproto::scc_info_InformationList.base,
      &protobuf_protocol_2fcandidates_2eproto::scc_info_Footer.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Annotation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Information.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InformationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Footer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CandidateWord.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CandidateList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Candidates_Candidate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Candidates.base);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Annotation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Annotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Annotation, prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Annotation, suffix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Annotation, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Annotation, shortcut_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Annotation, deletable_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Information, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Information, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Information, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Information, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Information, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Information, candidate_id_),
  2,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::InformationList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::InformationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::InformationList, focused_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::InformationList, information_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::InformationList, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::InformationList, display_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::InformationList, delay_),
  0,
  ~0u,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Footer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Footer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Footer, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Footer, index_visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Footer, logo_visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Footer, sub_label_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::CandidateWord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::CandidateWord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::CandidateWord, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::CandidateWord, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::CandidateWord, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::CandidateWord, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::CandidateWord, annotation_),
  3,
  4,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::CandidateList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::CandidateList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::CandidateList, focused_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::CandidateList, candidates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::CandidateList, category_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates_Candidate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates_Candidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates_Candidate, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates_Candidate, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates_Candidate, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates_Candidate, annotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates_Candidate, information_id_),
  3,
  0,
  4,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates, focused_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates, candidate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates, subcandidates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates, usages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates, display_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates, footer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::commands::Candidates, page_size_),
  3,
  4,
  ~0u,
  5,
  0,
  1,
  6,
  7,
  2,
  8,
  9,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::mozc::commands::Annotation)},
  { 15, 24, sizeof(::mozc::commands::Information)},
  { 28, 38, sizeof(::mozc::commands::InformationList)},
  { 43, 52, sizeof(::mozc::commands::Footer)},
  { 56, 66, sizeof(::mozc::commands::CandidateWord)},
  { 71, 79, sizeof(::mozc::commands::CandidateList)},
  { 82, 92, sizeof(::mozc::commands::Candidates_Candidate)},
  { 97, 113, sizeof(::mozc::commands::Candidates)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Annotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Information_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_InformationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Footer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_CandidateWord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_CandidateList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Candidates_Candidate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::commands::_Candidates_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protocol/candidates.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031protocol/candidates.proto\022\rmozc.comman"
      "ds\"m\n\nAnnotation\022\016\n\006prefix\030\001 \001(\t\022\016\n\006suff"
      "ix\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\020\n\010shortcu"
      "t\030\004 \001(\t\022\030\n\tdeletable\030\005 \001(\010:\005false\"S\n\013Inf"
      "ormation\022\n\n\002id\030\001 \001(\005\022\r\n\005title\030\002 \001(\t\022\023\n\013d"
      "escription\030\003 \001(\t\022\024\n\014candidate_id\030\004 \003(\005\"\337"
      "\001\n\017InformationList\022\025\n\rfocused_index\030\001 \001("
      "\r\022/\n\013information\030\002 \003(\0132\032.mozc.commands.I"
      "nformation\0225\n\010category\030\003 \001(\0162\027.mozc.comm"
      "ands.Category:\nCONVERSION\0229\n\014display_typ"
      "e\030\004 \001(\0162\032.mozc.commands.DisplayType:\007CAS"
      "CADE\022\022\n\005delay\030\005 \001(\r:\003500\"e\n\006Footer\022\r\n\005la"
      "bel\030\001 \001(\t\022\034\n\rindex_visible\030\002 \001(\010:\005false\022"
      "\033\n\014logo_visible\030\003 \001(\010:\005false\022\021\n\tsub_labe"
      "l\030\004 \001(\t\"u\n\rCandidateWord\022\n\n\002id\030\001 \001(\005\022\r\n\005"
      "index\030\002 \001(\r\022\013\n\003key\030\003 \001(\t\022\r\n\005value\030\004 \001(\t\022"
      "-\n\nannotation\030\005 \001(\0132\031.mozc.commands.Anno"
      "tation\"\217\001\n\rCandidateList\022\025\n\rfocused_inde"
      "x\030\001 \001(\r\0220\n\ncandidates\030\002 \003(\0132\034.mozc.comma"
      "nds.CandidateWord\0225\n\010category\030\003 \001(\0162\027.mo"
      "zc.commands.Category:\nCONVERSION\"\206\005\n\nCan"
      "didates\022\025\n\rfocused_index\030\001 \001(\r\022\014\n\004size\030\002"
      " \002(\r\0226\n\tcandidate\030\003 \003(\n2#.mozc.commands."
      "Candidates.Candidate\022\020\n\010position\030\006 \002(\r\0220"
      "\n\rsubcandidates\030\010 \001(\0132\031.mozc.commands.Ca"
      "ndidates\022.\n\006usages\030\n \001(\0132\036.mozc.commands"
      ".InformationList\0225\n\010category\030\013 \001(\0162\027.moz"
      "c.commands.Category:\nCONVERSION\0226\n\014displ"
      "ay_type\030\014 \001(\0162\032.mozc.commands.DisplayTyp"
      "e:\004MAIN\022%\n\006footer\030\r \001(\0132\025.mozc.commands."
      "Footer\022@\n\tdirection\030\016 \001(\0162#.mozc.command"
      "s.Candidates.Direction:\010VERTICAL\022\024\n\tpage"
      "_size\030\022 \001(\r:\0019\032|\n\tCandidate\022\r\n\005index\030\004 \002"
      "(\r\022\r\n\005value\030\005 \002(\t\022\n\n\002id\030\t \001(\005\022-\n\nannotat"
      "ion\030\007 \001(\0132\031.mozc.commands.Annotation\022\026\n\016"
      "information_id\030\n \001(\005\")\n\tDirection\022\014\n\010VER"
      "TICAL\020\000\022\016\n\nHORIZONTAL\020\001J\004\010\017\020\020J\004\010\020\020\021J\004\010\021\020"
      "\022*Z\n\010Category\022\016\n\nCONVERSION\020\000\022\016\n\nPREDICT"
      "ION\020\001\022\016\n\nSUGGESTION\020\002\022\023\n\017TRANSLITERATION"
      "\020\003\022\t\n\005USAGE\020\004*$\n\013DisplayType\022\010\n\004MAIN\020\000\022\013"
      "\n\007CASCADE\020\001BA\n.org.mozc.android.inputmet"
      "hod.japanese.protobufB\017ProtoCandidates"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1678);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/candidates.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protocol_2fcandidates_2eproto
namespace mozc {
namespace commands {
const ::google::protobuf::EnumDescriptor* Candidates_Direction_descriptor() {
  protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcandidates_2eproto::file_level_enum_descriptors[0];
}
bool Candidates_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Candidates_Direction Candidates::VERTICAL;
const Candidates_Direction Candidates::HORIZONTAL;
const Candidates_Direction Candidates::Direction_MIN;
const Candidates_Direction Candidates::Direction_MAX;
const int Candidates::Direction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Category_descriptor() {
  protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcandidates_2eproto::file_level_enum_descriptors[1];
}
bool Category_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DisplayType_descriptor() {
  protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2fcandidates_2eproto::file_level_enum_descriptors[2];
}
bool DisplayType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Annotation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Annotation::kPrefixFieldNumber;
const int Annotation::kSuffixFieldNumber;
const int Annotation::kDescriptionFieldNumber;
const int Annotation::kShortcutFieldNumber;
const int Annotation::kDeletableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Annotation::Annotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcandidates_2eproto::scc_info_Annotation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Annotation)
}
Annotation::Annotation(const Annotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prefix()) {
    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_suffix()) {
    suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suffix_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  shortcut_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_shortcut()) {
    shortcut_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shortcut_);
  }
  deletable_ = from.deletable_;
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Annotation)
}

void Annotation::SharedCtor() {
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shortcut_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deletable_ = false;
}

Annotation::~Annotation() {
  // @@protoc_insertion_point(destructor:mozc.commands.Annotation)
  SharedDtor();
}

void Annotation::SharedDtor() {
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suffix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shortcut_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Annotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Annotation::descriptor() {
  ::protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcandidates_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Annotation& Annotation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcandidates_2eproto::scc_info_Annotation.base);
  return *internal_default_instance();
}


void Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Annotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      prefix_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      suffix_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      shortcut_.ClearNonDefaultToEmptyNoArena();
    }
  }
  deletable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Annotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Annotation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string prefix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Annotation.prefix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string suffix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->suffix().data(), static_cast<int>(this->suffix().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Annotation.suffix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Annotation.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string shortcut = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shortcut()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shortcut().data(), static_cast<int>(this->shortcut().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Annotation.shortcut");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool deletable = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_deletable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deletable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Annotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Annotation)
  return false;
#undef DO_
}

void Annotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Annotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->prefix(), output);
  }

  // optional string suffix = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suffix().data(), static_cast<int>(this->suffix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.suffix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->suffix(), output);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional string shortcut = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shortcut().data(), static_cast<int>(this->shortcut().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.shortcut");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->shortcut(), output);
  }

  // optional bool deletable = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->deletable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Annotation)
}

::google::protobuf::uint8* Annotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Annotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prefix(), target);
  }

  // optional string suffix = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suffix().data(), static_cast<int>(this->suffix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.suffix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->suffix(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional string shortcut = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shortcut().data(), static_cast<int>(this->shortcut().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.shortcut");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->shortcut(), target);
  }

  // optional bool deletable = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->deletable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Annotation)
  return target;
}

size_t Annotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Annotation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string prefix = 1;
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }

    // optional string suffix = 2;
    if (has_suffix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suffix());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string shortcut = 4;
    if (has_shortcut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shortcut());
    }

    // optional bool deletable = 5 [default = false];
    if (has_deletable()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Annotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  const Annotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Annotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Annotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Annotation)
    MergeFrom(*source);
  }
}

void Annotation::MergeFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_prefix();
      prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_suffix();
      suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suffix_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_shortcut();
      shortcut_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shortcut_);
    }
    if (cached_has_bits & 0x00000010u) {
      deletable_ = from.deletable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Annotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotation::CopyFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotation::IsInitialized() const {
  return true;
}

void Annotation::Swap(Annotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Annotation::InternalSwap(Annotation* other) {
  using std::swap;
  prefix_.Swap(&other->prefix_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  suffix_.Swap(&other->suffix_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  shortcut_.Swap(&other->shortcut_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(deletable_, other->deletable_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Annotation::GetMetadata() const {
  protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcandidates_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Information::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Information::kIdFieldNumber;
const int Information::kTitleFieldNumber;
const int Information::kDescriptionFieldNumber;
const int Information::kCandidateIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Information::Information()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcandidates_2eproto::scc_info_Information.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Information)
}
Information::Information(const Information& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      candidate_id_(from.candidate_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Information)
}

void Information::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

Information::~Information() {
  // @@protoc_insertion_point(destructor:mozc.commands.Information)
  SharedDtor();
}

void Information::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Information::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Information::descriptor() {
  ::protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcandidates_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Information& Information::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcandidates_2eproto::scc_info_Information.base);
  return *internal_default_instance();
}


void Information::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Information)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Information::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Information)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Information.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Information.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 candidate_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_candidate_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_candidate_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Information)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Information)
  return false;
#undef DO_
}

void Information::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Information)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Information.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Information.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // repeated int32 candidate_id = 4;
  for (int i = 0, n = this->candidate_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->candidate_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Information)
}

::google::protobuf::uint8* Information::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Information)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Information.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Information.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // repeated int32 candidate_id = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->candidate_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Information)
  return target;
}

size_t Information::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Information)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 candidate_id = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->candidate_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->candidate_id_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Information::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Information)
  GOOGLE_DCHECK_NE(&from, this);
  const Information* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Information>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Information)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Information)
    MergeFrom(*source);
  }
}

void Information::MergeFrom(const Information& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Information)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_id_.MergeFrom(from.candidate_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Information::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Information)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Information::CopyFrom(const Information& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Information)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Information::IsInitialized() const {
  return true;
}

void Information::Swap(Information* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Information::InternalSwap(Information* other) {
  using std::swap;
  candidate_id_.InternalSwap(&other->candidate_id_);
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Information::GetMetadata() const {
  protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcandidates_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InformationList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InformationList::kFocusedIndexFieldNumber;
const int InformationList::kInformationFieldNumber;
const int InformationList::kCategoryFieldNumber;
const int InformationList::kDisplayTypeFieldNumber;
const int InformationList::kDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InformationList::InformationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcandidates_2eproto::scc_info_InformationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.InformationList)
}
InformationList::InformationList(const InformationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      information_(from.information_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&focused_index_, &from.focused_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_) -
    reinterpret_cast<char*>(&focused_index_)) + sizeof(delay_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.InformationList)
}

void InformationList::SharedCtor() {
  ::memset(&focused_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&focused_index_)) + sizeof(category_));
  display_type_ = 1;
  delay_ = 500u;
}

InformationList::~InformationList() {
  // @@protoc_insertion_point(destructor:mozc.commands.InformationList)
  SharedDtor();
}

void InformationList::SharedDtor() {
}

void InformationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InformationList::descriptor() {
  ::protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcandidates_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InformationList& InformationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcandidates_2eproto::scc_info_InformationList.base);
  return *internal_default_instance();
}


void InformationList::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.InformationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  information_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&focused_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&category_) -
        reinterpret_cast<char*>(&focused_index_)) + sizeof(category_));
    display_type_ = 1;
    delay_ = 500u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InformationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.InformationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 focused_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_focused_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &focused_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mozc.commands.Information information = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_information()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Category category = 3 [default = CONVERSION];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Category_IsValid(value)) {
            set_category(static_cast< ::mozc::commands::Category >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::DisplayType_IsValid(value)) {
            set_display_type(static_cast< ::mozc::commands::DisplayType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 delay = 5 [default = 500];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.InformationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.InformationList)
  return false;
#undef DO_
}

void InformationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.InformationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 focused_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->focused_index(), output);
  }

  // repeated .mozc.commands.Information information = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->information_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->information(static_cast<int>(i)),
      output);
  }

  // optional .mozc.commands.Category category = 3 [default = CONVERSION];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->category(), output);
  }

  // optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->display_type(), output);
  }

  // optional uint32 delay = 5 [default = 500];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->delay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.InformationList)
}

::google::protobuf::uint8* InformationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.InformationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 focused_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->focused_index(), target);
  }

  // repeated .mozc.commands.Information information = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->information_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->information(static_cast<int>(i)), deterministic, target);
  }

  // optional .mozc.commands.Category category = 3 [default = CONVERSION];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->category(), target);
  }

  // optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->display_type(), target);
  }

  // optional uint32 delay = 5 [default = 500];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->delay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.InformationList)
  return target;
}

size_t InformationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.InformationList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mozc.commands.Information information = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->information_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->information(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 focused_index = 1;
    if (has_focused_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->focused_index());
    }

    // optional .mozc.commands.Category category = 3 [default = CONVERSION];
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
    }

    // optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
    if (has_display_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->display_type());
    }

    // optional uint32 delay = 5 [default = 500];
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InformationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.InformationList)
  GOOGLE_DCHECK_NE(&from, this);
  const InformationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InformationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.InformationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.InformationList)
    MergeFrom(*source);
  }
}

void InformationList::MergeFrom(const InformationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.InformationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  information_.MergeFrom(from.information_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      focused_index_ = from.focused_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      category_ = from.category_;
    }
    if (cached_has_bits & 0x00000004u) {
      display_type_ = from.display_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      delay_ = from.delay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InformationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.InformationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InformationList::CopyFrom(const InformationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.InformationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InformationList::IsInitialized() const {
  return true;
}

void InformationList::Swap(InformationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InformationList::InternalSwap(InformationList* other) {
  using std::swap;
  CastToBase(&information_)->InternalSwap(CastToBase(&other->information_));
  swap(focused_index_, other->focused_index_);
  swap(category_, other->category_);
  swap(display_type_, other->display_type_);
  swap(delay_, other->delay_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InformationList::GetMetadata() const {
  protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcandidates_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Footer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Footer::kLabelFieldNumber;
const int Footer::kIndexVisibleFieldNumber;
const int Footer::kLogoVisibleFieldNumber;
const int Footer::kSubLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Footer::Footer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcandidates_2eproto::scc_info_Footer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Footer)
}
Footer::Footer(const Footer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  sub_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sub_label()) {
    sub_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_label_);
  }
  ::memcpy(&index_visible_, &from.index_visible_,
    static_cast<size_t>(reinterpret_cast<char*>(&logo_visible_) -
    reinterpret_cast<char*>(&index_visible_)) + sizeof(logo_visible_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Footer)
}

void Footer::SharedCtor() {
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_visible_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logo_visible_) -
      reinterpret_cast<char*>(&index_visible_)) + sizeof(logo_visible_));
}

Footer::~Footer() {
  // @@protoc_insertion_point(destructor:mozc.commands.Footer)
  SharedDtor();
}

void Footer::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Footer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Footer::descriptor() {
  ::protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcandidates_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Footer& Footer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcandidates_2eproto::scc_info_Footer.base);
  return *internal_default_instance();
}


void Footer::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Footer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sub_label_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ::memset(&index_visible_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logo_visible_) -
      reinterpret_cast<char*>(&index_visible_)) + sizeof(logo_visible_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Footer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Footer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Footer.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool index_visible = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_index_visible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &index_visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool logo_visible = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_logo_visible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &logo_visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sub_label = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sub_label().data(), static_cast<int>(this->sub_label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Footer.sub_label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Footer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Footer)
  return false;
#undef DO_
}

void Footer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Footer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Footer.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // optional bool index_visible = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->index_visible(), output);
  }

  // optional bool logo_visible = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->logo_visible(), output);
  }

  // optional string sub_label = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub_label().data(), static_cast<int>(this->sub_label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Footer.sub_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sub_label(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Footer)
}

::google::protobuf::uint8* Footer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Footer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Footer.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // optional bool index_visible = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->index_visible(), target);
  }

  // optional bool logo_visible = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->logo_visible(), target);
  }

  // optional string sub_label = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub_label().data(), static_cast<int>(this->sub_label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Footer.sub_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sub_label(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Footer)
  return target;
}

size_t Footer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Footer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string sub_label = 4;
    if (has_sub_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sub_label());
    }

    // optional bool index_visible = 2 [default = false];
    if (has_index_visible()) {
      total_size += 1 + 1;
    }

    // optional bool logo_visible = 3 [default = false];
    if (has_logo_visible()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Footer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Footer)
  GOOGLE_DCHECK_NE(&from, this);
  const Footer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Footer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Footer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Footer)
    MergeFrom(*source);
  }
}

void Footer::MergeFrom(const Footer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Footer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sub_label();
      sub_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_label_);
    }
    if (cached_has_bits & 0x00000004u) {
      index_visible_ = from.index_visible_;
    }
    if (cached_has_bits & 0x00000008u) {
      logo_visible_ = from.logo_visible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Footer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Footer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Footer::CopyFrom(const Footer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Footer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Footer::IsInitialized() const {
  return true;
}

void Footer::Swap(Footer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Footer::InternalSwap(Footer* other) {
  using std::swap;
  label_.Swap(&other->label_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sub_label_.Swap(&other->sub_label_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_visible_, other->index_visible_);
  swap(logo_visible_, other->logo_visible_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Footer::GetMetadata() const {
  protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcandidates_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CandidateWord::InitAsDefaultInstance() {
  ::mozc::commands::_CandidateWord_default_instance_._instance.get_mutable()->annotation_ = const_cast< ::mozc::commands::Annotation*>(
      ::mozc::commands::Annotation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CandidateWord::kIdFieldNumber;
const int CandidateWord::kIndexFieldNumber;
const int CandidateWord::kKeyFieldNumber;
const int CandidateWord::kValueFieldNumber;
const int CandidateWord::kAnnotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CandidateWord::CandidateWord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcandidates_2eproto::scc_info_CandidateWord.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.CandidateWord)
}
CandidateWord::CandidateWord(const CandidateWord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_annotation()) {
    annotation_ = new ::mozc::commands::Annotation(*from.annotation_);
  } else {
    annotation_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&id_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.CandidateWord)
}

void CandidateWord::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&annotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&annotation_)) + sizeof(index_));
}

CandidateWord::~CandidateWord() {
  // @@protoc_insertion_point(destructor:mozc.commands.CandidateWord)
  SharedDtor();
}

void CandidateWord::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete annotation_;
}

void CandidateWord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CandidateWord::descriptor() {
  ::protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcandidates_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CandidateWord& CandidateWord::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcandidates_2eproto::scc_info_CandidateWord.base);
  return *internal_default_instance();
}


void CandidateWord::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.CandidateWord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(annotation_ != NULL);
      annotation_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&id_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CandidateWord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.CandidateWord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.CandidateWord.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.CandidateWord.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Annotation annotation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_annotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.CandidateWord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.CandidateWord)
  return false;
#undef DO_
}

void CandidateWord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.CandidateWord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint32 index = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional string key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.CandidateWord.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->key(), output);
  }

  // optional string value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.CandidateWord.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->value(), output);
  }

  // optional .mozc.commands.Annotation annotation = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_annotation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.CandidateWord)
}

::google::protobuf::uint8* CandidateWord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.CandidateWord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional uint32 index = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional string key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.CandidateWord.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  // optional string value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.CandidateWord.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  // optional .mozc.commands.Annotation annotation = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_annotation(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.CandidateWord)
  return target;
}

size_t CandidateWord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.CandidateWord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional .mozc.commands.Annotation annotation = 5;
    if (has_annotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *annotation_);
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandidateWord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.CandidateWord)
  GOOGLE_DCHECK_NE(&from, this);
  const CandidateWord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CandidateWord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.CandidateWord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.CandidateWord)
    MergeFrom(*source);
  }
}

void CandidateWord::MergeFrom(const CandidateWord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.CandidateWord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_annotation()->::mozc::commands::Annotation::MergeFrom(from.annotation());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CandidateWord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.CandidateWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandidateWord::CopyFrom(const CandidateWord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.CandidateWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateWord::IsInitialized() const {
  return true;
}

void CandidateWord::Swap(CandidateWord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CandidateWord::InternalSwap(CandidateWord* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(annotation_, other->annotation_);
  swap(id_, other->id_);
  swap(index_, other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CandidateWord::GetMetadata() const {
  protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcandidates_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CandidateList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CandidateList::kFocusedIndexFieldNumber;
const int CandidateList::kCandidatesFieldNumber;
const int CandidateList::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CandidateList::CandidateList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcandidates_2eproto::scc_info_CandidateList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.CandidateList)
}
CandidateList::CandidateList(const CandidateList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      candidates_(from.candidates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&focused_index_, &from.focused_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&category_) -
    reinterpret_cast<char*>(&focused_index_)) + sizeof(category_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.CandidateList)
}

void CandidateList::SharedCtor() {
  ::memset(&focused_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&focused_index_)) + sizeof(category_));
}

CandidateList::~CandidateList() {
  // @@protoc_insertion_point(destructor:mozc.commands.CandidateList)
  SharedDtor();
}

void CandidateList::SharedDtor() {
}

void CandidateList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CandidateList::descriptor() {
  ::protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcandidates_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CandidateList& CandidateList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcandidates_2eproto::scc_info_CandidateList.base);
  return *internal_default_instance();
}


void CandidateList::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.CandidateList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&focused_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&category_) -
        reinterpret_cast<char*>(&focused_index_)) + sizeof(category_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CandidateList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.CandidateList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 focused_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_focused_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &focused_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mozc.commands.CandidateWord candidates = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_candidates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Category category = 3 [default = CONVERSION];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Category_IsValid(value)) {
            set_category(static_cast< ::mozc::commands::Category >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.CandidateList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.CandidateList)
  return false;
#undef DO_
}

void CandidateList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.CandidateList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 focused_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->focused_index(), output);
  }

  // repeated .mozc.commands.CandidateWord candidates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->candidates(static_cast<int>(i)),
      output);
  }

  // optional .mozc.commands.Category category = 3 [default = CONVERSION];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->category(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.CandidateList)
}

::google::protobuf::uint8* CandidateList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.CandidateList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 focused_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->focused_index(), target);
  }

  // repeated .mozc.commands.CandidateWord candidates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->candidates(static_cast<int>(i)), deterministic, target);
  }

  // optional .mozc.commands.Category category = 3 [default = CONVERSION];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->category(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.CandidateList)
  return target;
}

size_t CandidateList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.CandidateList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mozc.commands.CandidateWord candidates = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->candidates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->candidates(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 focused_index = 1;
    if (has_focused_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->focused_index());
    }

    // optional .mozc.commands.Category category = 3 [default = CONVERSION];
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandidateList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.CandidateList)
  GOOGLE_DCHECK_NE(&from, this);
  const CandidateList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CandidateList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.CandidateList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.CandidateList)
    MergeFrom(*source);
  }
}

void CandidateList::MergeFrom(const CandidateList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.CandidateList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidates_.MergeFrom(from.candidates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      focused_index_ = from.focused_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      category_ = from.category_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CandidateList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.CandidateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandidateList::CopyFrom(const CandidateList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.CandidateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateList::IsInitialized() const {
  return true;
}

void CandidateList::Swap(CandidateList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CandidateList::InternalSwap(CandidateList* other) {
  using std::swap;
  CastToBase(&candidates_)->InternalSwap(CastToBase(&other->candidates_));
  swap(focused_index_, other->focused_index_);
  swap(category_, other->category_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CandidateList::GetMetadata() const {
  protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcandidates_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Candidates_Candidate::InitAsDefaultInstance() {
  ::mozc::commands::_Candidates_Candidate_default_instance_._instance.get_mutable()->annotation_ = const_cast< ::mozc::commands::Annotation*>(
      ::mozc::commands::Annotation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Candidates_Candidate::kIndexFieldNumber;
const int Candidates_Candidate::kValueFieldNumber;
const int Candidates_Candidate::kIdFieldNumber;
const int Candidates_Candidate::kAnnotationFieldNumber;
const int Candidates_Candidate::kInformationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Candidates_Candidate::Candidates_Candidate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcandidates_2eproto::scc_info_Candidates_Candidate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Candidates.Candidate)
}
Candidates_Candidate::Candidates_Candidate(const Candidates_Candidate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_annotation()) {
    annotation_ = new ::mozc::commands::Annotation(*from.annotation_);
  } else {
    annotation_ = NULL;
  }
  ::memcpy(&information_id_, &from.information_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&information_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Candidates.Candidate)
}

void Candidates_Candidate::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&annotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&annotation_)) + sizeof(id_));
}

Candidates_Candidate::~Candidates_Candidate() {
  // @@protoc_insertion_point(destructor:mozc.commands.Candidates.Candidate)
  SharedDtor();
}

void Candidates_Candidate::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete annotation_;
}

void Candidates_Candidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Candidates_Candidate::descriptor() {
  ::protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcandidates_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Candidates_Candidate& Candidates_Candidate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcandidates_2eproto::scc_info_Candidates_Candidate.base);
  return *internal_default_instance();
}


void Candidates_Candidate::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Candidates.Candidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(annotation_ != NULL);
      annotation_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&information_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&information_id_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Candidates_Candidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Candidates.Candidate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Candidates.Candidate.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Annotation annotation = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_annotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 information_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_information_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &information_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Candidates.Candidate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Candidates.Candidate)
  return false;
#undef DO_
}

void Candidates_Candidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Candidates.Candidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  // required string value = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Candidates.Candidate.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->value(), output);
  }

  // optional .mozc.commands.Annotation annotation = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_annotation(), output);
  }

  // optional int32 id = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->id(), output);
  }

  // optional int32 information_id = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->information_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Candidates.Candidate)
}

::google::protobuf::uint8* Candidates_Candidate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Candidates.Candidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  // required string value = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Candidates.Candidate.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->value(), target);
  }

  // optional .mozc.commands.Annotation annotation = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_annotation(), deterministic, target);
  }

  // optional int32 id = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->id(), target);
  }

  // optional int32 information_id = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->information_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Candidates.Candidate)
  return target;
}

size_t Candidates_Candidate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.commands.Candidates.Candidate)
  size_t total_size = 0;

  if (has_value()) {
    // required string value = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  if (has_index()) {
    // required uint32 index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  return total_size;
}
size_t Candidates_Candidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Candidates.Candidate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string value = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

    // required uint32 index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional .mozc.commands.Annotation annotation = 7;
    if (has_annotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *annotation_);
    }

    // optional int32 information_id = 10;
    if (has_information_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->information_id());
    }

  }
  // optional int32 id = 9;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Candidates_Candidate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Candidates.Candidate)
  GOOGLE_DCHECK_NE(&from, this);
  const Candidates_Candidate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Candidates_Candidate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Candidates.Candidate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Candidates.Candidate)
    MergeFrom(*source);
  }
}

void Candidates_Candidate::MergeFrom(const Candidates_Candidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Candidates.Candidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_annotation()->::mozc::commands::Annotation::MergeFrom(from.annotation());
    }
    if (cached_has_bits & 0x00000004u) {
      information_id_ = from.information_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Candidates_Candidate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Candidates.Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Candidates_Candidate::CopyFrom(const Candidates_Candidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Candidates.Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candidates_Candidate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  return true;
}

void Candidates_Candidate::Swap(Candidates_Candidate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Candidates_Candidate::InternalSwap(Candidates_Candidate* other) {
  using std::swap;
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(annotation_, other->annotation_);
  swap(information_id_, other->information_id_);
  swap(index_, other->index_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Candidates_Candidate::GetMetadata() const {
  protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcandidates_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Candidates::InitAsDefaultInstance() {
  ::mozc::commands::_Candidates_default_instance_._instance.get_mutable()->subcandidates_ = const_cast< ::mozc::commands::Candidates*>(
      ::mozc::commands::Candidates::internal_default_instance());
  ::mozc::commands::_Candidates_default_instance_._instance.get_mutable()->usages_ = const_cast< ::mozc::commands::InformationList*>(
      ::mozc::commands::InformationList::internal_default_instance());
  ::mozc::commands::_Candidates_default_instance_._instance.get_mutable()->footer_ = const_cast< ::mozc::commands::Footer*>(
      ::mozc::commands::Footer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Candidates::kFocusedIndexFieldNumber;
const int Candidates::kSizeFieldNumber;
const int Candidates::kCandidateFieldNumber;
const int Candidates::kPositionFieldNumber;
const int Candidates::kSubcandidatesFieldNumber;
const int Candidates::kUsagesFieldNumber;
const int Candidates::kCategoryFieldNumber;
const int Candidates::kDisplayTypeFieldNumber;
const int Candidates::kFooterFieldNumber;
const int Candidates::kDirectionFieldNumber;
const int Candidates::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Candidates::Candidates()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2fcandidates_2eproto::scc_info_Candidates.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Candidates)
}
Candidates::Candidates(const Candidates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      candidate_(from.candidate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_subcandidates()) {
    subcandidates_ = new ::mozc::commands::Candidates(*from.subcandidates_);
  } else {
    subcandidates_ = NULL;
  }
  if (from.has_usages()) {
    usages_ = new ::mozc::commands::InformationList(*from.usages_);
  } else {
    usages_ = NULL;
  }
  if (from.has_footer()) {
    footer_ = new ::mozc::commands::Footer(*from.footer_);
  } else {
    footer_ = NULL;
  }
  ::memcpy(&focused_index_, &from.focused_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&focused_index_)) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Candidates)
}

void Candidates::SharedCtor() {
  ::memset(&subcandidates_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&subcandidates_)) + sizeof(direction_));
  page_size_ = 9u;
}

Candidates::~Candidates() {
  // @@protoc_insertion_point(destructor:mozc.commands.Candidates)
  SharedDtor();
}

void Candidates::SharedDtor() {
  if (this != internal_default_instance()) delete subcandidates_;
  if (this != internal_default_instance()) delete usages_;
  if (this != internal_default_instance()) delete footer_;
}

void Candidates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Candidates::descriptor() {
  ::protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcandidates_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Candidates& Candidates::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2fcandidates_2eproto::scc_info_Candidates.base);
  return *internal_default_instance();
}


void Candidates::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Candidates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(subcandidates_ != NULL);
      subcandidates_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(usages_ != NULL);
      usages_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(footer_ != NULL);
      footer_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&focused_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&display_type_) -
        reinterpret_cast<char*>(&focused_index_)) + sizeof(display_type_));
  }
  if (cached_has_bits & 768u) {
    direction_ = 0;
    page_size_ = 9u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Candidates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Candidates)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 focused_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_focused_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &focused_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Candidate = 3 { ... };
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(27u /* 27 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(3, input, add_candidate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 position = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Candidates subcandidates = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subcandidates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.InformationList usages = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_usages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Category category = 11 [default = CONVERSION];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Category_IsValid(value)) {
            set_category(static_cast< ::mozc::commands::Category >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::DisplayType_IsValid(value)) {
            set_display_type(static_cast< ::mozc::commands::DisplayType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Footer footer = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_footer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Candidates_Direction_IsValid(value)) {
            set_direction(static_cast< ::mozc::commands::Candidates_Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 page_size = 18 [default = 9];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_page_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Candidates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Candidates)
  return false;
#undef DO_
}

void Candidates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Candidates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 focused_index = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->focused_index(), output);
  }

  // required uint32 size = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  // repeated group Candidate = 3 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      3,
      this->candidate(static_cast<int>(i)),
      output);
  }

  // required uint32 position = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->position(), output);
  }

  // optional .mozc.commands.Candidates subcandidates = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_subcandidates(), output);
  }

  // optional .mozc.commands.InformationList usages = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_usages(), output);
  }

  // optional .mozc.commands.Category category = 11 [default = CONVERSION];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->category(), output);
  }

  // optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->display_type(), output);
  }

  // optional .mozc.commands.Footer footer = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_footer(), output);
  }

  // optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->direction(), output);
  }

  // optional uint32 page_size = 18 [default = 9];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->page_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Candidates)
}

::google::protobuf::uint8* Candidates::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Candidates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 focused_index = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->focused_index(), target);
  }

  // required uint32 size = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  // repeated group Candidate = 3 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        3, this->candidate(static_cast<int>(i)), deterministic, target);
  }

  // required uint32 position = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->position(), target);
  }

  // optional .mozc.commands.Candidates subcandidates = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_subcandidates(), deterministic, target);
  }

  // optional .mozc.commands.InformationList usages = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_usages(), deterministic, target);
  }

  // optional .mozc.commands.Category category = 11 [default = CONVERSION];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->category(), target);
  }

  // optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->display_type(), target);
  }

  // optional .mozc.commands.Footer footer = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_footer(), deterministic, target);
  }

  // optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->direction(), target);
  }

  // optional uint32 page_size = 18 [default = 9];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->page_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Candidates)
  return target;
}

size_t Candidates::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.commands.Candidates)
  size_t total_size = 0;

  if (has_size()) {
    // required uint32 size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  if (has_position()) {
    // required uint32 position = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  return total_size;
}
size_t Candidates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Candidates)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000030) ^ 0x00000030) == 0) {  // All required fields are present.
    // required uint32 size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());

    // required uint32 position = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated group Candidate = 3 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->candidate_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->candidate(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .mozc.commands.Candidates subcandidates = 8;
    if (has_subcandidates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *subcandidates_);
    }

    // optional .mozc.commands.InformationList usages = 10;
    if (has_usages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *usages_);
    }

    // optional .mozc.commands.Footer footer = 13;
    if (has_footer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *footer_);
    }

    // optional uint32 focused_index = 1;
    if (has_focused_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->focused_index());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional .mozc.commands.Category category = 11 [default = CONVERSION];
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
    }

    // optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
    if (has_display_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->display_type());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // optional uint32 page_size = 18 [default = 9];
    if (has_page_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Candidates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Candidates)
  GOOGLE_DCHECK_NE(&from, this);
  const Candidates* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Candidates>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Candidates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Candidates)
    MergeFrom(*source);
  }
}

void Candidates::MergeFrom(const Candidates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Candidates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_.MergeFrom(from.candidate_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_subcandidates()->::mozc::commands::Candidates::MergeFrom(from.subcandidates());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_usages()->::mozc::commands::InformationList::MergeFrom(from.usages());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_footer()->::mozc::commands::Footer::MergeFrom(from.footer());
    }
    if (cached_has_bits & 0x00000008u) {
      focused_index_ = from.focused_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000020u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000040u) {
      category_ = from.category_;
    }
    if (cached_has_bits & 0x00000080u) {
      display_type_ = from.display_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000200u) {
      page_size_ = from.page_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Candidates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Candidates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Candidates::CopyFrom(const Candidates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Candidates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candidates::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000030) != 0x00000030) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->candidate())) return false;
  if (has_subcandidates()) {
    if (!this->subcandidates_->IsInitialized()) return false;
  }
  return true;
}

void Candidates::Swap(Candidates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Candidates::InternalSwap(Candidates* other) {
  using std::swap;
  CastToBase(&candidate_)->InternalSwap(CastToBase(&other->candidate_));
  swap(subcandidates_, other->subcandidates_);
  swap(usages_, other->usages_);
  swap(footer_, other->footer_);
  swap(focused_index_, other->focused_index_);
  swap(size_, other->size_);
  swap(position_, other->position_);
  swap(category_, other->category_);
  swap(display_type_, other->display_type_);
  swap(direction_, other->direction_);
  swap(page_size_, other->page_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Candidates::GetMetadata() const {
  protobuf_protocol_2fcandidates_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2fcandidates_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commands
}  // namespace mozc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Annotation* Arena::CreateMaybeMessage< ::mozc::commands::Annotation >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Annotation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Information* Arena::CreateMaybeMessage< ::mozc::commands::Information >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Information >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::InformationList* Arena::CreateMaybeMessage< ::mozc::commands::InformationList >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::InformationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Footer* Arena::CreateMaybeMessage< ::mozc::commands::Footer >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Footer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::CandidateWord* Arena::CreateMaybeMessage< ::mozc::commands::CandidateWord >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::CandidateWord >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::CandidateList* Arena::CreateMaybeMessage< ::mozc::commands::CandidateList >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::CandidateList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Candidates_Candidate* Arena::CreateMaybeMessage< ::mozc::commands::Candidates_Candidate >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Candidates_Candidate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::commands::Candidates* Arena::CreateMaybeMessage< ::mozc::commands::Candidates >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::commands::Candidates >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
