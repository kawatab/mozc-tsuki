// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: usage_stats/usage_stats.proto

#include "usage_stats/usage_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_usage_5fstats_2fusage_5fstats_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_usage_5fstats_2fusage_5fstats_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Stats_DoubleValueStats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_usage_5fstats_2fusage_5fstats_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Stats_TouchEventStats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_usage_5fstats_2fusage_5fstats_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Stats_VirtualKeyboardStats;
}  // namespace protobuf_usage_5fstats_2fusage_5fstats_2eproto
namespace mozc {
namespace usage_stats {
class Stats_DoubleValueStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Stats_DoubleValueStats>
      _instance;
} _Stats_DoubleValueStats_default_instance_;
class Stats_TouchEventStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Stats_TouchEventStats>
      _instance;
} _Stats_TouchEventStats_default_instance_;
class Stats_VirtualKeyboardStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Stats_VirtualKeyboardStats>
      _instance;
} _Stats_VirtualKeyboardStats_default_instance_;
class StatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Stats>
      _instance;
} _Stats_default_instance_;
}  // namespace usage_stats
}  // namespace mozc
namespace protobuf_usage_5fstats_2fusage_5fstats_2eproto {
static void InitDefaultsStats_DoubleValueStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::usage_stats::_Stats_DoubleValueStats_default_instance_;
    new (ptr) ::mozc::usage_stats::Stats_DoubleValueStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::usage_stats::Stats_DoubleValueStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Stats_DoubleValueStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStats_DoubleValueStats}, {}};

static void InitDefaultsStats_TouchEventStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::usage_stats::_Stats_TouchEventStats_default_instance_;
    new (ptr) ::mozc::usage_stats::Stats_TouchEventStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::usage_stats::Stats_TouchEventStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Stats_TouchEventStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStats_TouchEventStats}, {
      &protobuf_usage_5fstats_2fusage_5fstats_2eproto::scc_info_Stats_DoubleValueStats.base,}};

static void InitDefaultsStats_VirtualKeyboardStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::usage_stats::_Stats_VirtualKeyboardStats_default_instance_;
    new (ptr) ::mozc::usage_stats::Stats_VirtualKeyboardStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::usage_stats::Stats_VirtualKeyboardStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Stats_VirtualKeyboardStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStats_VirtualKeyboardStats}, {
      &protobuf_usage_5fstats_2fusage_5fstats_2eproto::scc_info_Stats_TouchEventStats.base,}};

static void InitDefaultsStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::usage_stats::_Stats_default_instance_;
    new (ptr) ::mozc::usage_stats::Stats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::usage_stats::Stats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Stats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStats}, {
      &protobuf_usage_5fstats_2fusage_5fstats_2eproto::scc_info_Stats_VirtualKeyboardStats.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Stats_DoubleValueStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Stats_TouchEventStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Stats_VirtualKeyboardStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Stats.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats_DoubleValueStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats_DoubleValueStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats_DoubleValueStats, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats_DoubleValueStats, total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats_DoubleValueStats, square_total_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats_TouchEventStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats_TouchEventStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats_TouchEventStats, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats_TouchEventStats, start_x_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats_TouchEventStats, start_y_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats_TouchEventStats, direction_x_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats_TouchEventStats, direction_y_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats_TouchEventStats, time_length_stats_),
  5,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats_VirtualKeyboardStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats_VirtualKeyboardStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats_VirtualKeyboardStats, keyboard_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats_VirtualKeyboardStats, touch_event_stats_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats, total_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats, num_timings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats, avg_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats, min_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats, max_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats, int_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats, boolean_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::usage_stats::Stats, virtual_keyboard_stats_),
  0,
  1,
  2,
  9,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::mozc::usage_stats::Stats_DoubleValueStats)},
  { 11, 22, sizeof(::mozc::usage_stats::Stats_TouchEventStats)},
  { 28, 35, sizeof(::mozc::usage_stats::Stats_VirtualKeyboardStats)},
  { 37, 53, sizeof(::mozc::usage_stats::Stats)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::usage_stats::_Stats_DoubleValueStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::usage_stats::_Stats_TouchEventStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::usage_stats::_Stats_VirtualKeyboardStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::usage_stats::_Stats_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "usage_stats/usage_stats.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035usage_stats/usage_stats.proto\022\020mozc.us"
      "age_stats\"\247\007\n\005Stats\022\014\n\004name\030\001 \002(\t\022*\n\004typ"
      "e\030\002 \002(\0162\034.mozc.usage_stats.Stats.Type\022\r\n"
      "\005count\030\003 \001(\r\022\022\n\ntotal_time\030\n \001(\004\022\023\n\013num_"
      "timings\030\004 \001(\r\022\020\n\010avg_time\030\005 \001(\r\022\020\n\010min_t"
      "ime\030\006 \001(\r\022\020\n\010max_time\030\007 \001(\r\022\021\n\tint_value"
      "\030\010 \001(\005\022\025\n\rboolean_value\030\t \001(\010\022L\n\026virtual"
      "_keyboard_stats\030\013 \003(\0132,.mozc.usage_stats"
      ".Stats.VirtualKeyboardStats\032D\n\020DoubleVal"
      "ueStats\022\013\n\003num\030\001 \001(\r\022\r\n\005total\030\002 \001(\001\022\024\n\014s"
      "quare_total\030\003 \001(\001\032\365\002\n\017TouchEventStats\022\021\n"
      "\tsource_id\030\001 \001(\r\022\?\n\rstart_x_stats\030\002 \001(\0132"
      "(.mozc.usage_stats.Stats.DoubleValueStat"
      "s\022\?\n\rstart_y_stats\030\003 \001(\0132(.mozc.usage_st"
      "ats.Stats.DoubleValueStats\022C\n\021direction_"
      "x_stats\030\004 \001(\0132(.mozc.usage_stats.Stats.D"
      "oubleValueStats\022C\n\021direction_y_stats\030\005 \001"
      "(\0132(.mozc.usage_stats.Stats.DoubleValueS"
      "tats\022C\n\021time_length_stats\030\006 \001(\0132(.mozc.u"
      "sage_stats.Stats.DoubleValueStats\032q\n\024Vir"
      "tualKeyboardStats\022\025\n\rkeyboard_name\030\001 \001(\t"
      "\022B\n\021touch_event_stats\030\002 \003(\0132\'.mozc.usage"
      "_stats.Stats.TouchEventStats\"M\n\004Type\022\t\n\005"
      "COUNT\020\000\022\n\n\006TIMING\020\001\022\013\n\007INTEGER\020\002\022\013\n\007BOOL"
      "EAN\020\003\022\024\n\020VIRTUAL_KEYBOARD\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 987);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "usage_stats/usage_stats.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_usage_5fstats_2fusage_5fstats_2eproto
namespace mozc {
namespace usage_stats {
const ::google::protobuf::EnumDescriptor* Stats_Type_descriptor() {
  protobuf_usage_5fstats_2fusage_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_usage_5fstats_2fusage_5fstats_2eproto::file_level_enum_descriptors[0];
}
bool Stats_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Stats_Type Stats::COUNT;
const Stats_Type Stats::TIMING;
const Stats_Type Stats::INTEGER;
const Stats_Type Stats::BOOLEAN;
const Stats_Type Stats::VIRTUAL_KEYBOARD;
const Stats_Type Stats::Type_MIN;
const Stats_Type Stats::Type_MAX;
const int Stats::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Stats_DoubleValueStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stats_DoubleValueStats::kNumFieldNumber;
const int Stats_DoubleValueStats::kTotalFieldNumber;
const int Stats_DoubleValueStats::kSquareTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stats_DoubleValueStats::Stats_DoubleValueStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_usage_5fstats_2fusage_5fstats_2eproto::scc_info_Stats_DoubleValueStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.usage_stats.Stats.DoubleValueStats)
}
Stats_DoubleValueStats::Stats_DoubleValueStats(const Stats_DoubleValueStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&total_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:mozc.usage_stats.Stats.DoubleValueStats)
}

void Stats_DoubleValueStats::SharedCtor() {
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&total_)) + sizeof(num_));
}

Stats_DoubleValueStats::~Stats_DoubleValueStats() {
  // @@protoc_insertion_point(destructor:mozc.usage_stats.Stats.DoubleValueStats)
  SharedDtor();
}

void Stats_DoubleValueStats::SharedDtor() {
}

void Stats_DoubleValueStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Stats_DoubleValueStats::descriptor() {
  ::protobuf_usage_5fstats_2fusage_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_usage_5fstats_2fusage_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stats_DoubleValueStats& Stats_DoubleValueStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_usage_5fstats_2fusage_5fstats_2eproto::scc_info_Stats_DoubleValueStats.base);
  return *internal_default_instance();
}


void Stats_DoubleValueStats::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.usage_stats.Stats.DoubleValueStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_) -
        reinterpret_cast<char*>(&total_)) + sizeof(num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stats_DoubleValueStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.usage_stats.Stats.DoubleValueStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double square_total = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_square_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &square_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.usage_stats.Stats.DoubleValueStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.usage_stats.Stats.DoubleValueStats)
  return false;
#undef DO_
}

void Stats_DoubleValueStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.usage_stats.Stats.DoubleValueStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // optional double total = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total(), output);
  }

  // optional double square_total = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->square_total(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.usage_stats.Stats.DoubleValueStats)
}

::google::protobuf::uint8* Stats_DoubleValueStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.usage_stats.Stats.DoubleValueStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // optional double total = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total(), target);
  }

  // optional double square_total = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->square_total(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.usage_stats.Stats.DoubleValueStats)
  return target;
}

size_t Stats_DoubleValueStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.usage_stats.Stats.DoubleValueStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double total = 2;
    if (has_total()) {
      total_size += 1 + 8;
    }

    // optional double square_total = 3;
    if (has_square_total()) {
      total_size += 1 + 8;
    }

    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stats_DoubleValueStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.usage_stats.Stats.DoubleValueStats)
  GOOGLE_DCHECK_NE(&from, this);
  const Stats_DoubleValueStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stats_DoubleValueStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.usage_stats.Stats.DoubleValueStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.usage_stats.Stats.DoubleValueStats)
    MergeFrom(*source);
  }
}

void Stats_DoubleValueStats::MergeFrom(const Stats_DoubleValueStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.usage_stats.Stats.DoubleValueStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000002u) {
      square_total_ = from.square_total_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stats_DoubleValueStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.usage_stats.Stats.DoubleValueStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats_DoubleValueStats::CopyFrom(const Stats_DoubleValueStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.usage_stats.Stats.DoubleValueStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats_DoubleValueStats::IsInitialized() const {
  return true;
}

void Stats_DoubleValueStats::Swap(Stats_DoubleValueStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stats_DoubleValueStats::InternalSwap(Stats_DoubleValueStats* other) {
  using std::swap;
  swap(total_, other->total_);
  swap(square_total_, other->square_total_);
  swap(num_, other->num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Stats_DoubleValueStats::GetMetadata() const {
  protobuf_usage_5fstats_2fusage_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_usage_5fstats_2fusage_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Stats_TouchEventStats::InitAsDefaultInstance() {
  ::mozc::usage_stats::_Stats_TouchEventStats_default_instance_._instance.get_mutable()->start_x_stats_ = const_cast< ::mozc::usage_stats::Stats_DoubleValueStats*>(
      ::mozc::usage_stats::Stats_DoubleValueStats::internal_default_instance());
  ::mozc::usage_stats::_Stats_TouchEventStats_default_instance_._instance.get_mutable()->start_y_stats_ = const_cast< ::mozc::usage_stats::Stats_DoubleValueStats*>(
      ::mozc::usage_stats::Stats_DoubleValueStats::internal_default_instance());
  ::mozc::usage_stats::_Stats_TouchEventStats_default_instance_._instance.get_mutable()->direction_x_stats_ = const_cast< ::mozc::usage_stats::Stats_DoubleValueStats*>(
      ::mozc::usage_stats::Stats_DoubleValueStats::internal_default_instance());
  ::mozc::usage_stats::_Stats_TouchEventStats_default_instance_._instance.get_mutable()->direction_y_stats_ = const_cast< ::mozc::usage_stats::Stats_DoubleValueStats*>(
      ::mozc::usage_stats::Stats_DoubleValueStats::internal_default_instance());
  ::mozc::usage_stats::_Stats_TouchEventStats_default_instance_._instance.get_mutable()->time_length_stats_ = const_cast< ::mozc::usage_stats::Stats_DoubleValueStats*>(
      ::mozc::usage_stats::Stats_DoubleValueStats::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stats_TouchEventStats::kSourceIdFieldNumber;
const int Stats_TouchEventStats::kStartXStatsFieldNumber;
const int Stats_TouchEventStats::kStartYStatsFieldNumber;
const int Stats_TouchEventStats::kDirectionXStatsFieldNumber;
const int Stats_TouchEventStats::kDirectionYStatsFieldNumber;
const int Stats_TouchEventStats::kTimeLengthStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stats_TouchEventStats::Stats_TouchEventStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_usage_5fstats_2fusage_5fstats_2eproto::scc_info_Stats_TouchEventStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.usage_stats.Stats.TouchEventStats)
}
Stats_TouchEventStats::Stats_TouchEventStats(const Stats_TouchEventStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start_x_stats()) {
    start_x_stats_ = new ::mozc::usage_stats::Stats_DoubleValueStats(*from.start_x_stats_);
  } else {
    start_x_stats_ = NULL;
  }
  if (from.has_start_y_stats()) {
    start_y_stats_ = new ::mozc::usage_stats::Stats_DoubleValueStats(*from.start_y_stats_);
  } else {
    start_y_stats_ = NULL;
  }
  if (from.has_direction_x_stats()) {
    direction_x_stats_ = new ::mozc::usage_stats::Stats_DoubleValueStats(*from.direction_x_stats_);
  } else {
    direction_x_stats_ = NULL;
  }
  if (from.has_direction_y_stats()) {
    direction_y_stats_ = new ::mozc::usage_stats::Stats_DoubleValueStats(*from.direction_y_stats_);
  } else {
    direction_y_stats_ = NULL;
  }
  if (from.has_time_length_stats()) {
    time_length_stats_ = new ::mozc::usage_stats::Stats_DoubleValueStats(*from.time_length_stats_);
  } else {
    time_length_stats_ = NULL;
  }
  source_id_ = from.source_id_;
  // @@protoc_insertion_point(copy_constructor:mozc.usage_stats.Stats.TouchEventStats)
}

void Stats_TouchEventStats::SharedCtor() {
  ::memset(&start_x_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_id_) -
      reinterpret_cast<char*>(&start_x_stats_)) + sizeof(source_id_));
}

Stats_TouchEventStats::~Stats_TouchEventStats() {
  // @@protoc_insertion_point(destructor:mozc.usage_stats.Stats.TouchEventStats)
  SharedDtor();
}

void Stats_TouchEventStats::SharedDtor() {
  if (this != internal_default_instance()) delete start_x_stats_;
  if (this != internal_default_instance()) delete start_y_stats_;
  if (this != internal_default_instance()) delete direction_x_stats_;
  if (this != internal_default_instance()) delete direction_y_stats_;
  if (this != internal_default_instance()) delete time_length_stats_;
}

void Stats_TouchEventStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Stats_TouchEventStats::descriptor() {
  ::protobuf_usage_5fstats_2fusage_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_usage_5fstats_2fusage_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stats_TouchEventStats& Stats_TouchEventStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_usage_5fstats_2fusage_5fstats_2eproto::scc_info_Stats_TouchEventStats.base);
  return *internal_default_instance();
}


void Stats_TouchEventStats::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.usage_stats.Stats.TouchEventStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(start_x_stats_ != NULL);
      start_x_stats_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(start_y_stats_ != NULL);
      start_y_stats_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(direction_x_stats_ != NULL);
      direction_x_stats_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(direction_y_stats_ != NULL);
      direction_y_stats_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(time_length_stats_ != NULL);
      time_length_stats_->Clear();
    }
  }
  source_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stats_TouchEventStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.usage_stats.Stats.TouchEventStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.usage_stats.Stats.DoubleValueStats start_x_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_x_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.usage_stats.Stats.DoubleValueStats start_y_stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_y_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.usage_stats.Stats.DoubleValueStats direction_x_stats = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_direction_x_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.usage_stats.Stats.DoubleValueStats direction_y_stats = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_direction_y_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mozc.usage_stats.Stats.DoubleValueStats time_length_stats = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_length_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.usage_stats.Stats.TouchEventStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.usage_stats.Stats.TouchEventStats)
  return false;
#undef DO_
}

void Stats_TouchEventStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.usage_stats.Stats.TouchEventStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source_id(), output);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats start_x_stats = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_start_x_stats(), output);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats start_y_stats = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_start_y_stats(), output);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats direction_x_stats = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_direction_x_stats(), output);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats direction_y_stats = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_direction_y_stats(), output);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats time_length_stats = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_time_length_stats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.usage_stats.Stats.TouchEventStats)
}

::google::protobuf::uint8* Stats_TouchEventStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.usage_stats.Stats.TouchEventStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source_id(), target);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats start_x_stats = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_start_x_stats(), deterministic, target);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats start_y_stats = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_start_y_stats(), deterministic, target);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats direction_x_stats = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_direction_x_stats(), deterministic, target);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats direction_y_stats = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_direction_y_stats(), deterministic, target);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats time_length_stats = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_time_length_stats(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.usage_stats.Stats.TouchEventStats)
  return target;
}

size_t Stats_TouchEventStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.usage_stats.Stats.TouchEventStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .mozc.usage_stats.Stats.DoubleValueStats start_x_stats = 2;
    if (has_start_x_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *start_x_stats_);
    }

    // optional .mozc.usage_stats.Stats.DoubleValueStats start_y_stats = 3;
    if (has_start_y_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *start_y_stats_);
    }

    // optional .mozc.usage_stats.Stats.DoubleValueStats direction_x_stats = 4;
    if (has_direction_x_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *direction_x_stats_);
    }

    // optional .mozc.usage_stats.Stats.DoubleValueStats direction_y_stats = 5;
    if (has_direction_y_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *direction_y_stats_);
    }

    // optional .mozc.usage_stats.Stats.DoubleValueStats time_length_stats = 6;
    if (has_time_length_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *time_length_stats_);
    }

    // optional uint32 source_id = 1;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stats_TouchEventStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.usage_stats.Stats.TouchEventStats)
  GOOGLE_DCHECK_NE(&from, this);
  const Stats_TouchEventStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stats_TouchEventStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.usage_stats.Stats.TouchEventStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.usage_stats.Stats.TouchEventStats)
    MergeFrom(*source);
  }
}

void Stats_TouchEventStats::MergeFrom(const Stats_TouchEventStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.usage_stats.Stats.TouchEventStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_start_x_stats()->::mozc::usage_stats::Stats_DoubleValueStats::MergeFrom(from.start_x_stats());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_start_y_stats()->::mozc::usage_stats::Stats_DoubleValueStats::MergeFrom(from.start_y_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_direction_x_stats()->::mozc::usage_stats::Stats_DoubleValueStats::MergeFrom(from.direction_x_stats());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_direction_y_stats()->::mozc::usage_stats::Stats_DoubleValueStats::MergeFrom(from.direction_y_stats());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_time_length_stats()->::mozc::usage_stats::Stats_DoubleValueStats::MergeFrom(from.time_length_stats());
    }
    if (cached_has_bits & 0x00000020u) {
      source_id_ = from.source_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stats_TouchEventStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.usage_stats.Stats.TouchEventStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats_TouchEventStats::CopyFrom(const Stats_TouchEventStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.usage_stats.Stats.TouchEventStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats_TouchEventStats::IsInitialized() const {
  return true;
}

void Stats_TouchEventStats::Swap(Stats_TouchEventStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stats_TouchEventStats::InternalSwap(Stats_TouchEventStats* other) {
  using std::swap;
  swap(start_x_stats_, other->start_x_stats_);
  swap(start_y_stats_, other->start_y_stats_);
  swap(direction_x_stats_, other->direction_x_stats_);
  swap(direction_y_stats_, other->direction_y_stats_);
  swap(time_length_stats_, other->time_length_stats_);
  swap(source_id_, other->source_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Stats_TouchEventStats::GetMetadata() const {
  protobuf_usage_5fstats_2fusage_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_usage_5fstats_2fusage_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Stats_VirtualKeyboardStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stats_VirtualKeyboardStats::kKeyboardNameFieldNumber;
const int Stats_VirtualKeyboardStats::kTouchEventStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stats_VirtualKeyboardStats::Stats_VirtualKeyboardStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_usage_5fstats_2fusage_5fstats_2eproto::scc_info_Stats_VirtualKeyboardStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.usage_stats.Stats.VirtualKeyboardStats)
}
Stats_VirtualKeyboardStats::Stats_VirtualKeyboardStats(const Stats_VirtualKeyboardStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      touch_event_stats_(from.touch_event_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keyboard_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keyboard_name()) {
    keyboard_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyboard_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mozc.usage_stats.Stats.VirtualKeyboardStats)
}

void Stats_VirtualKeyboardStats::SharedCtor() {
  keyboard_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Stats_VirtualKeyboardStats::~Stats_VirtualKeyboardStats() {
  // @@protoc_insertion_point(destructor:mozc.usage_stats.Stats.VirtualKeyboardStats)
  SharedDtor();
}

void Stats_VirtualKeyboardStats::SharedDtor() {
  keyboard_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Stats_VirtualKeyboardStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Stats_VirtualKeyboardStats::descriptor() {
  ::protobuf_usage_5fstats_2fusage_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_usage_5fstats_2fusage_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stats_VirtualKeyboardStats& Stats_VirtualKeyboardStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_usage_5fstats_2fusage_5fstats_2eproto::scc_info_Stats_VirtualKeyboardStats.base);
  return *internal_default_instance();
}


void Stats_VirtualKeyboardStats::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  touch_event_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    keyboard_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stats_VirtualKeyboardStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string keyboard_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyboard_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyboard_name().data(), static_cast<int>(this->keyboard_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.usage_stats.Stats.VirtualKeyboardStats.keyboard_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mozc.usage_stats.Stats.TouchEventStats touch_event_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_touch_event_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.usage_stats.Stats.VirtualKeyboardStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.usage_stats.Stats.VirtualKeyboardStats)
  return false;
#undef DO_
}

void Stats_VirtualKeyboardStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string keyboard_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyboard_name().data(), static_cast<int>(this->keyboard_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.usage_stats.Stats.VirtualKeyboardStats.keyboard_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->keyboard_name(), output);
  }

  // repeated .mozc.usage_stats.Stats.TouchEventStats touch_event_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->touch_event_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->touch_event_stats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.usage_stats.Stats.VirtualKeyboardStats)
}

::google::protobuf::uint8* Stats_VirtualKeyboardStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string keyboard_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyboard_name().data(), static_cast<int>(this->keyboard_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.usage_stats.Stats.VirtualKeyboardStats.keyboard_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keyboard_name(), target);
  }

  // repeated .mozc.usage_stats.Stats.TouchEventStats touch_event_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->touch_event_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->touch_event_stats(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.usage_stats.Stats.VirtualKeyboardStats)
  return target;
}

size_t Stats_VirtualKeyboardStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mozc.usage_stats.Stats.TouchEventStats touch_event_stats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->touch_event_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->touch_event_stats(static_cast<int>(i)));
    }
  }

  // optional string keyboard_name = 1;
  if (has_keyboard_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keyboard_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stats_VirtualKeyboardStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  GOOGLE_DCHECK_NE(&from, this);
  const Stats_VirtualKeyboardStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stats_VirtualKeyboardStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.usage_stats.Stats.VirtualKeyboardStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.usage_stats.Stats.VirtualKeyboardStats)
    MergeFrom(*source);
  }
}

void Stats_VirtualKeyboardStats::MergeFrom(const Stats_VirtualKeyboardStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  touch_event_stats_.MergeFrom(from.touch_event_stats_);
  if (from.has_keyboard_name()) {
    set_has_keyboard_name();
    keyboard_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyboard_name_);
  }
}

void Stats_VirtualKeyboardStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats_VirtualKeyboardStats::CopyFrom(const Stats_VirtualKeyboardStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats_VirtualKeyboardStats::IsInitialized() const {
  return true;
}

void Stats_VirtualKeyboardStats::Swap(Stats_VirtualKeyboardStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stats_VirtualKeyboardStats::InternalSwap(Stats_VirtualKeyboardStats* other) {
  using std::swap;
  CastToBase(&touch_event_stats_)->InternalSwap(CastToBase(&other->touch_event_stats_));
  keyboard_name_.Swap(&other->keyboard_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Stats_VirtualKeyboardStats::GetMetadata() const {
  protobuf_usage_5fstats_2fusage_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_usage_5fstats_2fusage_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Stats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stats::kNameFieldNumber;
const int Stats::kTypeFieldNumber;
const int Stats::kCountFieldNumber;
const int Stats::kTotalTimeFieldNumber;
const int Stats::kNumTimingsFieldNumber;
const int Stats::kAvgTimeFieldNumber;
const int Stats::kMinTimeFieldNumber;
const int Stats::kMaxTimeFieldNumber;
const int Stats::kIntValueFieldNumber;
const int Stats::kBooleanValueFieldNumber;
const int Stats::kVirtualKeyboardStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stats::Stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_usage_5fstats_2fusage_5fstats_2eproto::scc_info_Stats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.usage_stats.Stats)
}
Stats::Stats(const Stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      virtual_keyboard_stats_(from.virtual_keyboard_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_time_) -
    reinterpret_cast<char*>(&type_)) + sizeof(total_time_));
  // @@protoc_insertion_point(copy_constructor:mozc.usage_stats.Stats)
}

void Stats::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_time_) -
      reinterpret_cast<char*>(&type_)) + sizeof(total_time_));
}

Stats::~Stats() {
  // @@protoc_insertion_point(destructor:mozc.usage_stats.Stats)
  SharedDtor();
}

void Stats::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Stats::descriptor() {
  ::protobuf_usage_5fstats_2fusage_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_usage_5fstats_2fusage_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stats& Stats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_usage_5fstats_2fusage_5fstats_2eproto::scc_info_Stats.base);
  return *internal_default_instance();
}


void Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.usage_stats.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtual_keyboard_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&int_value_) -
        reinterpret_cast<char*>(&type_)) + sizeof(int_value_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&boolean_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_time_) -
        reinterpret_cast<char*>(&boolean_value_)) + sizeof(total_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.usage_stats.Stats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.usage_stats.Stats.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mozc.usage_stats.Stats.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::usage_stats::Stats_Type_IsValid(value)) {
            set_type(static_cast< ::mozc::usage_stats::Stats_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_timings = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_num_timings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_timings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_avg_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_min_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_max_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 int_value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_int_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool boolean_value = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_boolean_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolean_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 total_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_total_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mozc.usage_stats.Stats.VirtualKeyboardStats virtual_keyboard_stats = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_virtual_keyboard_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.usage_stats.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.usage_stats.Stats)
  return false;
#undef DO_
}

void Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.usage_stats.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.usage_stats.Stats.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .mozc.usage_stats.Stats.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional uint32 num_timings = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_timings(), output);
  }

  // optional uint32 avg_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->avg_time(), output);
  }

  // optional uint32 min_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->min_time(), output);
  }

  // optional uint32 max_time = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_time(), output);
  }

  // optional int32 int_value = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->int_value(), output);
  }

  // optional bool boolean_value = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->boolean_value(), output);
  }

  // optional uint64 total_time = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->total_time(), output);
  }

  // repeated .mozc.usage_stats.Stats.VirtualKeyboardStats virtual_keyboard_stats = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->virtual_keyboard_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->virtual_keyboard_stats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.usage_stats.Stats)
}

::google::protobuf::uint8* Stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.usage_stats.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.usage_stats.Stats.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .mozc.usage_stats.Stats.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional uint32 num_timings = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_timings(), target);
  }

  // optional uint32 avg_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->avg_time(), target);
  }

  // optional uint32 min_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->min_time(), target);
  }

  // optional uint32 max_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_time(), target);
  }

  // optional int32 int_value = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->int_value(), target);
  }

  // optional bool boolean_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->boolean_value(), target);
  }

  // optional uint64 total_time = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->total_time(), target);
  }

  // repeated .mozc.usage_stats.Stats.VirtualKeyboardStats virtual_keyboard_stats = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->virtual_keyboard_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->virtual_keyboard_stats(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.usage_stats.Stats)
  return target;
}

size_t Stats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.usage_stats.Stats)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_type()) {
    // required .mozc.usage_stats.Stats.Type type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.usage_stats.Stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .mozc.usage_stats.Stats.Type type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .mozc.usage_stats.Stats.VirtualKeyboardStats virtual_keyboard_stats = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->virtual_keyboard_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->virtual_keyboard_stats(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 252u) {
    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 num_timings = 4;
    if (has_num_timings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_timings());
    }

    // optional uint32 avg_time = 5;
    if (has_avg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_time());
    }

    // optional uint32 min_time = 6;
    if (has_min_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_time());
    }

    // optional uint32 max_time = 7;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_time());
    }

    // optional int32 int_value = 8;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool boolean_value = 9;
    if (has_boolean_value()) {
      total_size += 1 + 1;
    }

    // optional uint64 total_time = 10;
    if (has_total_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.usage_stats.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const Stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.usage_stats.Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.usage_stats.Stats)
    MergeFrom(*source);
  }
}

void Stats::MergeFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.usage_stats.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  virtual_keyboard_stats_.MergeFrom(from.virtual_keyboard_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_timings_ = from.num_timings_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_time_ = from.avg_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_time_ = from.min_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_time_ = from.max_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      int_value_ = from.int_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      boolean_value_ = from.boolean_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      total_time_ = from.total_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.usage_stats.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats::CopyFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.usage_stats.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Stats::Swap(Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stats::InternalSwap(Stats* other) {
  using std::swap;
  CastToBase(&virtual_keyboard_stats_)->InternalSwap(CastToBase(&other->virtual_keyboard_stats_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(count_, other->count_);
  swap(num_timings_, other->num_timings_);
  swap(avg_time_, other->avg_time_);
  swap(min_time_, other->min_time_);
  swap(max_time_, other->max_time_);
  swap(int_value_, other->int_value_);
  swap(boolean_value_, other->boolean_value_);
  swap(total_time_, other->total_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Stats::GetMetadata() const {
  protobuf_usage_5fstats_2fusage_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_usage_5fstats_2fusage_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace usage_stats
}  // namespace mozc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::usage_stats::Stats_DoubleValueStats* Arena::CreateMaybeMessage< ::mozc::usage_stats::Stats_DoubleValueStats >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::usage_stats::Stats_DoubleValueStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::usage_stats::Stats_TouchEventStats* Arena::CreateMaybeMessage< ::mozc::usage_stats::Stats_TouchEventStats >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::usage_stats::Stats_TouchEventStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::usage_stats::Stats_VirtualKeyboardStats* Arena::CreateMaybeMessage< ::mozc::usage_stats::Stats_VirtualKeyboardStats >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::usage_stats::Stats_VirtualKeyboardStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::usage_stats::Stats* Arena::CreateMaybeMessage< ::mozc::usage_stats::Stats >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::usage_stats::Stats >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
