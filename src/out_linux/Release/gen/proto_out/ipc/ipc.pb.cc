// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc/ipc.proto

#include "ipc/ipc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace mozc {
namespace ipc {
class IPCPathInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IPCPathInfo>
      _instance;
} _IPCPathInfo_default_instance_;
}  // namespace ipc
}  // namespace mozc
namespace protobuf_ipc_2fipc_2eproto {
static void InitDefaultsIPCPathInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.DefaultConstruct();
  *::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get_mutable() = ::std::string("0.0.0.0", 7);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get_mutable());
  {
    void* ptr = &::mozc::ipc::_IPCPathInfo_default_instance_;
    new (ptr) ::mozc::ipc::IPCPathInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::ipc::IPCPathInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IPCPathInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIPCPathInfo}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_IPCPathInfo.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::ipc::IPCPathInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::ipc::IPCPathInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::ipc::IPCPathInfo, protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::ipc::IPCPathInfo, product_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::ipc::IPCPathInfo, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::ipc::IPCPathInfo, process_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mozc::ipc::IPCPathInfo, thread_id_),
  4,
  1,
  0,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::mozc::ipc::IPCPathInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mozc::ipc::_IPCPathInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ipc/ipc.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ripc/ipc.proto\022\010mozc.ipc\"\206\001\n\013IPCPathInf"
      "o\022\033\n\020protocol_version\030\004 \001(\r:\0010\022 \n\017produc"
      "t_version\030\005 \001(\t:\0070.0.0.0\022\013\n\003key\030\001 \001(\t\022\025\n"
      "\nprocess_id\030\002 \001(\r:\0010\022\024\n\tthread_id\030\003 \001(\r:"
      "\0010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ipc/ipc.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ipc_2fipc_2eproto
namespace mozc {
namespace ipc {

// ===================================================================

void IPCPathInfo::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IPCPathInfo::kProtocolVersionFieldNumber;
const int IPCPathInfo::kProductVersionFieldNumber;
const int IPCPathInfo::kKeyFieldNumber;
const int IPCPathInfo::kProcessIdFieldNumber;
const int IPCPathInfo::kThreadIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IPCPathInfo::IPCPathInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ipc_2fipc_2eproto::scc_info_IPCPathInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.ipc.IPCPathInfo)
}
IPCPathInfo::IPCPathInfo(const IPCPathInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  product_version_.UnsafeSetDefault(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get());
  if (from.has_product_version()) {
    product_version_.AssignWithDefault(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get(), from.product_version_);
  }
  ::memcpy(&process_id_, &from.process_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocol_version_) -
    reinterpret_cast<char*>(&process_id_)) + sizeof(protocol_version_));
  // @@protoc_insertion_point(copy_constructor:mozc.ipc.IPCPathInfo)
}

void IPCPathInfo::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_version_.UnsafeSetDefault(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get());
  ::memset(&process_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocol_version_) -
      reinterpret_cast<char*>(&process_id_)) + sizeof(protocol_version_));
}

IPCPathInfo::~IPCPathInfo() {
  // @@protoc_insertion_point(destructor:mozc.ipc.IPCPathInfo)
  SharedDtor();
}

void IPCPathInfo::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_version_.DestroyNoArena(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get());
}

void IPCPathInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IPCPathInfo::descriptor() {
  ::protobuf_ipc_2fipc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ipc_2fipc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IPCPathInfo& IPCPathInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ipc_2fipc_2eproto::scc_info_IPCPathInfo.base);
  return *internal_default_instance();
}


void IPCPathInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.ipc.IPCPathInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      product_version_.UnsafeMutablePointer()->assign(*&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get());
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&process_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&protocol_version_) -
        reinterpret_cast<char*>(&process_id_)) + sizeof(protocol_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IPCPathInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.ipc.IPCPathInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.ipc.IPCPathInfo.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 process_id = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_process_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 thread_id = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_thread_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 protocol_version = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string product_version = 5 [default = "0.0.0.0"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product_version().data(), static_cast<int>(this->product_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.ipc.IPCPathInfo.product_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.ipc.IPCPathInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.ipc.IPCPathInfo)
  return false;
#undef DO_
}

void IPCPathInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.ipc.IPCPathInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.ipc.IPCPathInfo.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint32 process_id = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->process_id(), output);
  }

  // optional uint32 thread_id = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->thread_id(), output);
  }

  // optional uint32 protocol_version = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protocol_version(), output);
  }

  // optional string product_version = 5 [default = "0.0.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_version().data(), static_cast<int>(this->product_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.ipc.IPCPathInfo.product_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->product_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.ipc.IPCPathInfo)
}

::google::protobuf::uint8* IPCPathInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.ipc.IPCPathInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.ipc.IPCPathInfo.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint32 process_id = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->process_id(), target);
  }

  // optional uint32 thread_id = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->thread_id(), target);
  }

  // optional uint32 protocol_version = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protocol_version(), target);
  }

  // optional string product_version = 5 [default = "0.0.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_version().data(), static_cast<int>(this->product_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.ipc.IPCPathInfo.product_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->product_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.ipc.IPCPathInfo)
  return target;
}

size_t IPCPathInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.ipc.IPCPathInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string product_version = 5 [default = "0.0.0.0"];
    if (has_product_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_version());
    }

    // optional uint32 process_id = 2 [default = 0];
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process_id());
    }

    // optional uint32 thread_id = 3 [default = 0];
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_id());
    }

    // optional uint32 protocol_version = 4 [default = 0];
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPCPathInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.ipc.IPCPathInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IPCPathInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IPCPathInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.ipc.IPCPathInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.ipc.IPCPathInfo)
    MergeFrom(*source);
  }
}

void IPCPathInfo::MergeFrom(const IPCPathInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.ipc.IPCPathInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_product_version();
      product_version_.AssignWithDefault(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get(), from.product_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      process_id_ = from.process_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      thread_id_ = from.thread_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      protocol_version_ = from.protocol_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IPCPathInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.ipc.IPCPathInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPCPathInfo::CopyFrom(const IPCPathInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.ipc.IPCPathInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPCPathInfo::IsInitialized() const {
  return true;
}

void IPCPathInfo::Swap(IPCPathInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IPCPathInfo::InternalSwap(IPCPathInfo* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  product_version_.Swap(&other->product_version_, &::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get(),
    GetArenaNoVirtual());
  swap(process_id_, other->process_id_);
  swap(thread_id_, other->thread_id_);
  swap(protocol_version_, other->protocol_version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IPCPathInfo::GetMetadata() const {
  protobuf_ipc_2fipc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ipc_2fipc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ipc
}  // namespace mozc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mozc::ipc::IPCPathInfo* Arena::CreateMaybeMessage< ::mozc::ipc::IPCPathInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mozc::ipc::IPCPathInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
