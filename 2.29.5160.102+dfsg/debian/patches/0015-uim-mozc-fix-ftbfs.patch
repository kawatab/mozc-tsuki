From: Kentaro Hayashi <kenhys@gmail.com>
Date: Thu, 14 Nov 2024 20:36:26 +0900
Subject: unix/uim: try to fix compile error

Description: unix/uim: try to fix compile error
  * use std::string
  * replace arraysize with std::size
  * replace DISALLOW_COPY_AND_ASSIGN(KeyTranslator);
  * use uint64_t, int32_t
Author: Kentaro Hayashi <kenhys@xdump.org>
Forwarded: not-needed
Last-Update: 2024-11-17


Signed-off-by: Kentaro Hayashi <kenhys@gmail.com>
---
 src/unix/uim/key_translator.cc | 14 +++++++-------
 src/unix/uim/key_translator.h  |  7 ++++---
 src/unix/uim/mozc.cc           | 34 +++++++++++++++++-----------------
 3 files changed, 28 insertions(+), 27 deletions(-)

diff --git a/src/unix/uim/key_translator.cc b/src/unix/uim/key_translator.cc
index b1c9be8..e581a1b 100644
--- a/src/unix/uim/key_translator.cc
+++ b/src/unix/uim/key_translator.cc
@@ -325,7 +325,7 @@ bool KeyTranslator::Translate(unsigned int keyval,
   DCHECK(out_event) << "out_event is NULL";
   out_event->Clear();
 
-  string kana_key_string;
+  std::string kana_key_string;
   if ((method == config::Config::KANA) && IsKanaAvailable(
           keyval, keycode, modifiers, layout_is_jp, &kana_key_string)) {
     out_event->set_key_code(keyval);
@@ -367,28 +367,28 @@ bool KeyTranslator::Translate(unsigned int keyval,
 }
 
 void KeyTranslator::Init() {
-  for (int i = 0; i < arraysize(special_key_map); ++i) {
+  for (int i = 0; i < std::size(special_key_map); ++i) {
     CHECK(special_key_map_.insert(
         std::make_pair(special_key_map[i].from,
                        special_key_map[i].to)).second);
   }
-  for (int i = 0; i < arraysize(modifier_key_map); ++i) {
+  for (int i = 0; i < std::size(modifier_key_map); ++i) {
     CHECK(modifier_key_map_.insert(
         std::make_pair(modifier_key_map[i].from,
                        modifier_key_map[i].to)).second);
   }
-  for (int i = 0; i < arraysize(modifier_mask_map); ++i) {
+  for (int i = 0; i < std::size(modifier_mask_map); ++i) {
     CHECK(modifier_mask_map_.insert(
         std::make_pair(modifier_mask_map[i].from,
                        modifier_mask_map[i].to)).second);
   }
-  for (int i = 0; i < arraysize(kana_map_jp); ++i) {
+  for (int i = 0; i < std::size(kana_map_jp); ++i) {
     CHECK(kana_map_jp_.insert(
         std::make_pair(kana_map_jp[i].code,
                        std::make_pair(kana_map_jp[i].no_shift,    
                                       kana_map_jp[i].shift))).second);
   }
-  for (int i = 0; i < arraysize(kana_map_us); ++i) {
+  for (int i = 0; i < std::size(kana_map_us); ++i) {
     CHECK(kana_map_us_.insert(
         std::make_pair(kana_map_us[i].code,
                        std::make_pair(kana_map_us[i].no_shift,
@@ -412,7 +412,7 @@ bool KeyTranslator::IsKanaAvailable(unsigned int keyval,
                                     unsigned int keycode,
                                     unsigned int modifiers,
                                     bool layout_is_jp,
-                                    string *out) const {
+                                    std::string *out) const {
   if ((modifiers & UMod_Control) || (modifiers & UMod_Alt)) {
     return false;
   }
diff --git a/src/unix/uim/key_translator.h b/src/unix/uim/key_translator.h
index 2649cc5..859c7bd 100644
--- a/src/unix/uim/key_translator.h
+++ b/src/unix/uim/key_translator.h
@@ -49,6 +49,8 @@ namespace uim {
 class KeyTranslator {
  public:
   KeyTranslator();
+  KeyTranslator(const KeyTranslator&) = delete;
+  KeyTranslator& operator=(const KeyTranslator&) = delete;
   virtual ~KeyTranslator();
 
   // Converts ibus keycode to Mozc key code and stores them on |out_event|.
@@ -63,7 +65,7 @@ class KeyTranslator {
  private:
   typedef hash_map<unsigned int, commands::KeyEvent::SpecialKey> SpecialKeyMap;
   typedef std::map<unsigned int, commands::KeyEvent::ModifierKey> ModifierKeyMap;
-  typedef std::map<unsigned int, std::pair<string, string> > KanaMap;
+  typedef std::map<unsigned int, std::pair<std::string, std::string> > KanaMap;
 
   // Returns true iff key is modifier key such as SHIFT, ALT, or CAPSLOCK.
   bool IsModifierKey(unsigned int keyval,
@@ -79,7 +81,7 @@ class KeyTranslator {
                        unsigned int keycode,
                        unsigned int modifiers,
                        bool layout_is_jp,
-                       string *out) const;
+                       std::string *out) const;
 
 
   // Returns true iff key is ASCII such as '0', 'A', or '!'.
@@ -102,7 +104,6 @@ class KeyTranslator {
   KanaMap kana_map_jp_;  // mapping for JP keyboard.
   KanaMap kana_map_us_;  // mapping for US keyboard.
 
-  DISALLOW_COPY_AND_ASSIGN(KeyTranslator);
 };
 
 }  // namespace uim
diff --git a/src/unix/uim/mozc.cc b/src/unix/uim/mozc.cc
index ceb16bd..ba2c56e 100644
--- a/src/unix/uim/mozc.cc
+++ b/src/unix/uim/mozc.cc
@@ -67,14 +67,14 @@ using __gnu_cxx::hash_map;
 static char **argv;
 
 // for every 5 minutes, call SyncData
-const uint64 kSyncDataInterval = 5 * 60;
+const uint64_t kSyncDataInterval = 5 * 60;
 #if USE_CASCADING_CANDIDATES
 // An ID for a candidate which is not associated with a text.
-const int32 kBadCandidateId = -1;
+const int32_t kBadCandidateId = -1;
 #endif
 
-uint64 GetTime() {
-  return static_cast<uint64>(time(NULL));
+uint64_t GetTime() {
+  return static_cast<uint64_t>(time(NULL));
 }
 
 namespace mozc {
@@ -93,9 +93,9 @@ static struct context_slot_ {
   bool need_cand_reactivate;
   int prev_page;
   int cand_nr_before;
-  uint64 last_sync_time;
+  uint64_t last_sync_time;
 #if USE_CASCADING_CANDIDATES
-  vector<int32> *unique_candidate_ids;
+  vector<int32_t> *unique_candidate_ids;
 #endif
   config::Config::PreeditMethod preedit_method;
 } *context_slot;
@@ -126,7 +126,7 @@ SyncData(int id, bool force)
   if (context_slot[id].session == NULL)
     return;
 
-  const uint64 current_time = GetTime();
+  const uint64_t current_time = GetTime();
   if (force ||
       (current_time >= context_slot[id].last_sync_time &&
        current_time - context_slot[id].last_sync_time >= kSyncDataInterval)) {
@@ -173,8 +173,8 @@ insert_cursor(uim_lisp segs, const commands::Preedit::Segment &segment, int attr
 {
   size_t len = segment.value_length();
 
-  auto former = string(Util::Utf8SubString(segment.value(), 0, pos));
-  auto latter = string(Util::Utf8SubString(segment.value(), pos, len));
+  auto former = std::string(Util::Utf8SubString(segment.value(), 0, pos));
+  auto latter = std::string(Util::Utf8SubString(segment.value(), pos, len));
 
   uim_lisp seg_f, seg_c, seg_l;
   if (pos == 0) {
@@ -316,7 +316,7 @@ update_candidates(uim_lisp mc_, int id)
     context_slot[id].unique_candidate_ids->clear();
     for (int i = 0; i < candidates.candidate_size(); ++i) {
       if (candidates.candidate(i).has_id()) {
-        const int32 cand_id = candidates.candidate(i).id();
+        const int32_t cand_id = candidates.candidate(i).id();
         context_slot[id].unique_candidate_ids->push_back(cand_id);
       } else {
         // The parent node of the cascading window does not have an id since the
@@ -380,7 +380,7 @@ execute_callback(uim_lisp mc_, int id)
 	  !NULLP(latter = uim_scm_callf("ustr-latter-seq", "o", ustr))) {
 	  uim_lisp str = CAR(latter);
 
-          string text = REFER_C_STR(str);
+          std::string text = REFER_C_STR(str);
           session_command.set_text(text);
       } else {
 #if 0
@@ -389,7 +389,7 @@ execute_callback(uim_lisp mc_, int id)
         ustr = uim_scm_callf("im-acquire-text", "oyyyi", mc_, "primary", "cursor", "line", 0);
 	if (TRUEP(ustr) && !NULLP(former = uim_scm_callf("ustr-former-seq", "o", ustr))) {
 	  uim_lisp str = CAR(former);
-	  string text = REFER_C_STR(str);
+          std::string text = REFER_C_STR(str);
 	  session_command.set_text(text);
 	  use_primary_text = 1;
 	} else
@@ -449,7 +449,7 @@ create_context(uim_lisp mc_)
   context_slot[id].cand_nr_before = 0;
   context_slot[id].prev_page = 0;
 #if USE_CASCADING_CANDIDATES
-  context_slot[id].unique_candidate_ids = new vector<int32>;
+  context_slot[id].unique_candidate_ids = new vector<int32_t>;
 #endif
 
   // Launch mozc_server
@@ -1037,11 +1037,11 @@ select_candidate(uim_lisp mc_, uim_lisp id_, uim_lisp idx_)
     return uim_scm_f();
 
 #if USE_CASCADING_CANDIDATES
-  const int32 cand_id = (*context_slot[id].unique_candidate_ids)[idx];
+  const int32_t cand_id = (*context_slot[id].unique_candidate_ids)[idx];
   if (cand_id == kBadCandidateId)
     return uim_scm_f();
 #else
-  const int32 cand_id = context_slot[id].output->candidates().candidate(idx).id();
+  const int32_t cand_id = context_slot[id].output->candidates().candidate(idx).id();
 #endif
 
   commands::SessionCommand command;
@@ -1126,14 +1126,14 @@ reconvert(uim_lisp mc_, uim_lisp id_)
       !NULLP(latter = uim_scm_callf("ustr-latter-seq", "o", ustr))) {
     uim_lisp str = CAR(latter);
 
-    string text = REFER_C_STR(str);
+    std::string text = REFER_C_STR(str);
     session_command.set_text(text);
   } else {
     ustr = uim_scm_callf("im-acquire-text", "oyyyi", mc_, "primary", "cursor", "line", 0);
     if (TRUEP(ustr) &&
 	!NULLP(former = uim_scm_callf("ustr-former-seq", "o", ustr))) {
       uim_lisp str = CAR(former);
-      string text = REFER_C_STR(str);
+      std::string text = REFER_C_STR(str);
       session_command.set_text(text);
       use_primary_text = 1;
     } else
