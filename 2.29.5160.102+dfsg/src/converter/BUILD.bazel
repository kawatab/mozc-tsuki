# Copyright 2010-2021, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

load("//bazel:stubs.bzl", "bzl_library")
load(
    "//:build_defs.bzl",
    "mozc_cc_binary",
    "mozc_cc_library",
    "mozc_cc_test",
    "mozc_py_binary",
)

package(default_visibility = [
    "//:__subpackages__",
])

mozc_cc_library(
    name = "segments",
    srcs = [
        "segments.cc",
    ],
    hdrs = ["segments.h"],
    visibility = [
        "//:__subpackages__",
    ],
    deps = [
        ":lattice",
        "//base:logging",
        "//base:number_util",
        "//base/container:freelist",
        "//base/strings:assign",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
    ],
)

mozc_cc_test(
    name = "segments_test",
    size = "small",
    srcs = ["segments_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":segments",
        "//base:number_util",
        "//base:system_util",
        "//base:util",
        "//config:config_handler",
        "//testing:gunit_main",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
    ],
)

mozc_cc_library(
    name = "segments_matchers",
    testonly = 1,
    srcs = ["segments_matchers.h"],
    hdrs = ["segments_matchers.h"],
    deps = [
        ":segments",
        "//testing:gunit",
        "@com_google_absl//absl/strings:str_format",
    ],
)

mozc_cc_test(
    name = "segments_matchers_test",
    srcs = ["segments_matchers_test.cc"],
    deps = [
        ":segments_matchers",
        "//testing:gunit_main",
    ],
)

mozc_cc_library(
    name = "node",
    hdrs = ["node.h"],
    visibility = [
        "//data_manager:__pkg__",
        "//dictionary:__subpackages__",
    ],
    deps = [
        "//base:port",
        "//dictionary:dictionary_token",
    ],
)

mozc_cc_library(
    name = "node_allocator",
    hdrs = ["node_allocator.h"],
    visibility = ["//dictionary:__subpackages__"],
    deps = [
        ":node",
        "//base:logging",
        "//base/container:freelist",
    ],
)

mozc_cc_library(
    name = "node_list_builder",
    hdrs = ["node_list_builder.h"],
    deps = [
        ":node",
        ":node_allocator",
        "//base:logging",
        "//base:port",
        "//base:util",
        "//base/container:trie",
        "//dictionary:dictionary_interface",
        "//dictionary:dictionary_token",
        "//protocol:commands_cc_proto",
        "//request:conversion_request",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_library(
    name = "connector",
    srcs = ["connector.cc"],
    hdrs = ["connector.h"],
    deps = [
        "//base:logging",
        "//base:util",
        "//data_manager:data_manager_interface",
        "//storage/louds:simple_succinct_bit_vector_index",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
    ],
)

mozc_cc_test(
    name = "connector_test",
    size = "small",
    srcs = ["connector_test.cc"],
    data = [
        "//data/test/dictionary:connection_single_column.txt",
        "//data_manager/testing:mozc_dataset_for_testing@connection",
    ],
    requires_full_emulation = False,
    deps = [
        ":connector",
        "//base:logging",
        "//base:mmap",
        "//data_manager:connection_file_reader",
        "//testing:gunit_main",
        "//testing:mozctest",
    ],
)

mozc_cc_library(
    name = "nbest_generator",
    srcs = [
        "nbest_generator.cc",
    ],
    hdrs = ["nbest_generator.h"],
    deps = [
        ":candidate_filter",
        ":connector",
        ":lattice",
        ":node",
        ":segmenter",
        ":segments",
        "//base:logging",
        "//base/container:freelist",
        "//dictionary:pos_matcher",
        "//dictionary:suppression_dictionary",
        "//prediction:suggestion_filter",
        "//request:conversion_request",
    ],
)

mozc_cc_test(
    name = "nbest_generator_test",
    srcs = [
        "nbest_generator_test.cc",
    ],
    requires_full_emulation = False,
    deps = [
        ":connector",
        ":immutable_converter_no_factory",
        ":nbest_generator",
        ":segmenter",
        ":segments",
        "//base:logging",
        "//base:port",
        "//data_manager:data_manager_interface",
        "//data_manager/testing:mock_data_manager",
        "//dictionary:dictionary_impl",
        "//dictionary:dictionary_interface",
        "//dictionary:pos_group",
        "//dictionary:suffix_dictionary",
        "//dictionary:suppression_dictionary",
        "//dictionary:user_dictionary_stub",
        "//dictionary/system:system_dictionary",
        "//dictionary/system:value_dictionary",
        "//prediction:suggestion_filter",
        "//request:conversion_request",
        "//testing:gunit_main",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_library(
    name = "candidate_filter",
    srcs = [
        "candidate_filter.cc",
    ],
    hdrs = ["candidate_filter.h"],
    deps = [
        ":node",
        ":segments",
        "//base:logging",
        "//base:util",
        "//dictionary:pos_matcher",
        "//dictionary:suppression_dictionary",
        "//prediction:suggestion_filter",
        "//protocol:commands_cc_proto",
        "//request:conversion_request",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
    ],
)

mozc_cc_test(
    name = "candidate_filter_test",
    size = "small",
    srcs = ["candidate_filter_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":candidate_filter",
        ":node",
        ":segments",
        "//base/container:freelist",
        "//data_manager/testing:mock_data_manager",
        "//dictionary:pos_matcher",
        "//dictionary:suppression_dictionary",
        "//prediction:suggestion_filter",
        "//protocol:commands_cc_proto",
        "//request:conversion_request",
        "//session:request_test_util",
        "//testing:gunit_main",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
    ],
)

mozc_cc_library(
    name = "segmenter",
    srcs = ["segmenter.cc"],
    hdrs = ["segmenter.h"],
    deps = [
        ":node",
        "//base:logging",
        "//base/container:bitarray",
        "//data_manager:data_manager_interface",
    ],
)

mozc_cc_library(
    name = "lattice",
    srcs = [
        "lattice.cc",
    ],
    hdrs = ["lattice.h"],
    visibility = ["//visibility:private"],
    deps = [
        ":node",
        ":node_allocator",
        "//base:logging",
        "//base:singleton",
        "//base/strings:unicode",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_test(
    name = "lattice_test",
    size = "small",
    srcs = ["lattice_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":lattice",
        ":node",
        "//base:port",
        "//testing:gunit_main",
        "@com_google_absl//absl/container:btree",
    ],
)

mozc_cc_library(
    name = "immutable_converter_interface",
    srcs = ["immutable_converter_interface.cc"],
    hdrs = ["immutable_converter_interface.h"],
    visibility = [
        "//:__subpackages__",
    ],
    deps = [
        ":segments",
        "//base:logging",
        "//request:conversion_request",
        "@com_google_absl//absl/base:core_headers",
    ],
)

mozc_cc_library(
    name = "immutable_converter_no_factory",
    srcs = [
        "immutable_converter.cc",
    ],
    hdrs = ["immutable_converter.h"],
    visibility = [
        "//engine:__pkg__",
        "//prediction:__pkg__",
    ],
    deps = [
        ":connector",
        ":immutable_converter_interface",
        ":key_corrector",
        ":lattice",
        ":nbest_generator",
        ":node",
        ":node_allocator",
        ":node_list_builder",
        ":segmenter",
        ":segments",
        "//base:japanese_util",
        "//base:logging",
        "//base:util",
        "//dictionary:dictionary_interface",
        "//dictionary:pos_group",
        "//dictionary:pos_matcher",
        "//dictionary:suppression_dictionary",
        "//prediction:suggestion_filter",
        "//protocol:commands_cc_proto",
        "//protocol:config_cc_proto",
        "//request:conversion_request",
        "//testing:gunit_prod",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_test(
    name = "immutable_converter_test",
    size = "small",
    srcs = [
        "immutable_converter_test.cc",
    ],
    requires_full_emulation = False,
    deps = [
        ":connector",
        ":immutable_converter_no_factory",
        ":lattice",
        ":segmenter",
        ":segments",
        "//base:logging",
        "//base:util",
        "//data_manager:data_manager_interface",
        "//data_manager/testing:mock_data_manager",
        "//dictionary:dictionary_impl",
        "//dictionary:dictionary_interface",
        "//dictionary:pos_group",
        "//dictionary:suffix_dictionary",
        "//dictionary:suppression_dictionary",
        "//dictionary:user_dictionary_stub",
        "//dictionary/system:system_dictionary",
        "//dictionary/system:value_dictionary",
        "//prediction:suggestion_filter",
        "//protocol:commands_cc_proto",
        "//request:conversion_request",
        "//testing:gunit_main",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_library(
    name = "converter_interface",
    hdrs = ["converter_interface.h"],
    deps = [
        ":segments",
        "//base:port",
        "//request:conversion_request",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
    ],
)

mozc_cc_library(
    name = "converter",
    srcs = [
        "converter.cc",
    ],
    hdrs = ["converter.h"],
    visibility = [
        "//engine:__pkg__",
        "//rewriter:__pkg__",
        "//session:__pkg__",
    ],
    deps = [
        ":converter_interface",
        ":immutable_converter_interface",
        ":segments",
        "//base:japanese_util",
        "//base:logging",
        "//base:util",
        "//base/strings:assign",
        "//composer",
        "//dictionary:pos_matcher",
        "//dictionary:suppression_dictionary",
        "//prediction:predictor_interface",
        "//protocol:commands_cc_proto",
        "//request:conversion_request",
        "//rewriter:rewriter_interface",
        "//testing:gunit_prod",
        "//transliteration",
        "//usage_stats",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
    ],
)

mozc_cc_test(
    name = "converter_test",
    size = "small",
    timeout = "moderate",
    srcs = ["converter_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":connector",
        ":converter",
        ":converter_interface",
        ":immutable_converter_interface",
        ":immutable_converter_no_factory",
        ":segmenter",
        ":segments",
        "//base:logging",
        "//base:util",
        "//composer",
        "//composer:table",
        "//config:config_handler",
        "//data_manager:data_manager_interface",
        "//data_manager/testing:mock_data_manager",
        "//dictionary:dictionary_impl",
        "//dictionary:dictionary_interface",
        "//dictionary:dictionary_mock",
        "//dictionary:pos_group",
        "//dictionary:pos_matcher",
        "//dictionary:suffix_dictionary",
        "//dictionary:suppression_dictionary",
        "//dictionary:user_dictionary",
        "//dictionary:user_dictionary_stub",
        "//dictionary:user_pos",
        "//dictionary/system:system_dictionary",
        "//dictionary/system:value_dictionary",
        "//engine",
        "//engine:engine_interface",
        "//engine:mock_data_engine_factory",
        "//prediction:dictionary_predictor",
        "//prediction:predictor",
        "//prediction:predictor_interface",
        "//prediction:suggestion_filter",
        "//prediction:user_history_predictor",
        "//protocol:commands_cc_proto",
        "//protocol:config_cc_proto",
        "//request:conversion_request",
        "//rewriter",
        "//rewriter:rewriter_interface",
        "//session:request_test_util",
        "//testing:gunit_main",
        "//testing:mozctest",
        "//transliteration",
        "//usage_stats",
        "//usage_stats:usage_stats_testing_util",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_test(
    name = "converter_regression_test",
    size = "medium",
    srcs = ["converter_regression_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":converter_interface",
        ":segments",
        "//base:file_util",
        "//base:system_util",
        "//composer",
        "//composer:table",
        "//config:config_handler",
        "//engine:engine_factory",
        "//engine:engine_interface",
        "//protocol:commands_cc_proto",
        "//protocol:config_cc_proto",
        "//request:conversion_request",
        "//testing:gunit_main",
        "//testing:mozctest",
    ],
)

mozc_cc_library(
    name = "pos_id_printer",
    srcs = ["pos_id_printer.cc"],
    hdrs = ["pos_id_printer.h"],
    deps = [
        "//base:file_stream",
        "//base:logging",
        "//base:number_util",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_test(
    name = "pos_id_printer_test",
    size = "small",
    srcs = ["pos_id_printer_test.cc"],
    data = ["//data/test/dictionary:id.def"],
    requires_full_emulation = False,
    deps = [
        ":pos_id_printer",
        "//base:file_stream",
        "//testing:gunit_main",
        "//testing:mozctest",
    ],
)

mozc_cc_binary(
    name = "converter_main",
    testonly = True,
    srcs = ["converter_main.cc"],
    data = [
        "//data/dictionary_oss:id.def",
        "//data/test/dictionary:id.def",
        "//data_manager/testing:mock_mozc.data",
        "//engine:eval_engine_data",
    ],
    deps = [
        ":converter_interface",
        ":lattice",
        ":pos_id_printer",
        ":segments",
        "//base:file_stream",
        "//base:file_util",
        "//base:init_mozc",
        "//base:logging",
        "//base:number_util",
        "//base:singleton",
        "//base:system_util",
        "//base/protobuf:text_format",
        "//composer",
        "//composer:table",
        "//config:config_handler",
        "//data_manager",
        "//engine",
        "//engine:engine_interface",
        "//protocol:commands_cc_proto",
        "//protocol:config_cc_proto",
        "//request:conversion_request",
        "//session:request_test_util",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
    ],
)

mozc_cc_library(
    name = "gen_segmenter_bitarray",
    srcs = ["gen_segmenter_bitarray.cc"],
    hdrs = ["gen_segmenter_bitarray.h"],
    visibility = ["//data_manager:__subpackages__"],
    deps = [
        "//base:file_stream",
        "//base:logging",
        "//base/container:bitarray",
        "//protocol:segmenter_data_cc_proto",
        "@com_google_absl//absl/base:config",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/functional:any_invocable",
    ],
)

mozc_py_binary(
    name = "gen_segmenter_code",
    srcs = ["gen_segmenter_code.py"],
    visibility = ["//data_manager:__subpackages__"],
)

mozc_py_binary(
    name = "gen_boundary_data",
    srcs = ["gen_boundary_data.py"],
    visibility = ["//data_manager:__subpackages__"],
)

mozc_cc_library(
    name = "key_corrector",
    srcs = ["key_corrector.cc"],
    hdrs = ["key_corrector.h"],
    deps = [
        "//base:logging",
        "//base:util",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_test(
    name = "key_corrector_test",
    size = "small",
    srcs = ["key_corrector_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":key_corrector",
        "//base:port",
        "//testing:gunit_main",
    ],
)

mozc_cc_library(
    name = "converter_mock",
    testonly = True,
    hdrs = ["converter_mock.h"],
    deps = [
        ":converter_interface",
        "//testing:gunit",
    ],
)

mozc_py_binary(
    name = "gen_quality_regression_test_data",
    srcs = ["gen_quality_regression_test_data.py"],
)

mozc_cc_library(
    name = "quality_regression_util",
    srcs = ["quality_regression_util.cc"],
    hdrs = ["quality_regression_util.h"],
    deps = [
        ":converter_interface",
        ":segments",
        "//base:file_stream",
        "//base:logging",
        "//base:port",
        "//base:text_normalizer",
        "//base:util",
        "//composer",
        "//composer:table",
        "//protocol:commands_cc_proto",
        "//protocol:config_cc_proto",
        "//request:conversion_request",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_binary(
    name = "quality_regression_main",
    srcs = ["quality_regression_main.cc"],
    deps = [
        ":quality_regression_util",
        "//base:init_mozc",
        "//base:system_util",
        "//base/file:temp_dir",
        "//engine:eval_engine_factory",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ],
)

mozc_py_binary(
    name = "quality_regression",
    srcs = ["quality_regression.py"],
    deps = ["//build_tools:mozc_version_lib"],
)

mozc_cc_library(
    name = "quality_regression_test_lib",
    testonly = True,
    srcs = ["quality_regression_test_lib.cc"],
    hdrs = ["quality_regression_test_lib.h"],
    deps = [
        ":quality_regression_util",
        "//base:logging",
        "//base:port",
        "//testing:gunit",
        "//testing:mozctest",
        "@com_google_absl//absl/container:btree",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings:str_format",
    ],
)

bzl_library(
    name = "evalution_bzl",
    srcs = ["evaluation.bzl"],
    test_size = "small",
    visibility = ["//visibility:private"],
)
