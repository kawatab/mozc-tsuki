# Copyright 2010-2021, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

load(
    "//:build_defs.bzl",
    "mozc_macos_application",
    "mozc_macos_bundle",
    "mozc_objc_library",
    "mozc_objc_test",
    "mozc_py_binary",
    "mozc_select",
)
load(
    "//:config.bzl",
    "BRANDING",
    "MACOS_BUNDLE_ID_PREFIX",
)

package(default_visibility = ["//:__subpackages__"])

mozc_macos_application(
    name = "mozc_macos",
    additional_contents = mozc_select(
        default = {},
        macos = {
            "//renderer:mozc_renderer_macos": "Resources",
            "//server:mozc_server_macos": "Resources",
        },
        oss_macos = {
            "//gui/about_dialog:about_dialog_macos": "Resources",
            "//gui/config_dialog:config_dialog_macos": "Resources",
            "//gui/dictionary_tool:dictionary_tool_macos": "Resources",
            "//gui/error_message_dialog:error_message_dialog_macos": "Resources",
            "//gui/tool:mozc_prelauncher_macos": "Resources",
            "//gui/word_register_dialog:word_register_dialog_macos": "Resources",
            "//renderer:mozc_renderer_macos": "Resources",
            "//server:mozc_server_macos": "Resources",
        },
    ),
    app_icons = ["//data/images/mac:product_icon.icns"],
    bundle_id = MACOS_BUNDLE_ID_PREFIX,
    bundle_name = BRANDING,
    infoplists = ["Info.plist"],
    resources = [
        "//data/images/mac:direct.tiff",
        "//data/images/mac:full_ascii.tiff",
        "//data/images/mac:full_katakana.tiff",
        "//data/images/mac:half_ascii.tiff",
        "//data/images/mac:half_katakana.tiff",
        "//data/images/mac:hiragana.tiff",
        "//data/installer:credits_en.html",
    ],
    strings = [
        "English.lproj/InfoPlist.strings",
        "Japanese.lproj/InfoPlist.strings",
    ],
    deps = ["mozc_macos_main_lib"],
)

mozc_objc_library(
    name = "common",
    hdrs = ["common.h"],
    sdk_frameworks = ["Foundation"],
)

mozc_objc_library(
    name = "mozc_macos_main_lib",
    srcs = ["main.mm"],
    sdk_frameworks = [
        "Carbon",
        "Cocoa",
        "InputMethodKit",
    ],
    tags = ["manual"],
    deps = [
        ":imk_controller",
        ":imk_server",
        "//base:const",
        "//base:crash_report_handler",
        "//base:init_mozc",
        "//base:logging",
        "//base:run_level",
        "//client",
        "//config:stats_config_util",
        "@com_google_absl//absl/flags:flag",
    ],
)

mozc_objc_library(
    name = "imk_controller",
    srcs = [
        "GoogleJapaneseInputController.mm",
    ],
    hdrs = [
        "GoogleJapaneseInputController.h",
    ],
    data = [
        "English.lproj/Config.xib",
        "Japanese.lproj/Config.xib",
    ],
    sdk_frameworks = [
        "Carbon",
        "Cocoa",
        "Foundation",
        "InputMethodKit",
    ],
    tags = ["manual"],
    textual_hdrs = [
        "GoogleJapaneseInputControllerInterface.h",
    ],
    deps = [
        ":common",
        ":imk_server",
        ":keycode_map",
        "//base:const",
        "//base:logging",
        "//base:process",
        "//base:util",
        "//base/mac:mac_process",
        "//base/mac:mac_util",
        "//client",
        "//client:client_interface",
        "//ipc",
        "//protocol:commands_cc_proto",
        "//protocol:config_cc_proto",
        "//protocol:renderer_cc_proto",
        "//renderer:renderer_client",
        "//renderer:renderer_interface",
        "@com_google_absl//absl/strings",
    ],
)

mozc_objc_test(
    name = "imk_controller_test",
    size = "small",
    srcs = ["GoogleJapaneseInputController_test.mm"],
    deps = [
        ":imk_controller",
        ":keycode_map",
        "//base:logging",
        "//base/mac:mac_util",
        "//client:client_mock",
        "//protocol:candidates_cc_proto",
        "//renderer:renderer_interface",
        "//testing:gunit_main_objc",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/time",
    ],
)

mozc_objc_library(
    name = "imk_server",
    srcs = ["GoogleJapaneseInputServer.mm"],
    hdrs = ["GoogleJapaneseInputServer.h"],
    sdk_frameworks = [
        "Foundation",
        "InputMethodKit",
    ],
    tags = ["manual"],
    deps = [
        ":common",
        "//base:const",
        "//base:logging",
        "//protocol:commands_cc_proto",
        "@com_google_absl//absl/base",
    ],
)

mozc_objc_test(
    name = "imk_server_test",
    size = "small",
    srcs = ["GoogleJapaneseInputServer_test.mm"],
    sdk_frameworks = ["InputMethodKit"],
    deps = [
        ":imk_server",
        "//protocol:commands_cc_proto",
        "//testing:gunit_main_objc",
    ],
)

mozc_objc_library(
    name = "keycode_map",
    srcs = ["KeyCodeMap.mm"],
    hdrs = ["KeyCodeMap.h"],
    sdk_frameworks = [
        "Carbon",
        "Cocoa",
    ],
    tags = ["manual"],
    textual_hdrs = [
        ":init_kanamap",
        ":init_specialkeymap",
        ":init_specialcharmap",
    ],
    deps = [
        "//base:logging",
        "//protocol:commands_cc_proto",
        "@com_google_absl//absl/base",
    ],
)

mozc_objc_test(
    name = "keycode_map_test",
    size = "small",
    srcs = ["KeyCodeMap_test.mm"],
    sdk_frameworks = ["AppKit"],
    deps = [
        ":keycode_map",
        "//protocol:commands_cc_proto",
        "//testing:gunit_main_objc",
    ],
)

mozc_py_binary(
    name = "generate_mapping",
    srcs = ["generate_mapping.py"],
    test_lib = False,
)

genrule(
    name = "init_kanamap",
    srcs = ["//data/preedit:mac-kana.tsv"],
    outs = ["init_kanamap.h"],
    cmd = ("$(location :generate_mapping) --mapname=KanaMap" +
           " --result_type='const char *' --filename $< > $@"),
    tools = [":generate_mapping"],
)

genrule(
    name = "init_specialkeymap",
    srcs = ["//data/preedit:mac-specialkeys.tsv"],
    outs = ["init_specialkeymap.h"],
    cmd = ("$(location :generate_mapping) --mapname=SpecialKeyMap" +
           " --result_type=KeyEvent::SpecialKey --filename $< > $@"),
    tools = [":generate_mapping"],
)

genrule(
    name = "init_specialcharmap",
    srcs = ["//data/preedit:mac-specialchars.tsv"],
    outs = ["init_specialcharmap.h"],
    cmd = ("$(location :generate_mapping) --mapname=SpecialCharMap" +
           " --key_type=unichar --result_type=KeyEvent::SpecialKey" +
           " --filename $< > $@"),
    tools = [":generate_mapping"],
)

mozc_objc_library(
    name = "activate_pane_lib",
    srcs = ["ActivatePane/ActivatePane.mm"],
    hdrs = ["ActivatePane/ActivatePane.h"],
    data = ["ActivatePane/ActivatePane.xib"],
    sdk_frameworks = [
        "Carbon",
        "Cocoa",
        "Foundation",
        "InstallerPlugins",
    ],
    tags = ["manual"],
)

mozc_macos_bundle(
    name = "activate_pane",
    bundle_name = "ActivatePane",
    infoplists = ["ActivatePane/Info.plist"],
    strings = [
        "ActivatePane/English.lproj/InfoPlist.strings",
        "ActivatePane/English.lproj/Localizable.strings",
        "ActivatePane/Japanese.lproj/InfoPlist.strings",
        "ActivatePane/Japanese.lproj/Localizable.strings",
    ],
    deps = ["activate_pane_lib"],
)

mozc_objc_library(
    name = "dev_confirm_pane_lib",
    srcs = ["DevConfirmPane/DevConfirmPane.mm"],
    hdrs = ["DevConfirmPane/DevConfirmPane.h"],
    data = ["DevConfirmPane/DevConfirmPane.xib"],
    sdk_frameworks = [
        "Carbon",
        "Cocoa",
        "Foundation",
        "InstallerPlugins",
    ],
    tags = ["manual"],
)

mozc_macos_bundle(
    name = "dev_confirm_pane",
    bundle_name = "DevConfirmPane",
    infoplists = ["DevConfirmPane/Info.plist"],
    strings = [
        "DevConfirmPane/English.lproj/InfoPlist.strings",
        "DevConfirmPane/English.lproj/Localizable.strings",
        "DevConfirmPane/Japanese.lproj/InfoPlist.strings",
        "DevConfirmPane/Japanese.lproj/Localizable.strings",
    ],
    deps = ["dev_confirm_pane_lib"],
)

mozc_objc_library(
    name = "uninstaller_main_lib",
    srcs = [
        "Uninstaller/DialogsController.mm",
        "Uninstaller/Uninstaller.mm",
        "Uninstaller/Uninstaller_main.mm",
    ],
    hdrs = [
        "Uninstaller/DialogsController.h",
        "Uninstaller/Uninstaller.h",
    ],
    data = [
        "Uninstaller/English.lproj/Dialogs.xib",
        "Uninstaller/Japanese.lproj/Dialogs.xib",
    ],
    sdk_frameworks = [
        "Carbon",
        "Cocoa",
        "Security",
    ],
    tags = ["manual"],
    deps = [
        "//base:init_mozc",
        "//base:url",
        "//base:version",
        "//base/mac:mac_util",
    ],
)

mozc_macos_application(
    name = "uninstaller_macos",
    bundle_name = "Uninstall" + mozc_select(
        default = "GoogleJapaneseInput",
        oss = "Mozc",
    ),
    infoplists = ["Uninstaller/Info.plist"],
    strings = [
        "Uninstaller/English.lproj/InfoPlist.strings",
        "Uninstaller/Japanese.lproj/InfoPlist.strings",
    ],
    deps = ["uninstaller_main_lib"],
)

genrule(
    name = "tweak_preflight",
    srcs = mozc_select(
        default = ["installer/preflight_template.sh"],
        oss = ["installer/preflight_template.sh"],
    ),
    outs = ["preflight.sh"],
    cmd = ("$(location //build_tools:tweak_macinstaller_script)" +
           " --output $@" +
           " --input $<" +
           " --version_file $(location //base:mozc_version_txt)" +
           " --build_type dev"),  # or stable.
    tools = [
        "//base:mozc_version_txt",
        "//build_tools:tweak_macinstaller_script",
    ],
)

genrule(
    name = "tweak_postflight",
    srcs = mozc_select(
        default = ["installer/postflight_template.sh"],
        oss = ["installer/postflight_template.sh"],
    ),
    outs = ["postflight.sh"],
    cmd = ("$(location //build_tools:tweak_macinstaller_script)" +
           " --output $@" +
           " --input $<" +
           " --version_file $(location //base:mozc_version_txt)" +
           " --build_type dev"),  # or stable.
    tools = [
        "//base:mozc_version_txt",
        "//build_tools:tweak_macinstaller_script",
    ],
)

mozc_py_binary(
    name = "zip_files",
    srcs = ["zip_files.py"],
    test_lib = False,
    deps = ["//build_tools:util"],
)

genrule(
    name = "zipped_installer_files",
    srcs = [
        ":tweak_preflight",
        ":tweak_postflight",
    ] + mozc_select(
        # For both macos and oss_macos
        macos = [
            ":activate_pane",
            ":dev_confirm_pane",
            ":mozc_macos",
            ":uninstaller_macos",
        ],
    ) + mozc_select(
        # For macos or oss_macos only
        macos = [
            "installer/distribution.xml",
            "installer/InstallerSections.plist",
            "installer/LaunchAgents/com.google.inputmethod.Japanese.Converter.plist",
            "installer/LaunchAgents/com.google.inputmethod.Japanese.Renderer.plist",
        ],
        oss_macos = [
            "//gui/config_dialog:config_dialog_macos",
            "//gui/dictionary_tool:dictionary_tool_macos",
            "installer/distribution.xml",
            "installer/InstallerSections.plist",
            "installer/LaunchAgents/org.mozc.inputmethod.Japanese.Converter.plist",
            "installer/LaunchAgents/org.mozc.inputmethod.Japanese.Renderer.plist",
        ],
    ),
    outs = ["installer.zip"],
    cmd = "$(location :zip_files) --inputs $(SRCS) --output $@",
    tools = [
        ":zip_files",
    ],
)

mozc_py_binary(
    name = "tweak_installer_files",
    srcs = ["tweak_installer_files.py"],
    test_lib = False,
    deps = ["//build_tools:util"],
)

genrule(
    name = "tweaked_installer_files",
    srcs = [":zipped_installer_files"],
    outs = ["tweaked_installer.zip"],
    cmd = "$(location :tweak_installer_files) --input $(SRCS) --output $@",
    tags = ["manual"],
    tools = [":tweak_installer_files"],
)

genrule(
    name = "productbuild_files",
    srcs = [":zipped_installer_files"],
    outs = ["productbuild_files.zip"],
    cmd = "$(location :tweak_installer_files) --productbuild --input $(SRCS) --output $@" + mozc_select(
        default = " --noqt",
        oss_macos = " --oss",
    ),
    tags = ["manual"],
    tools = [":tweak_installer_files"],
)

# Binary for Packages (i.e. packagesbuild command)
mozc_py_binary(
    name = "build_installer",
    srcs = ["build_installer.py"],
    test_lib = False,
    deps = ["//build_tools:util"],
)

# AUTO_UPDATER_DIR should be replaced with a valid directory.
AUTO_UPDATER_DIR = "Releases/Keystone"  # Placeholder

genrule(
    name = "installer_oss_macos",
    srcs = [":tweaked_installer_files"] + mozc_select(
        oss_macos = ["installer/Mozc_template.pkgproj"],
    ),
    outs = ["Mozc_Packages.pkg"],
    cmd = ("$(location :build_installer) --input $(location :tweaked_installer_files) --output $@" +
           " --pkgproj_command $(location //build_tools:tweak_pkgproj)" +
           " --pkgproj_input $(location installer/Mozc_template.pkgproj)" +
           " --pkgproj_output installer.pkgproj" +
           " --version_file $(location //base:mozc_version_txt)" +
           " --auto_updater_dir " + AUTO_UPDATER_DIR +
           " --build_type dev"),  # or stable
    tags = ["manual"],
    tools = [
        ":build_installer",
        "//base:mozc_version_txt",
        "//build_tools:tweak_pkgproj",
    ],
)

# Binary for default tools (i.e. pkgbuild and productbuild commands)
mozc_py_binary(
    name = "build_package",
    srcs = ["build_package.py"],
    test_lib = False,
    deps = ["//build_tools:util"],
)

genrule(
    name = "package",
    srcs = [":productbuild_files"],
    outs = ["Mozc.pkg"],
    cmd = "$(location :build_package) --input $(location :productbuild_files) --output $@" +
          mozc_select(
              default = "",
              oss = " --oss",
          ),
    exec_compatible_with = ["@platforms//os:macos"],
    # TODO(b/269007577): version_file, auto_updater_dir and build_type should be supported.
    tags = ["manual"],
    tools = [":build_package"],
)
