# Copyright 2010-2021, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Visibility:  please choose a more appropriate default for the package,
# and update any rules that should be different.

load(
    "//:build_defs.bzl",
    "mozc_cc_library",
    "mozc_cc_test",
)

package(default_visibility = ["//:__subpackages__"])

mozc_cc_library(
    name = "lru_storage",
    srcs = ["lru_storage.cc"],
    hdrs = ["lru_storage.h"],
    deps = [
        "//base:bits",
        "//base:clock",
        "//base:file_stream",
        "//base:file_util",
        "//base:hash",
        "//base:logging",
        "//base:mmap",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/time",
    ],
)

mozc_cc_library(
    name = "lru_cache",
    hdrs = ["lru_cache.h"],
    deps = [
        "//base:logging",
        "//base:port",
        "@com_google_absl//absl/container:flat_hash_map",
    ],
)

mozc_cc_test(
    name = "lru_cache_test",
    srcs = ["lru_cache_test.cc"],
    deps = [
        ":lru_cache",
        "//testing:gunit_main",
    ],
)

mozc_cc_library(
    name = "existence_filter",
    srcs = ["existence_filter.cc"],
    hdrs = ["existence_filter.h"],
    deps = [
        "//base:bits",
        "//base:logging",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/numeric:bits",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/types:span",
    ],
)

mozc_cc_test(
    name = "lru_storage_test",
    size = "small",
    srcs = ["lru_storage_test.cc"],
    deps = [
        ":lru_cache",
        ":lru_storage",
        "//base:clock_mock",
        "//base:file_util",
        "//base:logging",
        "//base:port",
        "//base:random",
        "//testing:gunit_main",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/random",
    ],
)

mozc_cc_test(
    name = "existence_filter_test",
    size = "small",
    srcs = ["existence_filter_test.cc"],
    deps = [
        ":existence_filter",
        "//base:hash",
        "//base:logging",
        "//testing:gunit_main",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_library(
    name = "storage_interaface",
    hdrs = ["storage_interface.h"],
    deps = ["//base:port"],
)

mozc_cc_library(
    name = "tiny_storage",
    srcs = ["tiny_storage.cc"],
    hdrs = ["tiny_storage.h"],
    deps = [
        ":storage_interaface",
        "//base:bits",
        "//base:file_stream",
        "//base:file_util",
        "//base:logging",
        "//base:mmap",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_test(
    name = "tiny_storage_test",
    size = "small",
    srcs = ["tiny_storage_test.cc"],
    deps = [
        ":storage_interaface",
        ":tiny_storage",
        "//base:file_util",
        "//testing:gunit_main",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_library(
    name = "registry",
    srcs = ["registry.cc"],
    hdrs = ["registry.h"],
    deps = [
        ":storage_interaface",
        ":tiny_storage",
        "//base:bits",
        "//base:file_util",
        "//base:logging",
        "//base:port",
        "//base:singleton",
        "//base:system_util",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/synchronization",
    ],
)

mozc_cc_test(
    name = "registry_test",
    size = "small",
    srcs = ["registry_test.cc"],
    deps = [
        ":registry",
        "//testing:gunit_main",
        "//testing:mozctest",
    ],
)

mozc_cc_library(
    name = "encrypted_string_storage",
    srcs = ["encrypted_string_storage.cc"],
    hdrs = ["encrypted_string_storage.h"],
    deps = [
        "//base:encryptor",
        "//base:file_stream",
        "//base:file_util",
        "//base:logging",
        "//base:mmap",
        "//base:random",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_test(
    name = "encrypted_string_storage_test",
    size = "small",
    srcs = ["encrypted_string_storage_test.cc"],
    tags = ["nowin"],  # TODO(yuryu): depends on //base:encryptor
    deps = [
        ":encrypted_string_storage",
        "//base:file_stream",
        "//base:file_util",
        "//base:logging",
        "//base:system_util",
        "//testing:gunit_main",
        "//testing:mozctest",
    ],
)
